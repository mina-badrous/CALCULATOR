
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  000019ae  00001a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080013c  0080013c  00001b1e  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000794  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00004f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b90  00000000  00000000  0000509b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a42  00000000  00000000  00006c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b7c  00000000  00000000  0000766d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000350  00000000  00000000  000081ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000067f  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000169c  00000000  00000000  00008bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f0  00000000  00000000  0000a257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

00000054 <str_nan.1656>:
      54:	6e 61 6e 00 4e 41 4e 00                             nan.NAN.

0000005c <str_inf.1657>:
      5c:	69 6e 66 00 49 4e 46 00 00 40 7a 10 f3 5a 00 a0     inf.INF..@z..Z..
      6c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      7c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      8c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      9c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      ac:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      bc:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      cc:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
      dc:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
      ec:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
      fc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     10c:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     11c:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     12c:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     13c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     14c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     15c:	3d 27                                               ='

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf e5       	ldi	r28, 0x5F	; 95
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e6       	ldi	r26, 0x60	; 96
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ee ea       	ldi	r30, 0xAE	; 174
     172:	f9 e1       	ldi	r31, 0x19	; 25
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ac 33       	cpi	r26, 0x3C	; 60
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	ac e3       	ldi	r26, 0x3C	; 60
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a8 39       	cpi	r26, 0x98	; 152
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 1c 01 	call	0x238	; 0x238 <main>
     194:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <vKeypadInit>:
									                  {'C','0','=','+'}};
//-----------------------------------------------------------------------
 void vKeypadInit(void)
 {
 //set rows as output
 ROW0_DIR |=(1U<<ROW0);
     19c:	a0 9a       	sbi	0x14, 0	; 20
 ROW1_DIR |=(1U<<ROW1);
     19e:	a1 9a       	sbi	0x14, 1	; 20
 ROW2_DIR |=(1U<<ROW2);
     1a0:	a2 9a       	sbi	0x14, 2	; 20
 ROW3_DIR |=(1U<<ROW3);
     1a2:	a3 9a       	sbi	0x14, 3	; 20
  //set lines as input
  LINE0_DIR &=~(1U<<LINE0);
     1a4:	a4 98       	cbi	0x14, 4	; 20
  LINE1_DIR &=~(1U<<LINE1);
     1a6:	a5 98       	cbi	0x14, 5	; 20
  LINE2_DIR &=~(1U<<LINE2);
     1a8:	a6 98       	cbi	0x14, 6	; 20
  LINE3_DIR &=~(1U<<LINE3);
     1aa:	a7 98       	cbi	0x14, 7	; 20
 //set rows output to no output state(1)
 ROW0_OUTPUT |=(1U<<ROW0);
     1ac:	a8 9a       	sbi	0x15, 0	; 21
 ROW1_OUTPUT |=(1U<<ROW1);
     1ae:	a9 9a       	sbi	0x15, 1	; 21
 ROW2_OUTPUT |=(1U<<ROW2);
     1b0:	aa 9a       	sbi	0x15, 2	; 21
 ROW3_OUTPUT |=(1U<<ROW3);
     1b2:	ab 9a       	sbi	0x15, 3	; 21
 //pull the line up
 LINE0_PULLRIG |=(1U<<LINE0);
     1b4:	ac 9a       	sbi	0x15, 4	; 21
 LINE1_PULLRIG |=(1U<<LINE1);
     1b6:	ad 9a       	sbi	0x15, 5	; 21
 LINE2_PULLRIG |=(1U<<LINE2);
     1b8:	ae 9a       	sbi	0x15, 6	; 21
 LINE3_PULLRIG |=(1U<<LINE3);
     1ba:	af 9a       	sbi	0x15, 7	; 21
     1bc:	08 95       	ret

000001be <ucKeypadScan>:
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
     1be:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set rows output to no output state(1)
		ROW0_OUTPUT |=(1U<<ROW0);
     1c0:	a8 9a       	sbi	0x15, 0	; 21
		ROW1_OUTPUT |=(1U<<ROW1);
     1c2:	a9 9a       	sbi	0x15, 1	; 21
		ROW2_OUTPUT |=(1U<<ROW2);
     1c4:	aa 9a       	sbi	0x15, 2	; 21
		ROW3_OUTPUT |=(1U<<ROW3);
     1c6:	ab 9a       	sbi	0x15, 3	; 21
		
		//set certain row to output state (0)
		switch(row)
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	41 f0       	breq	.+16     	; 0x1dc <ucKeypadScan+0x1e>
     1cc:	28 f0       	brcs	.+10     	; 0x1d8 <ucKeypadScan+0x1a>
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	39 f0       	breq	.+14     	; 0x1e0 <ucKeypadScan+0x22>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <ucKeypadScan+0x28>
     1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <ucKeypadScan+0x26>
		{
		case 0:ROW0_OUTPUT &=~(1U<<ROW0);break;
     1d8:	a8 98       	cbi	0x15, 0	; 21
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <ucKeypadScan+0x28>
		case 1:ROW1_OUTPUT &=~(1U<<ROW1);break;
     1dc:	a9 98       	cbi	0x15, 1	; 21
     1de:	03 c0       	rjmp	.+6      	; 0x1e6 <ucKeypadScan+0x28>
		case 2:ROW2_OUTPUT &=~(1U<<ROW2);break;
     1e0:	aa 98       	cbi	0x15, 2	; 21
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <ucKeypadScan+0x28>
		case 3:ROW3_OUTPUT &=~(1U<<ROW3);break;
     1e4:	ab 98       	cbi	0x15, 3	; 21
		default:break;
		}
		//check on lines
		if (LINE0_CHECK==IS_VALID){line=0;}
     1e6:	9c 9b       	sbis	0x13, 4	; 19
     1e8:	15 c0       	rjmp	.+42     	; 0x214 <ucKeypadScan+0x56>
		else if (LINE1_CHECK==IS_VALID){line=1;}
     1ea:	9d 9b       	sbis	0x13, 5	; 19
     1ec:	15 c0       	rjmp	.+42     	; 0x218 <ucKeypadScan+0x5a>
		else if (LINE2_CHECK==IS_VALID){line=2;}
     1ee:	9e 9b       	sbis	0x13, 6	; 19
     1f0:	15 c0       	rjmp	.+42     	; 0x21c <ucKeypadScan+0x5e>
		else if (LINE3_CHECK==IS_VALID){line=3;}
     1f2:	9f 9b       	sbis	0x13, 7	; 19
     1f4:	15 c0       	rjmp	.+42     	; 0x220 <ucKeypadScan+0x62>
     1f6:	09 c0       	rjmp	.+18     	; 0x20a <ucKeypadScan+0x4c>
		else {/* MISRA */}
		//check for input validity
		if (line != NO_VALID_INPUT) 
		{
			//wait till the input is gone
			while(ALL_INPUTS_CHECK == IS_STILL_VALID);
     1f8:	9c 9b       	sbis	0x13, 4	; 19
     1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <ucKeypadScan+0x3a>
     1fc:	9d 9b       	sbis	0x13, 5	; 19
     1fe:	fc cf       	rjmp	.-8      	; 0x1f8 <ucKeypadScan+0x3a>
     200:	9e 9b       	sbis	0x13, 6	; 19
     202:	fa cf       	rjmp	.-12     	; 0x1f8 <ucKeypadScan+0x3a>
     204:	9f 9b       	sbis	0x13, 7	; 19
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <ucKeypadScan+0x3a>
     208:	0d c0       	rjmp	.+26     	; 0x224 <ucKeypadScan+0x66>
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	c1 f6       	brne	.-80     	; 0x1c0 <ucKeypadScan+0x2>
 unsigned char ucKeypadScan(void)
 {
	//pseudo code
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	08 95       	ret
		case 2:ROW2_OUTPUT &=~(1U<<ROW2);break;
		case 3:ROW3_OUTPUT &=~(1U<<ROW3);break;
		default:break;
		}
		//check on lines
		if (LINE0_CHECK==IS_VALID){line=0;}
     214:	e0 e0       	ldi	r30, 0x00	; 0
     216:	f0 cf       	rjmp	.-32     	; 0x1f8 <ucKeypadScan+0x3a>
		else if (LINE1_CHECK==IS_VALID){line=1;}
     218:	e1 e0       	ldi	r30, 0x01	; 1
     21a:	ee cf       	rjmp	.-36     	; 0x1f8 <ucKeypadScan+0x3a>
		else if (LINE2_CHECK==IS_VALID){line=2;}
     21c:	e2 e0       	ldi	r30, 0x02	; 2
     21e:	ec cf       	rjmp	.-40     	; 0x1f8 <ucKeypadScan+0x3a>
		else if (LINE3_CHECK==IS_VALID){line=3;}
     220:	e3 e0       	ldi	r30, 0x03	; 3
     222:	ea cf       	rjmp	.-44     	; 0x1f8 <ucKeypadScan+0x3a>
		if (line != NO_VALID_INPUT) 
		{
			//wait till the input is gone
			while(ALL_INPUTS_CHECK == IS_STILL_VALID);
			//save the mapped key[row][line]
			result = s_keypad_mapping[row][line];
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	94 e0       	ldi	r25, 0x04	; 4
     228:	89 9f       	mul	r24, r25
     22a:	e0 0d       	add	r30, r0
     22c:	f1 1d       	adc	r31, r1
     22e:	11 24       	eor	r1, r1
     230:	e4 51       	subi	r30, 0x14	; 20
     232:	ff 4f       	sbci	r31, 0xFF	; 255
     234:	80 81       	ld	r24, Z
		}
		
	}
	//return the mapped key	 
	return result;
 }
     236:	08 95       	ret

00000238 <main>:
														  {"MATH ERROR"},
														  {"F FORMAT ERROR"},
														  {"NO OPERATION"}};
//-------------------------------------------------------------
int main(void)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	61 97       	sbiw	r28, 0x11	; 17
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
//-------------------------------------------------------------
static void vMainOutputCalculator( void )
{
	u8 processing_error=0;
	u8 input_char=0;
	char output_string[MAX_INPUT_CHAR]={0};
     24c:	0f 2e       	mov	r0, r31
     24e:	f1 e1       	ldi	r31, 0x11	; 17
     250:	bf 2e       	mov	r11, r31
     252:	f0 2d       	mov	r31, r0
     254:	ee 24       	eor	r14, r14
     256:	e3 94       	inc	r14
     258:	f1 2c       	mov	r15, r1
     25a:	ec 0e       	add	r14, r28
     25c:	fd 1e       	adc	r15, r29
	while(1)
	{
		input_char=ucKeypadScan();  //read input
		if(input_char == 'C') break;
	}
	g_e_calculator_state=INPUT_STATE;
     25e:	dd 24       	eor	r13, r13
     260:	d3 94       	inc	r13
static const char g_error_string[MAX_ERROR][MAX_ERROR_STRING]={{"NO ERROR"},
														  {"MATH ERROR"},
														  {"F FORMAT ERROR"},
														  {"NO OPERATION"}};
//-------------------------------------------------------------
int main(void)
     262:	0f e4       	ldi	r16, 0x4F	; 79
     264:	11 e0       	ldi	r17, 0x01	; 1
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
				g_e_calculator_state=OUTPUT_STATE;
				break;
			}
			//save the = sign
			g_dump_input_array[input_count]=input_char;  //save = as last char number index 16 or less
     266:	0f 2e       	mov	r0, r31
     268:	fd e3       	ldi	r31, 0x3D	; 61
     26a:	9f 2e       	mov	r9, r31
     26c:	f0 2d       	mov	r31, r0
				g_e_calculator_state=PROCESS_STATE;
				break;	
			}
			else
			{
				g_e_calculator_state=ERROR_STATE;
     26e:	68 94       	set
     270:	aa 24       	eor	r10, r10
     272:	a2 f8       	bld	r10, 2
			{
				g_error_flag=CALCULATOR_MATH_ERROR;
			}
			if(g_error_flag ==CALCULATOR_NO_INPUT_ERROR)
			{
				g_e_calculator_state=PROCESS_STATE;
     274:	68 94       	set
     276:	88 24       	eor	r8, r8
     278:	81 f8       	bld	r8, 1
		{
			
			//check if no operation 
			if(operator_count ==0)
			{
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
     27a:	0f 2e       	mov	r0, r31
     27c:	f3 e0       	ldi	r31, 0x03	; 3
     27e:	cf 2e       	mov	r12, r31
     280:	f0 2d       	mov	r31, r0
//-------------------------------------------------------------
int main(void)
{
    while(1)
    {
		switch(g_e_calculator_state)
     282:	80 91 3c 01 	lds	r24, 0x013C
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	09 f4       	brne	.+2      	; 0x28c <main+0x54>
     28a:	81 c0       	rjmp	.+258    	; 0x38e <main+0x156>
     28c:	28 f4       	brcc	.+10     	; 0x298 <main+0x60>
     28e:	88 23       	and	r24, r24
     290:	49 f0       	breq	.+18     	; 0x2a4 <main+0x6c>
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	b1 f7       	brne	.-20     	; 0x282 <main+0x4a>
     296:	0d c0       	rjmp	.+26     	; 0x2b2 <main+0x7a>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	09 f4       	brne	.+2      	; 0x29e <main+0x66>
     29c:	8b c0       	rjmp	.+278    	; 0x3b4 <main+0x17c>
     29e:	84 30       	cpi	r24, 0x04	; 4
     2a0:	81 f7       	brne	.-32     	; 0x282 <main+0x4a>
     2a2:	bd c0       	rjmp	.+378    	; 0x41e <main+0x1e6>
    }
}
//--------------------------------------------------------------
static void vMainInitCalculator( void )
{
	vLcdInit();  
     2a4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vLcdInit>
	vKeypadInit();
     2a8:	0e 94 ce 00 	call	0x19c	; 0x19c <vKeypadInit>
	g_e_calculator_state=INPUT_STATE;
     2ac:	d0 92 3c 01 	sts	0x013C, r13
     2b0:	e8 cf       	rjmp	.-48     	; 0x282 <main+0x4a>
	u8 input_count=0;
	u8 input_char=0;
	u8 index=0;
	u8 operator_count=0;
	//claen up
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;  //reset flag
     2b2:	10 92 3d 01 	sts	0x013D, r1
     2b6:	ee e3       	ldi	r30, 0x3E	; 62
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		g_dump_input_array[index]=0;
     2ba:	11 92       	st	Z+, r1
	u8 index=0;
	u8 operator_count=0;
	//claen up
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;  //reset flag
	
	for(index=0;index<MAX_INPUT_CHAR;index++)
     2bc:	e0 17       	cp	r30, r16
     2be:	f1 07       	cpc	r31, r17
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x82>
     2c2:	61 2c       	mov	r6, r1
     2c4:	71 2c       	mov	r7, r1
	}
	index=0;
	//end clean up
	while(1)
	{
		input_char=ucKeypadScan();  //read input
     2c6:	0e 94 df 00 	call	0x1be	; 0x1be <ucKeypadScan>
		if(input_char == NO_VALID_INPUT)
     2ca:	8f 3f       	cpi	r24, 0xFF	; 255
     2cc:	e1 f3       	breq	.-8      	; 0x2c6 <main+0x8e>
		{
			continue;   //skip
		}
		else if(input_char == 'C')    //reset
     2ce:	83 34       	cpi	r24, 0x43	; 67
     2d0:	79 f4       	brne	.+30     	; 0x2f0 <main+0xb8>
		{
			vLcdClearDisplay();  //clear display
     2d2:	0e 94 91 02 	call	0x522	; 0x522 <vLcdClearDisplay>
			//clear array
			for(index=0;index<=input_count;index++)
     2d6:	80 e0       	ldi	r24, 0x00	; 0
			{
				g_dump_input_array[index]=0;
     2d8:	e8 2f       	mov	r30, r24
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	e2 5c       	subi	r30, 0xC2	; 194
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	10 82       	st	Z, r1
		}
		else if(input_char == 'C')    //reset
		{
			vLcdClearDisplay();  //clear display
			//clear array
			for(index=0;index<=input_count;index++)
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
     2e4:	78 16       	cp	r7, r24
     2e6:	c0 f7       	brcc	.-16     	; 0x2d8 <main+0xa0>
			{
				g_dump_input_array[index]=0;
			}
			input_count=0;
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     2e8:	10 92 3d 01 	sts	0x013D, r1
			//clear array
			for(index=0;index<=input_count;index++)
			{
				g_dump_input_array[index]=0;
			}
			input_count=0;
     2ec:	71 2c       	mov	r7, r1
     2ee:	eb cf       	rjmp	.-42     	; 0x2c6 <main+0x8e>
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
			continue;				
		}
		else if(input_char== '=')  // if equel
     2f0:	8d 33       	cpi	r24, 0x3D	; 61
     2f2:	19 f5       	brne	.+70     	; 0x33a <main+0x102>
		{
			
			//check if no operation 
			if(operator_count ==0)
     2f4:	61 10       	cpse	r6, r1
     2f6:	05 c0       	rjmp	.+10     	; 0x302 <main+0xca>
			{
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
     2f8:	c0 92 3d 01 	sts	0x013D, r12
				g_e_calculator_state=OUTPUT_STATE;
     2fc:	c0 92 3c 01 	sts	0x013C, r12
     300:	c0 cf       	rjmp	.-128    	; 0x282 <main+0x4a>
				break;
			}
			//save the = sign
			g_dump_input_array[input_count]=input_char;  //save = as last char number index 16 or less
     302:	e7 2d       	mov	r30, r7
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	e2 5c       	subi	r30, 0xC2	; 194
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	90 82       	st	Z, r9
			//check last char is not operator
			if((g_dump_input_array[input_count-1] == '+') || (g_dump_input_array[input_count-1] == '-') || (g_dump_input_array[input_count-1] == '*') || (g_dump_input_array[input_count-1] == '/'))
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	80 81       	ld	r24, Z
     310:	8b 32       	cpi	r24, 0x2B	; 43
     312:	31 f0       	breq	.+12     	; 0x320 <main+0xe8>
     314:	8d 32       	cpi	r24, 0x2D	; 45
     316:	21 f0       	breq	.+8      	; 0x320 <main+0xe8>
     318:	8a 32       	cpi	r24, 0x2A	; 42
     31a:	11 f0       	breq	.+4      	; 0x320 <main+0xe8>
     31c:	8f 32       	cpi	r24, 0x2F	; 47
     31e:	19 f4       	brne	.+6      	; 0x326 <main+0xee>
			{
				g_error_flag=CALCULATOR_MATH_ERROR;
     320:	d0 92 3d 01 	sts	0x013D, r13
     324:	07 c0       	rjmp	.+14     	; 0x334 <main+0xfc>
			}
			if(g_error_flag ==CALCULATOR_NO_INPUT_ERROR)
     326:	80 91 3d 01 	lds	r24, 0x013D
     32a:	81 11       	cpse	r24, r1
     32c:	03 c0       	rjmp	.+6      	; 0x334 <main+0xfc>
			{
				g_e_calculator_state=PROCESS_STATE;
     32e:	80 92 3c 01 	sts	0x013C, r8
     332:	a7 cf       	rjmp	.-178    	; 0x282 <main+0x4a>
				break;	
			}
			else
			{
				g_e_calculator_state=ERROR_STATE;
     334:	a0 92 3c 01 	sts	0x013C, r10
     338:	a4 cf       	rjmp	.-184    	; 0x282 <main+0x4a>
			
		}
		else   //if any valid char 
		{
			
			if(input_count<MAX_INPUT_CHAR-1)
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	97 15       	cp	r25, r7
     33e:	18 f2       	brcs	.-122    	; 0x2c6 <main+0x8e>
			{
				//count number of operator
				if((input_char == '+') || (input_char == '-') || (input_char == '*') || (input_char == '/'))
     340:	8b 32       	cpi	r24, 0x2B	; 43
     342:	51 f0       	breq	.+20     	; 0x358 <main+0x120>
     344:	8d 32       	cpi	r24, 0x2D	; 45
     346:	41 f0       	breq	.+16     	; 0x358 <main+0x120>
     348:	8a 32       	cpi	r24, 0x2A	; 42
     34a:	09 f4       	brne	.+2      	; 0x34e <main+0x116>
     34c:	79 c0       	rjmp	.+242    	; 0x440 <main+0x208>
     34e:	8f 32       	cpi	r24, 0x2F	; 47
     350:	99 f4       	brne	.+38     	; 0x378 <main+0x140>
     352:	7a c0       	rjmp	.+244    	; 0x448 <main+0x210>
				{
				//check if * or / sign placed first
					if (input_count==0 && ((input_char == '*') || (input_char == '/')))
					{
						g_error_flag=CALCULATOR_MATH_ERROR;
     354:	d0 92 3d 01 	sts	0x013D, r13
					}
					//check if 2 operation signs 
					if((g_dump_input_array[input_count-1] == '+') || (g_dump_input_array[input_count-1]== '-') || (g_dump_input_array[input_count-1]== '*') || (g_dump_input_array[input_count-1]== '/'))
     358:	e7 2d       	mov	r30, r7
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	e3 5c       	subi	r30, 0xC3	; 195
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	90 81       	ld	r25, Z
     362:	9b 32       	cpi	r25, 0x2B	; 43
     364:	31 f0       	breq	.+12     	; 0x372 <main+0x13a>
     366:	9d 32       	cpi	r25, 0x2D	; 45
     368:	21 f0       	breq	.+8      	; 0x372 <main+0x13a>
     36a:	9a 32       	cpi	r25, 0x2A	; 42
     36c:	11 f0       	breq	.+4      	; 0x372 <main+0x13a>
     36e:	9f 32       	cpi	r25, 0x2F	; 47
     370:	11 f4       	brne	.+4      	; 0x376 <main+0x13e>
					{
						g_error_flag=CALCULATOR_MATH_ERROR;
     372:	d0 92 3d 01 	sts	0x013D, r13
					}
					operator_count++;
     376:	63 94       	inc	r6
				}
			
				g_dump_input_array[input_count]=input_char;   //save char
     378:	e7 2d       	mov	r30, r7
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	e2 5c       	subi	r30, 0xC2	; 194
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	80 83       	st	Z, r24
				u8LcdPrint(input_char,LCD_FIRST_LINE,input_count); //print char
     382:	47 2d       	mov	r20, r7
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <u8LcdPrint>
				input_count++;
     38a:	73 94       	inc	r7
     38c:	9c cf       	rjmp	.-200    	; 0x2c6 <main+0x8e>
}
//-------------------------------------------------------------
static void vMainProcessCalculator(void)
{
	u8 result=0;
	if(g_error_flag==CALCULATOR_ERROR_NO_OPERATION)
     38e:	80 91 3d 01 	lds	r24, 0x013D
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	19 f4       	brne	.+6      	; 0x39c <main+0x164>
	{
		g_e_calculator_state=OUTPUT_STATE;
     396:	c0 92 3c 01 	sts	0x013C, r12
     39a:	73 cf       	rjmp	.-282    	; 0x282 <main+0x4a>
		return;  //break 
	}
	else
	{
		//calculate the expresion
		result=u8ProcessingCalculate(g_dump_input_array);
     39c:	8e e3       	ldi	r24, 0x3E	; 62
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <u8ProcessingCalculate>
		if(result==0)
     3a4:	81 11       	cpse	r24, r1
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <main+0x176>
		{
			g_e_calculator_state=OUTPUT_STATE;
     3a8:	c0 92 3c 01 	sts	0x013C, r12
     3ac:	6a cf       	rjmp	.-300    	; 0x282 <main+0x4a>
		}
		else
		{
			g_e_calculator_state=ERROR_STATE;
     3ae:	a0 92 3c 01 	sts	0x013C, r10
     3b2:	67 cf       	rjmp	.-306    	; 0x282 <main+0x4a>
//-------------------------------------------------------------
static void vMainOutputCalculator( void )
{
	u8 processing_error=0;
	u8 input_char=0;
	char output_string[MAX_INPUT_CHAR]={0};
     3b4:	f7 01       	movw	r30, r14
     3b6:	8b 2d       	mov	r24, r11
     3b8:	11 92       	st	Z+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <main+0x180>
	//check if no operation
	if(g_error_flag==CALCULATOR_ERROR_NO_OPERATION)
     3be:	80 91 3d 01 	lds	r24, 0x013D
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	59 f4       	brne	.+22     	; 0x3dc <main+0x1a4>
	{
		u8LcdGoToXy(LCD_SECOND_LINE,0);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	8d 2d       	mov	r24, r13
     3ca:	0e 94 9f 02 	call	0x53e	; 0x53e <u8LcdGoToXy>
		u8LcdSendString(g_dump_input_array);  //print the input value
     3ce:	8e e3       	ldi	r24, 0x3E	; 62
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 ba 02 	call	0x574	; 0x574 <u8LcdSendString>
		g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     3d6:	10 92 3d 01 	sts	0x013D, r1
     3da:	1a c0       	rjmp	.+52     	; 0x410 <main+0x1d8>
		
	}
	else //output if operation 
	{
		processing_error=u8ProcessingFloatToString(output_string,g_result_format);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	c7 01       	movw	r24, r14
     3e0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <u8ProcessingFloatToString>
		if(processing_error==NO_PROCESSING_ERROR)
     3e4:	81 11       	cpse	r24, r1
     3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <main+0x1c0>
		{//print answer 
			u8LcdGoToXy(LCD_SECOND_LINE,0);
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	8d 2d       	mov	r24, r13
     3ec:	0e 94 9f 02 	call	0x53e	; 0x53e <u8LcdGoToXy>
			u8LcdSendString(output_string);
     3f0:	c7 01       	movw	r24, r14
     3f2:	0e 94 ba 02 	call	0x574	; 0x574 <u8LcdSendString>
     3f6:	0c c0       	rjmp	.+24     	; 0x410 <main+0x1d8>
		}
		else if(processing_error==CALCULATOR_ERROR_EXCEED_FLOAT_FORMAT)
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	51 f4       	brne	.+20     	; 0x410 <main+0x1d8>
		{
			u8LcdGoToXy(LCD_SECOND_LINE,0);
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	8d 2d       	mov	r24, r13
     400:	0e 94 9f 02 	call	0x53e	; 0x53e <u8LcdGoToXy>
			u8LcdSendString((char *)g_error_string[CALCULATOR_ERROR_EXCEED_FLOAT_FORMAT]);  //print the input value
     404:	8c e1       	ldi	r24, 0x1C	; 28
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	0e 94 ba 02 	call	0x574	; 0x574 <u8LcdSendString>
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     40c:	10 92 3d 01 	sts	0x013D, r1
		}
	}	
	//wait till enter 'C'	
	while(1)
	{
		input_char=ucKeypadScan();  //read input
     410:	0e 94 df 00 	call	0x1be	; 0x1be <ucKeypadScan>
		if(input_char == 'C') break;
     414:	83 34       	cpi	r24, 0x43	; 67
     416:	e1 f7       	brne	.-8      	; 0x410 <main+0x1d8>
	}
	g_e_calculator_state=INPUT_STATE;
     418:	d0 92 3c 01 	sts	0x013C, r13
     41c:	32 cf       	rjmp	.-412    	; 0x282 <main+0x4a>
}
//-----------------------------------------------------------------
static void vMainErrorCalculator(void)
{
	char input_char=0;
	u8LcdGoToXy(LCD_SECOND_LINE,0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	8d 2d       	mov	r24, r13
     422:	0e 94 9f 02 	call	0x53e	; 0x53e <u8LcdGoToXy>
	u8LcdSendString((char *)g_error_string[CALCULATOR_MATH_ERROR]);
     426:	8c e0       	ldi	r24, 0x0C	; 12
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 ba 02 	call	0x574	; 0x574 <u8LcdSendString>
	while(1)
	{
		input_char=ucKeypadScan();  //read input
     42e:	0e 94 df 00 	call	0x1be	; 0x1be <ucKeypadScan>
		if(input_char == 'C') break;
     432:	83 34       	cpi	r24, 0x43	; 67
     434:	e1 f7       	brne	.-8      	; 0x42e <main+0x1f6>
	}
	g_e_calculator_state=INPUT_STATE;
     436:	d0 92 3c 01 	sts	0x013C, r13
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     43a:	10 92 3d 01 	sts	0x013D, r1
     43e:	21 cf       	rjmp	.-446    	; 0x282 <main+0x4a>
			{
				//count number of operator
				if((input_char == '+') || (input_char == '-') || (input_char == '*') || (input_char == '/'))
				{
				//check if * or / sign placed first
					if (input_count==0 && ((input_char == '*') || (input_char == '/')))
     440:	77 20       	and	r7, r7
     442:	09 f4       	brne	.+2      	; 0x446 <main+0x20e>
     444:	87 cf       	rjmp	.-242    	; 0x354 <main+0x11c>
     446:	88 cf       	rjmp	.-240    	; 0x358 <main+0x120>
     448:	77 20       	and	r7, r7
     44a:	09 f4       	brne	.+2      	; 0x44e <main+0x216>
     44c:	83 cf       	rjmp	.-250    	; 0x354 <main+0x11c>
     44e:	84 cf       	rjmp	.-248    	; 0x358 <main+0x120>

00000450 <SvLatch_data>:
}
//----------------------------------------------------------
static void SvLatch_data( void )
{
	//make E HIGH
	set_bit(LCD_E_OUTPUT,LCD_E);
     450:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     452:	85 e3       	ldi	r24, 0x35	; 53
     454:	8a 95       	dec	r24
     456:	f1 f7       	brne	.-4      	; 0x454 <SvLatch_data+0x4>
     458:	00 00       	nop
	//delay
	_delay_us(20);
	//make E LOw 
	clear_bit(LCD_E_OUTPUT,LCD_E);
     45a:	d8 98       	cbi	0x1b, 0	; 27
     45c:	85 e3       	ldi	r24, 0x35	; 53
     45e:	8a 95       	dec	r24
     460:	f1 f7       	brne	.-4      	; 0x45e <SvLatch_data+0xe>
     462:	00 00       	nop
     464:	08 95       	ret

00000466 <SvLcdSend>:
	SvLcdSend(CMD,LCD_CMD_MODE4_2LINES);
	SvLcdSend(CMD,LCD_CMD_DISPLAY_ON_CURSOR_OFF);
}
//--------------------------------------------------------------
static void SvLcdSend(u8 type,u8 data)
{
     466:	cf 93       	push	r28
     468:	c6 2f       	mov	r28, r22
	//make RS =0 as cmd and = 1 as data
	if(type==CMD)
     46a:	81 11       	cpse	r24, r1
     46c:	02 c0       	rjmp	.+4      	; 0x472 <SvLcdSend+0xc>
	{
		clear_bit(LCD_RS_OUTPUT,LCD_RS);
     46e:	d9 98       	cbi	0x1b, 1	; 27
     470:	01 c0       	rjmp	.+2      	; 0x474 <SvLcdSend+0xe>
	}
	else 
	{
		set_bit(LCD_RS_OUTPUT,LCD_RS);
     472:	d9 9a       	sbi	0x1b, 1	; 27
	}
	
	//high nibble data send
	if(check_bit(data,4))
     474:	c4 ff       	sbrs	r28, 4
     476:	02 c0       	rjmp	.+4      	; 0x47c <SvLcdSend+0x16>
	{
		set_bit(LCD_D4_OUTPUT,LCD_D4);
     478:	dc 9a       	sbi	0x1b, 4	; 27
     47a:	01 c0       	rjmp	.+2      	; 0x47e <SvLcdSend+0x18>
	}
	else
	{
		clear_bit(LCD_D4_OUTPUT,LCD_D4);
     47c:	dc 98       	cbi	0x1b, 4	; 27
	} 
	if(check_bit(data,5))
     47e:	c5 ff       	sbrs	r28, 5
     480:	02 c0       	rjmp	.+4      	; 0x486 <SvLcdSend+0x20>
	{
		set_bit(LCD_D5_OUTPUT,LCD_D5);
     482:	dd 9a       	sbi	0x1b, 5	; 27
     484:	01 c0       	rjmp	.+2      	; 0x488 <SvLcdSend+0x22>
	}
	else
	{
		clear_bit(LCD_D5_OUTPUT,LCD_D5);
     486:	dd 98       	cbi	0x1b, 5	; 27
	}
	if(check_bit(data,6))
     488:	c6 ff       	sbrs	r28, 6
     48a:	02 c0       	rjmp	.+4      	; 0x490 <SvLcdSend+0x2a>
	{
		set_bit(LCD_D6_OUTPUT,LCD_D6);
     48c:	de 9a       	sbi	0x1b, 6	; 27
     48e:	01 c0       	rjmp	.+2      	; 0x492 <SvLcdSend+0x2c>
	}
	else
	{
		clear_bit(LCD_D6_OUTPUT,LCD_D6);
     490:	de 98       	cbi	0x1b, 6	; 27
	}
	if(check_bit(data,7))
     492:	cc 23       	and	r28, r28
     494:	14 f4       	brge	.+4      	; 0x49a <SvLcdSend+0x34>
	{
		set_bit(LCD_D7_OUTPUT,LCD_D7);
     496:	df 9a       	sbi	0x1b, 7	; 27
     498:	01 c0       	rjmp	.+2      	; 0x49c <SvLcdSend+0x36>
	}
	else
	{
		clear_bit(LCD_D7_OUTPUT,LCD_D7);
     49a:	df 98       	cbi	0x1b, 7	; 27
	}
	//latch data
	SvLatch_data();
     49c:	0e 94 28 02 	call	0x450	; 0x450 <SvLatch_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	8f e9       	ldi	r24, 0x9F	; 159
     4a2:	9f e0       	ldi	r25, 0x0F	; 15
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <SvLcdSend+0x3e>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <SvLcdSend+0x44>
     4aa:	00 00       	nop
	//delay
	_delay_ms(2);
	//lower nibble data 
		if(check_bit(data,0))
     4ac:	c0 ff       	sbrs	r28, 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <SvLcdSend+0x4e>
		{
			set_bit(LCD_D4_OUTPUT,LCD_D4);
     4b0:	dc 9a       	sbi	0x1b, 4	; 27
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <SvLcdSend+0x50>
		}
		else
		{
			clear_bit(LCD_D4_OUTPUT,LCD_D4);
     4b4:	dc 98       	cbi	0x1b, 4	; 27
		}
		if(check_bit(data,1))
     4b6:	c1 ff       	sbrs	r28, 1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <SvLcdSend+0x58>
		{
			set_bit(LCD_D5_OUTPUT,LCD_D5);
     4ba:	dd 9a       	sbi	0x1b, 5	; 27
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <SvLcdSend+0x5a>
		}
		else
		{
			clear_bit(LCD_D5_OUTPUT,LCD_D5);
     4be:	dd 98       	cbi	0x1b, 5	; 27
		}
		if(check_bit(data,2))
     4c0:	c2 ff       	sbrs	r28, 2
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <SvLcdSend+0x62>
		{
			set_bit(LCD_D6_OUTPUT,LCD_D6);
     4c4:	de 9a       	sbi	0x1b, 6	; 27
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <SvLcdSend+0x64>
		}
		else
		{
			clear_bit(LCD_D6_OUTPUT,LCD_D6);
     4c8:	de 98       	cbi	0x1b, 6	; 27
		}
		if(check_bit(data,3))
     4ca:	c3 ff       	sbrs	r28, 3
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <SvLcdSend+0x6c>
		{
			set_bit(LCD_D7_OUTPUT,LCD_D7);
     4ce:	df 9a       	sbi	0x1b, 7	; 27
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <SvLcdSend+0x6e>
		}
		else
		{
			clear_bit(LCD_D7_OUTPUT,LCD_D7);
     4d2:	df 98       	cbi	0x1b, 7	; 27
		}
	//latch data
	SvLatch_data();
     4d4:	0e 94 28 02 	call	0x450	; 0x450 <SvLatch_data>
}
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <vLcdInit>:
static void SvLatch_data(void);
//-------------------------------------------------------------
void vLcdInit( void )
{
	//init data as output and E and RS
	set_bit(LCD_E_DDR,LCD_E);
     4dc:	d0 9a       	sbi	0x1a, 0	; 26
	set_bit(LCD_RS_DDR,LCD_RS);
     4de:	d1 9a       	sbi	0x1a, 1	; 26
	
	set_bit(LCD_D4_DDR,LCD_D4);
     4e0:	d4 9a       	sbi	0x1a, 4	; 26
	set_bit(LCD_D5_DDR,LCD_D5);
     4e2:	d5 9a       	sbi	0x1a, 5	; 26
	set_bit(LCD_D6_DDR,LCD_D6);
     4e4:	d6 9a       	sbi	0x1a, 6	; 26
	set_bit(LCD_D7_DDR,LCD_D7);
     4e6:	d7 9a       	sbi	0x1a, 7	; 26
	//init initial condition
	clear_bit(LCD_E_OUTPUT,LCD_E);
     4e8:	d8 98       	cbi	0x1b, 0	; 27
	clear_bit(LCD_RS_OUTPUT,LCD_RS);
     4ea:	d9 98       	cbi	0x1b, 1	; 27
	
	clear_bit(LCD_D4_OUTPUT,LCD_D4);
     4ec:	dc 98       	cbi	0x1b, 4	; 27
	clear_bit(LCD_D5_OUTPUT,LCD_D5);
     4ee:	dd 98       	cbi	0x1b, 5	; 27
	clear_bit(LCD_D6_OUTPUT,LCD_D6);
     4f0:	de 98       	cbi	0x1b, 6	; 27
	clear_bit(LCD_D7_OUTPUT,LCD_D7);
     4f2:	df 98       	cbi	0x1b, 7	; 27
     4f4:	8f e3       	ldi	r24, 0x3F	; 63
     4f6:	9c e9       	ldi	r25, 0x9C	; 156
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <vLcdInit+0x1c>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <vLcdInit+0x22>
     4fe:	00 00       	nop
	//delay to reach vcc level
	_delay_ms(20);
	//send init cmds
	SvLcdSend(CMD,LCD_CMD_MODE4_INIT0);
     500:	63 e3       	ldi	r22, 0x33	; 51
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_MODE4_INIT1);
     508:	62 e3       	ldi	r22, 0x32	; 50
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_MODE4_2LINES);
     510:	68 e2       	ldi	r22, 0x28	; 40
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_DISPLAY_ON_CURSOR_OFF);
     518:	6c e0       	ldi	r22, 0x0C	; 12
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
     520:	08 95       	ret

00000522 <vLcdClearDisplay>:
	SvLcdSend(CMD,data);
}
//-----------------------------------------------------------
void vLcdClearDisplay( void )
{
	SvLcdSend(CMD,LCD_CMD_CLEAR_DISPLAY);
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	80 e7       	ldi	r24, 0x70	; 112
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <vLcdClearDisplay+0xe>
     538:	00 c0       	rjmp	.+0      	; 0x53a <vLcdClearDisplay+0x18>
     53a:	00 00       	nop
     53c:	08 95       	ret

0000053e <u8LcdGoToXy>:
}
//-------------------------------------------------------
u8 u8LcdGoToXy( u8 line,u8 column )
{
	//limit check
	switch(line)
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <u8LcdGoToXy+0xa>
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	89 f4       	brne	.+34     	; 0x568 <u8LcdGoToXy+0x2a>
     546:	08 c0       	rjmp	.+16     	; 0x558 <u8LcdGoToXy+0x1a>
	{
		case LCD_FIRST_LINE :
					if(column >=0 && column <=15)
     548:	60 31       	cpi	r22, 0x10	; 16
     54a:	80 f4       	brcc	.+32     	; 0x56c <u8LcdGoToXy+0x2e>
					{
						SvLcdSend(CMD,FIRST_LINE_ADDRESS + column);
     54c:	60 58       	subi	r22, 0x80	; 128
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
     554:	80 e0       	ldi	r24, 0x00	; 0
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
     556:	08 95       	ret
		case LCD_SECOND_LINE :
					if(column >=0 && column <=15)
     558:	60 31       	cpi	r22, 0x10	; 16
     55a:	50 f4       	brcc	.+20     	; 0x570 <u8LcdGoToXy+0x32>
					{
						SvLcdSend(CMD,SECOND_LINE_ADDRESS + column);
     55c:	60 54       	subi	r22, 0x40	; 64
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
     564:	80 e0       	ldi	r24, 0x00	; 0
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
     566:	08 95       	ret
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	08 95       	ret
					{
						SvLcdSend(CMD,FIRST_LINE_ADDRESS + column);
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	08 95       	ret
					{
						SvLcdSend(CMD,SECOND_LINE_ADDRESS + column);
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
     570:	83 e0       	ldi	r24, 0x03	; 3
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
}
     572:	08 95       	ret

00000574 <u8LcdSendString>:
//---------------------------------------------------------
u8 u8LcdSendString(char* str_ptr)
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	//check if no char send 
	if(str_ptr ==NULL)
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	71 f0       	breq	.+28     	; 0x598 <u8LcdSendString+0x24>
	{
		return LCD_NO_CHAR_TO_PRINT ;
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
     57c:	fc 01       	movw	r30, r24
     57e:	60 81       	ld	r22, Z
     580:	66 23       	and	r22, r22
     582:	61 f0       	breq	.+24     	; 0x59c <u8LcdSendString+0x28>
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
}
//---------------------------------------------------------
u8 u8LcdSendString(char* str_ptr)
     584:	ec 01       	movw	r28, r24
     586:	21 96       	adiw	r28, 0x01	; 1
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
		{
			SvLcdSend(DATA,*str_ptr);
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	{
		return LCD_NO_CHAR_TO_PRINT ;
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
     58e:	69 91       	ld	r22, Y+
     590:	61 11       	cpse	r22, r1
     592:	fa cf       	rjmp	.-12     	; 0x588 <u8LcdSendString+0x14>
		{
			SvLcdSend(DATA,*str_ptr);
			str_ptr++;
		}
		return LCD_NO_ERROR ;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	03 c0       	rjmp	.+6      	; 0x59e <u8LcdSendString+0x2a>
u8 u8LcdSendString(char* str_ptr)
{
	//check if no char send 
	if(str_ptr ==NULL)
	{
		return LCD_NO_CHAR_TO_PRINT ;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <u8LcdSendString+0x2a>
		while(*str_ptr !='\0')
		{
			SvLcdSend(DATA,*str_ptr);
			str_ptr++;
		}
		return LCD_NO_ERROR ;
     59c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <u8LcdPrint>:
//----------------------------------------------------
u8 u8LcdPrint(u8 data,u8 line,u8 position)
{
     5a4:	cf 93       	push	r28
     5a6:	c8 2f       	mov	r28, r24
	u8 l=0;
	if(line>1 || line<0)
     5a8:	62 30       	cpi	r22, 0x02	; 2
     5aa:	98 f4       	brcc	.+38     	; 0x5d2 <u8LcdPrint+0x2e>
	{
		return LCD_ERROR_ROW_OUT_OF_RANGE;   //error
	}
	if(position>15 || position<0)
     5ac:	40 31       	cpi	r20, 0x10	; 16
     5ae:	08 f0       	brcs	.+2      	; 0x5b2 <u8LcdPrint+0xe>
	{
		position=position % 16;  //error
     5b0:	4f 70       	andi	r20, 0x0F	; 15
	}
	switch (line)
     5b2:	61 11       	cpse	r22, r1
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <u8LcdPrint+0x18>
	{
		case 0:
		l=0x80 +position;
     5b6:	64 2f       	mov	r22, r20
     5b8:	60 58       	subi	r22, 0x80	; 128
		break;
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <u8LcdPrint+0x1c>
		default:
		l=0xc0+position;
     5bc:	64 2f       	mov	r22, r20
     5be:	60 54       	subi	r22, 0x40	; 64
		break;
		
	}
	SvLcdSend(CMD,l);    //position    11
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	SvLcdSend(DATA,data);  //data
     5c6:	6c 2f       	mov	r22, r28
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 33 02 	call	0x466	; 0x466 <SvLcdSend>
	return LCD_NO_ERROR;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <u8LcdPrint+0x30>
u8 u8LcdPrint(u8 data,u8 line,u8 position)
{
	u8 l=0;
	if(line>1 || line<0)
	{
		return LCD_ERROR_ROW_OUT_OF_RANGE;   //error
     5d2:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	SvLcdSend(CMD,l);    //position    11
	SvLcdSend(DATA,data);  //data
	return LCD_NO_ERROR;
}
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <u8ProcessingCalculate>:
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
{
     5d8:	2f 92       	push	r2
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	c8 55       	subi	r28, 0x58	; 88
     600:	d1 09       	sbc	r29, r1
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
}
//---------------------------------------------------------------
static void	vAsciiToInt(char * array)
{
	u8 temp=0,index;
	volatile float ten_power=1;
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	60 e8       	ldi	r22, 0x80	; 128
     612:	7f e3       	ldi	r23, 0x3F	; 63
     614:	67 96       	adiw	r28, 0x17	; 23
     616:	4c af       	std	Y+60, r20	; 0x3c
     618:	5d af       	std	Y+61, r21	; 0x3d
     61a:	6e af       	std	Y+62, r22	; 0x3e
     61c:	7f af       	std	Y+63, r23	; 0x3f
     61e:	67 97       	sbiw	r28, 0x17	; 23
	volatile float accumelator=0;
     620:	63 96       	adiw	r28, 0x13	; 19
     622:	1c ae       	std	Y+60, r1	; 0x3c
     624:	1d ae       	std	Y+61, r1	; 0x3d
     626:	1e ae       	std	Y+62, r1	; 0x3e
     628:	1f ae       	std	Y+63, r1	; 0x3f
     62a:	63 97       	sbiw	r28, 0x13	; 19
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
	{
		temp=array[index];
     62c:	dc 01       	movw	r26, r24
     62e:	1c 91       	ld	r17, X
		if(temp==0)
     630:	11 23       	and	r17, r17
     632:	09 f4       	brne	.+2      	; 0x636 <u8ProcessingCalculate+0x5e>
     634:	11 c1       	rjmp	.+546    	; 0x858 <u8ProcessingCalculate+0x280>
		{
			break;
		}
		else if(temp=='=') //if last char
     636:	1d 33       	cpi	r17, 0x3D	; 61
     638:	09 f0       	breq	.+2      	; 0x63c <u8ProcessingCalculate+0x64>
     63a:	72 c0       	rjmp	.+228    	; 0x720 <u8ProcessingCalculate+0x148>
     63c:	4e c0       	rjmp	.+156    	; 0x6da <u8ProcessingCalculate+0x102>
	u8 temp=0,index;
	volatile float ten_power=1;
	volatile float accumelator=0;
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
	{
		temp=array[index];
     63e:	69 96       	adiw	r28, 0x19	; 25
     640:	ee ad       	ldd	r30, Y+62	; 0x3e
     642:	ff ad       	ldd	r31, Y+63	; 0x3f
     644:	69 97       	sbiw	r28, 0x19	; 25
     646:	11 91       	ld	r17, Z+
     648:	69 96       	adiw	r28, 0x19	; 25
     64a:	ff af       	std	Y+63, r31	; 0x3f
     64c:	ee af       	std	Y+62, r30	; 0x3e
     64e:	69 97       	sbiw	r28, 0x19	; 25
		if(temp==0)
     650:	11 23       	and	r17, r17
     652:	09 f4       	brne	.+2      	; 0x656 <u8ProcessingCalculate+0x7e>
     654:	01 c1       	rjmp	.+514    	; 0x858 <u8ProcessingCalculate+0x280>
		{
			break;
		}
		else if(temp=='=') //if last char
     656:	1d 33       	cpi	r17, 0x3D	; 61
     658:	09 f0       	breq	.+2      	; 0x65c <u8ProcessingCalculate+0x84>
     65a:	75 c0       	rjmp	.+234    	; 0x746 <u8ProcessingCalculate+0x16e>
     65c:	3e c0       	rjmp	.+124    	; 0x6da <u8ProcessingCalculate+0x102>
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
     65e:	86 ea       	ldi	r24, 0xA6	; 166
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     666:	67 96       	adiw	r28, 0x17	; 23
     668:	8c ac       	ldd	r8, Y+60	; 0x3c
     66a:	9d ac       	ldd	r9, Y+61	; 0x3d
     66c:	ae ac       	ldd	r10, Y+62	; 0x3e
     66e:	bf ac       	ldd	r11, Y+63	; 0x3f
     670:	67 97       	sbiw	r28, 0x17	; 23
     672:	63 96       	adiw	r28, 0x13	; 19
     674:	cc ac       	ldd	r12, Y+60	; 0x3c
     676:	dd ac       	ldd	r13, Y+61	; 0x3d
     678:	ee ac       	ldd	r14, Y+62	; 0x3e
     67a:	ff ac       	ldd	r15, Y+63	; 0x3f
     67c:	63 97       	sbiw	r28, 0x13	; 19
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e4       	ldi	r20, 0x40	; 64
     684:	52 e4       	ldi	r21, 0x42	; 66
     686:	0e 94 bb 07 	call	0xf76	; 0xf76 <__subsf3>
     68a:	a5 01       	movw	r20, r10
     68c:	94 01       	movw	r18, r8
     68e:	0e 94 42 09 	call	0x1284	; 0x1284 <__mulsf3>
     692:	a7 01       	movw	r20, r14
     694:	96 01       	movw	r18, r12
     696:	0e 94 bc 07 	call	0xf78	; 0xf78 <__addsf3>
     69a:	46 2f       	mov	r20, r22
     69c:	57 2f       	mov	r21, r23
     69e:	68 2f       	mov	r22, r24
     6a0:	79 2f       	mov	r23, r25
     6a2:	63 96       	adiw	r28, 0x13	; 19
     6a4:	4c af       	std	Y+60, r20	; 0x3c
     6a6:	5d af       	std	Y+61, r21	; 0x3d
     6a8:	6e af       	std	Y+62, r22	; 0x3e
     6aa:	7f af       	std	Y+63, r23	; 0x3f
     6ac:	63 97       	sbiw	r28, 0x13	; 19
				ten_power *=10;
     6ae:	67 96       	adiw	r28, 0x17	; 23
     6b0:	6c ad       	ldd	r22, Y+60	; 0x3c
     6b2:	7d ad       	ldd	r23, Y+61	; 0x3d
     6b4:	8e ad       	ldd	r24, Y+62	; 0x3e
     6b6:	9f ad       	ldd	r25, Y+63	; 0x3f
     6b8:	67 97       	sbiw	r28, 0x17	; 23
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 42 09 	call	0x1284	; 0x1284 <__mulsf3>
     6c6:	46 2f       	mov	r20, r22
     6c8:	57 2f       	mov	r21, r23
     6ca:	68 2f       	mov	r22, r24
     6cc:	79 2f       	mov	r23, r25
     6ce:	67 96       	adiw	r28, 0x17	; 23
     6d0:	4c af       	std	Y+60, r20	; 0x3c
     6d2:	5d af       	std	Y+61, r21	; 0x3d
     6d4:	6e af       	std	Y+62, r22	; 0x3e
     6d6:	7f af       	std	Y+63, r23	; 0x3f
     6d8:	67 97       	sbiw	r28, 0x17	; 23
		{
			break;
		}
		else if(temp=='=') //if last char
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
     6da:	86 ea       	ldi	r24, 0xA6	; 166
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     6e2:	88 23       	and	r24, r24
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <u8ProcessingCalculate+0x110>
     6e6:	bb cf       	rjmp	.-138    	; 0x65e <u8ProcessingCalculate+0x86>
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);//last input
     6e8:	63 96       	adiw	r28, 0x13	; 19
     6ea:	4c ad       	ldd	r20, Y+60	; 0x3c
     6ec:	5d ad       	ldd	r21, Y+61	; 0x3d
     6ee:	6e ad       	ldd	r22, Y+62	; 0x3e
     6f0:	7f ad       	ldd	r23, Y+63	; 0x3f
     6f2:	63 97       	sbiw	r28, 0x13	; 19
     6f4:	80 e6       	ldi	r24, 0x60	; 96
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
     6fc:	61 2f       	mov	r22, r17
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	71 95       	neg	r23
     702:	61 95       	neg	r22
     704:	71 09       	sbc	r23, r1
     706:	88 27       	eor	r24, r24
     708:	77 fd       	sbrc	r23, 7
     70a:	80 95       	com	r24
     70c:	98 2f       	mov	r25, r24
     70e:	0e 94 8e 08 	call	0x111c	; 0x111c <__floatsisf>
     712:	ab 01       	movw	r20, r22
     714:	bc 01       	movw	r22, r24
     716:	80 e6       	ldi	r24, 0x60	; 96
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     71e:	9c c0       	rjmp	.+312    	; 0x858 <u8ProcessingCalculate+0x280>
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     720:	9c 01       	movw	r18, r24
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	3f 4f       	sbci	r19, 0xFF	; 255
     726:	69 96       	adiw	r28, 0x19	; 25
     728:	3f af       	std	Y+63, r19	; 0x3f
     72a:	2e af       	std	Y+62, r18	; 0x3e
     72c:	69 97       	sbiw	r28, 0x19	; 25
     72e:	0f 2e       	mov	r0, r31
     730:	f1 e1       	ldi	r31, 0x11	; 17
     732:	2f 2e       	mov	r2, r31
     734:	f0 2d       	mov	r31, r0
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);   //push sign
			accumelator=0;  //reset acc and ten power
			ten_power=1;
     736:	0f 2e       	mov	r0, r31
     738:	41 2c       	mov	r4, r1
     73a:	51 2c       	mov	r5, r1
     73c:	f0 e8       	ldi	r31, 0x80	; 128
     73e:	6f 2e       	mov	r6, r31
     740:	ff e3       	ldi	r31, 0x3F	; 63
     742:	7f 2e       	mov	r7, r31
     744:	f0 2d       	mov	r31, r0
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);//last input
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
			break;
		}
		else if((temp== '+') || (temp== '-') || (temp== '*') || (temp== '/'))
     746:	1b 32       	cpi	r17, 0x2B	; 43
     748:	09 f4       	brne	.+2      	; 0x74c <u8ProcessingCalculate+0x174>
     74a:	48 c0       	rjmp	.+144    	; 0x7dc <u8ProcessingCalculate+0x204>
     74c:	1d 32       	cpi	r17, 0x2D	; 45
     74e:	09 f4       	brne	.+2      	; 0x752 <u8ProcessingCalculate+0x17a>
     750:	45 c0       	rjmp	.+138    	; 0x7dc <u8ProcessingCalculate+0x204>
     752:	1a 32       	cpi	r17, 0x2A	; 42
     754:	09 f4       	brne	.+2      	; 0x758 <u8ProcessingCalculate+0x180>
     756:	42 c0       	rjmp	.+132    	; 0x7dc <u8ProcessingCalculate+0x204>
     758:	1f 32       	cpi	r17, 0x2F	; 47
     75a:	09 f0       	breq	.+2      	; 0x75e <u8ProcessingCalculate+0x186>
     75c:	6e c0       	rjmp	.+220    	; 0x83a <u8ProcessingCalculate+0x262>
     75e:	3e c0       	rjmp	.+124    	; 0x7dc <u8ProcessingCalculate+0x204>
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
     760:	86 ea       	ldi	r24, 0xA6	; 166
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     768:	67 96       	adiw	r28, 0x17	; 23
     76a:	8c ac       	ldd	r8, Y+60	; 0x3c
     76c:	9d ac       	ldd	r9, Y+61	; 0x3d
     76e:	ae ac       	ldd	r10, Y+62	; 0x3e
     770:	bf ac       	ldd	r11, Y+63	; 0x3f
     772:	67 97       	sbiw	r28, 0x17	; 23
     774:	63 96       	adiw	r28, 0x13	; 19
     776:	cc ac       	ldd	r12, Y+60	; 0x3c
     778:	dd ac       	ldd	r13, Y+61	; 0x3d
     77a:	ee ac       	ldd	r14, Y+62	; 0x3e
     77c:	ff ac       	ldd	r15, Y+63	; 0x3f
     77e:	63 97       	sbiw	r28, 0x13	; 19
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e4       	ldi	r20, 0x40	; 64
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	0e 94 bb 07 	call	0xf76	; 0xf76 <__subsf3>
     78c:	a5 01       	movw	r20, r10
     78e:	94 01       	movw	r18, r8
     790:	0e 94 42 09 	call	0x1284	; 0x1284 <__mulsf3>
     794:	a7 01       	movw	r20, r14
     796:	96 01       	movw	r18, r12
     798:	0e 94 bc 07 	call	0xf78	; 0xf78 <__addsf3>
     79c:	46 2f       	mov	r20, r22
     79e:	57 2f       	mov	r21, r23
     7a0:	68 2f       	mov	r22, r24
     7a2:	79 2f       	mov	r23, r25
     7a4:	63 96       	adiw	r28, 0x13	; 19
     7a6:	4c af       	std	Y+60, r20	; 0x3c
     7a8:	5d af       	std	Y+61, r21	; 0x3d
     7aa:	6e af       	std	Y+62, r22	; 0x3e
     7ac:	7f af       	std	Y+63, r23	; 0x3f
     7ae:	63 97       	sbiw	r28, 0x13	; 19
				ten_power *=10;
     7b0:	67 96       	adiw	r28, 0x17	; 23
     7b2:	6c ad       	ldd	r22, Y+60	; 0x3c
     7b4:	7d ad       	ldd	r23, Y+61	; 0x3d
     7b6:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b8:	9f ad       	ldd	r25, Y+63	; 0x3f
     7ba:	67 97       	sbiw	r28, 0x17	; 23
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e2       	ldi	r20, 0x20	; 32
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	0e 94 42 09 	call	0x1284	; 0x1284 <__mulsf3>
     7c8:	46 2f       	mov	r20, r22
     7ca:	57 2f       	mov	r21, r23
     7cc:	68 2f       	mov	r22, r24
     7ce:	79 2f       	mov	r23, r25
     7d0:	67 96       	adiw	r28, 0x17	; 23
     7d2:	4c af       	std	Y+60, r20	; 0x3c
     7d4:	5d af       	std	Y+61, r21	; 0x3d
     7d6:	6e af       	std	Y+62, r22	; 0x3e
     7d8:	7f af       	std	Y+63, r23	; 0x3f
     7da:	67 97       	sbiw	r28, 0x17	; 23
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
			break;
		}
		else if((temp== '+') || (temp== '-') || (temp== '*') || (temp== '/'))
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
     7dc:	86 ea       	ldi	r24, 0xA6	; 166
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     7e4:	88 23       	and	r24, r24
     7e6:	09 f4       	brne	.+2      	; 0x7ea <u8ProcessingCalculate+0x212>
     7e8:	bb cf       	rjmp	.-138    	; 0x760 <u8ProcessingCalculate+0x188>
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);
     7ea:	63 96       	adiw	r28, 0x13	; 19
     7ec:	4c ad       	ldd	r20, Y+60	; 0x3c
     7ee:	5d ad       	ldd	r21, Y+61	; 0x3d
     7f0:	6e ad       	ldd	r22, Y+62	; 0x3e
     7f2:	7f ad       	ldd	r23, Y+63	; 0x3f
     7f4:	63 97       	sbiw	r28, 0x13	; 19
     7f6:	80 e6       	ldi	r24, 0x60	; 96
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);   //push sign
     7fe:	61 2f       	mov	r22, r17
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	71 95       	neg	r23
     804:	61 95       	neg	r22
     806:	71 09       	sbc	r23, r1
     808:	88 27       	eor	r24, r24
     80a:	77 fd       	sbrc	r23, 7
     80c:	80 95       	com	r24
     80e:	98 2f       	mov	r25, r24
     810:	0e 94 8e 08 	call	0x111c	; 0x111c <__floatsisf>
     814:	ab 01       	movw	r20, r22
     816:	bc 01       	movw	r22, r24
     818:	80 e6       	ldi	r24, 0x60	; 96
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
			accumelator=0;  //reset acc and ten power
     820:	63 96       	adiw	r28, 0x13	; 19
     822:	1c ae       	std	Y+60, r1	; 0x3c
     824:	1d ae       	std	Y+61, r1	; 0x3d
     826:	1e ae       	std	Y+62, r1	; 0x3e
     828:	1f ae       	std	Y+63, r1	; 0x3f
     82a:	63 97       	sbiw	r28, 0x13	; 19
			ten_power=1;
     82c:	67 96       	adiw	r28, 0x17	; 23
     82e:	4c ae       	std	Y+60, r4	; 0x3c
     830:	5d ae       	std	Y+61, r5	; 0x3d
     832:	6e ae       	std	Y+62, r6	; 0x3e
     834:	7f ae       	std	Y+63, r7	; 0x3f
     836:	67 97       	sbiw	r28, 0x17	; 23
     838:	0c c0       	rjmp	.+24     	; 0x852 <u8ProcessingCalculate+0x27a>
		}
		else
		{
			vStackPush(&g_ascii_to_int_temp_stck,temp);
     83a:	61 2f       	mov	r22, r17
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 8c 08 	call	0x1118	; 0x1118 <__floatunsisf>
     846:	ab 01       	movw	r20, r22
     848:	bc 01       	movw	r22, r24
     84a:	86 ea       	ldi	r24, 0xA6	; 166
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     852:	2a 94       	dec	r2
static void	vAsciiToInt(char * array)
{
	u8 temp=0,index;
	volatile float ten_power=1;
	volatile float accumelator=0;
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
     854:	09 f0       	breq	.+2      	; 0x858 <u8ProcessingCalculate+0x280>
     856:	f3 ce       	rjmp	.-538    	; 0x63e <u8ProcessingCalculate+0x66>
	}
}
//---------------------------------------------------------------
static void	vInfixToPostfix(void)
{
	volatile PROCESSING_DATA_TYPE temp,op=0;
     858:	2b 96       	adiw	r28, 0x0b	; 11
     85a:	1c ae       	std	Y+60, r1	; 0x3c
     85c:	1d ae       	std	Y+61, r1	; 0x3d
     85e:	1e ae       	std	Y+62, r1	; 0x3e
     860:	1f ae       	std	Y+63, r1	; 0x3f
     862:	2b 97       	sbiw	r28, 0x0b	; 11
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
     864:	fe 01       	movw	r30, r28
     866:	31 96       	adiw	r30, 0x01	; 1
     868:	86 e4       	ldi	r24, 0x46	; 70
     86a:	df 01       	movw	r26, r30
     86c:	1d 92       	st	X+, r1
     86e:	8a 95       	dec	r24
     870:	e9 f7       	brne	.-6      	; 0x86c <__stack+0xd>
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	89 83       	std	Y+1, r24	; 0x01
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_ascii_to_int_stck.arr[index];
     876:	80 91 62 00 	lds	r24, 0x0062
     87a:	90 91 63 00 	lds	r25, 0x0063
     87e:	a0 91 64 00 	lds	r26, 0x0064
     882:	b0 91 65 00 	lds	r27, 0x0065
     886:	2f 96       	adiw	r28, 0x0f	; 15
     888:	8c af       	std	Y+60, r24	; 0x3c
     88a:	9d af       	std	Y+61, r25	; 0x3d
     88c:	ae af       	std	Y+62, r26	; 0x3e
     88e:	bf af       	std	Y+63, r27	; 0x3f
     890:	2f 97       	sbiw	r28, 0x0f	; 15
		if(temp== EQUEL_OPERATOR)
     892:	2f 96       	adiw	r28, 0x0f	; 15
     894:	6c ad       	ldd	r22, Y+60	; 0x3c
     896:	7d ad       	ldd	r23, Y+61	; 0x3d
     898:	8e ad       	ldd	r24, Y+62	; 0x3e
     89a:	9f ad       	ldd	r25, Y+63	; 0x3f
     89c:	2f 97       	sbiw	r28, 0x0f	; 15
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	44 e7       	ldi	r20, 0x74	; 116
     8a4:	52 ec       	ldi	r21, 0xC2	; 194
     8a6:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     8aa:	81 11       	cpse	r24, r1
     8ac:	4f c0       	rjmp	.+158    	; 0x94c <__stack+0xed>
     8ae:	32 c0       	rjmp	.+100    	; 0x914 <__stack+0xb5>
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_ascii_to_int_stck.arr[index];
     8b0:	f7 01       	movw	r30, r14
     8b2:	81 91       	ld	r24, Z+
     8b4:	91 91       	ld	r25, Z+
     8b6:	a1 91       	ld	r26, Z+
     8b8:	b1 91       	ld	r27, Z+
     8ba:	7f 01       	movw	r14, r30
     8bc:	2f 96       	adiw	r28, 0x0f	; 15
     8be:	8c af       	std	Y+60, r24	; 0x3c
     8c0:	9d af       	std	Y+61, r25	; 0x3d
     8c2:	ae af       	std	Y+62, r26	; 0x3e
     8c4:	bf af       	std	Y+63, r27	; 0x3f
     8c6:	2f 97       	sbiw	r28, 0x0f	; 15
		if(temp== EQUEL_OPERATOR)
     8c8:	2f 96       	adiw	r28, 0x0f	; 15
     8ca:	6c ad       	ldd	r22, Y+60	; 0x3c
     8cc:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ce:	8e ad       	ldd	r24, Y+62	; 0x3e
     8d0:	9f ad       	ldd	r25, Y+63	; 0x3f
     8d2:	2f 97       	sbiw	r28, 0x0f	; 15
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	44 e7       	ldi	r20, 0x74	; 116
     8da:	52 ec       	ldi	r21, 0xC2	; 194
     8dc:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     8e0:	81 11       	cpse	r24, r1
     8e2:	40 c0       	rjmp	.+128    	; 0x964 <__stack+0x105>
     8e4:	17 c0       	rjmp	.+46     	; 0x914 <__stack+0xb5>
		{
			//pop last element
			while(!(u8StackIsEmpty(&operators_stack)))
			{
				g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     8e6:	00 91 97 01 	lds	r16, 0x0197
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     8f4:	f8 01       	movw	r30, r16
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ed 5a       	subi	r30, 0xAD	; 173
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	60 83       	st	Z, r22
     904:	71 83       	std	Z+1, r23	; 0x01
     906:	82 83       	std	Z+2, r24	; 0x02
     908:	93 83       	std	Z+3, r25	; 0x03
				g_post_fix_index++;
     90a:	80 91 97 01 	lds	r24, 0x0197
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	80 93 97 01 	sts	0x0197, r24
	{
		temp=g_ascii_to_int_stck.arr[index];
		if(temp== EQUEL_OPERATOR)
		{
			//pop last element
			while(!(u8StackIsEmpty(&operators_stack)))
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     91c:	88 23       	and	r24, r24
     91e:	19 f3       	breq	.-58     	; 0x8e6 <__stack+0x87>
			{
				g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
				g_post_fix_index++;
			}
			g_post_fix_array[g_post_fix_index]=temp;  //save = it in post fix
     920:	2f 96       	adiw	r28, 0x0f	; 15
     922:	8c ad       	ldd	r24, Y+60	; 0x3c
     924:	9d ad       	ldd	r25, Y+61	; 0x3d
     926:	ae ad       	ldd	r26, Y+62	; 0x3e
     928:	bf ad       	ldd	r27, Y+63	; 0x3f
     92a:	2f 97       	sbiw	r28, 0x0f	; 15
     92c:	e0 91 97 01 	lds	r30, 0x0197
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ed 5a       	subi	r30, 0xAD	; 173
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 83       	st	Z, r24
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	a2 83       	std	Z+2, r26	; 0x02
     944:	b3 83       	std	Z+3, r27	; 0x03
			g_post_fix_index=0; //reset index
     946:	10 92 97 01 	sts	0x0197, r1
     94a:	60 c1       	rjmp	.+704    	; 0xc0c <__stack+0x3ad>
     94c:	0f 2e       	mov	r0, r31
     94e:	f6 e6       	ldi	r31, 0x66	; 102
     950:	ef 2e       	mov	r14, r31
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ff 2e       	mov	r15, r31
     956:	f0 2d       	mov	r31, r0
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     958:	0f 2e       	mov	r0, r31
     95a:	f6 ea       	ldi	r31, 0xA6	; 166
     95c:	cf 2e       	mov	r12, r31
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	df 2e       	mov	r13, r31
     962:	f0 2d       	mov	r31, r0
			g_post_fix_index=0; //reset index
			break;
		}
		//if + - check the top of stack if * / pop them first then add + - to stck
		//else push them to stack
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) )
     964:	2f 96       	adiw	r28, 0x0f	; 15
     966:	6c ad       	ldd	r22, Y+60	; 0x3c
     968:	7d ad       	ldd	r23, Y+61	; 0x3d
     96a:	8e ad       	ldd	r24, Y+62	; 0x3e
     96c:	9f ad       	ldd	r25, Y+63	; 0x3f
     96e:	2f 97       	sbiw	r28, 0x0f	; 15
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	4c e2       	ldi	r20, 0x2C	; 44
     976:	52 ec       	ldi	r21, 0xC2	; 194
     978:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     97c:	88 23       	and	r24, r24
     97e:	71 f0       	breq	.+28     	; 0x99c <__stack+0x13d>
     980:	2f 96       	adiw	r28, 0x0f	; 15
     982:	6c ad       	ldd	r22, Y+60	; 0x3c
     984:	7d ad       	ldd	r23, Y+61	; 0x3d
     986:	8e ad       	ldd	r24, Y+62	; 0x3e
     988:	9f ad       	ldd	r25, Y+63	; 0x3f
     98a:	2f 97       	sbiw	r28, 0x0f	; 15
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	44 e3       	ldi	r20, 0x34	; 52
     992:	52 ec       	ldi	r21, 0xC2	; 194
     994:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     998:	81 11       	cpse	r24, r1
     99a:	88 c0       	rjmp	.+272    	; 0xaac <__stack+0x24d>
		{
			if(!(u8StackIsEmpty(&operators_stack)))
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     9a4:	81 11       	cpse	r24, r1
     9a6:	77 c0       	rjmp	.+238    	; 0xa96 <__stack+0x237>
			{
				op=SDTStackTop(&operators_stack);
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 a7 07 	call	0xf4e	; 0xf4e <SDTStackTop>
     9b0:	2b 96       	adiw	r28, 0x0b	; 11
     9b2:	6c af       	std	Y+60, r22	; 0x3c
     9b4:	7d af       	std	Y+61, r23	; 0x3d
     9b6:	8e af       	std	Y+62, r24	; 0x3e
     9b8:	9f af       	std	Y+63, r25	; 0x3f
     9ba:	2b 97       	sbiw	r28, 0x0b	; 11
				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
     9bc:	2b 96       	adiw	r28, 0x0b	; 11
     9be:	6c ad       	ldd	r22, Y+60	; 0x3c
     9c0:	7d ad       	ldd	r23, Y+61	; 0x3d
     9c2:	8e ad       	ldd	r24, Y+62	; 0x3e
     9c4:	9f ad       	ldd	r25, Y+63	; 0x3f
     9c6:	2b 97       	sbiw	r28, 0x0b	; 11
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	48 e2       	ldi	r20, 0x28	; 40
     9ce:	52 ec       	ldi	r21, 0xC2	; 194
     9d0:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     9d4:	88 23       	and	r24, r24
     9d6:	31 f1       	breq	.+76     	; 0xa24 <__stack+0x1c5>
     9d8:	2b 96       	adiw	r28, 0x0b	; 11
     9da:	6c ad       	ldd	r22, Y+60	; 0x3c
     9dc:	7d ad       	ldd	r23, Y+61	; 0x3d
     9de:	8e ad       	ldd	r24, Y+62	; 0x3e
     9e0:	9f ad       	ldd	r25, Y+63	; 0x3f
     9e2:	2b 97       	sbiw	r28, 0x0b	; 11
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4c e3       	ldi	r20, 0x3C	; 60
     9ea:	52 ec       	ldi	r21, 0xC2	; 194
     9ec:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     9f0:	88 23       	and	r24, r24
     9f2:	c1 f0       	breq	.+48     	; 0xa24 <__stack+0x1c5>
     9f4:	3f c0       	rjmp	.+126    	; 0xa74 <__stack+0x215>
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     9f6:	00 91 97 01 	lds	r16, 0x0197
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     a04:	f8 01       	movw	r30, r16
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ed 5a       	subi	r30, 0xAD	; 173
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	60 83       	st	Z, r22
     a14:	71 83       	std	Z+1, r23	; 0x01
     a16:	82 83       	std	Z+2, r24	; 0x02
     a18:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     a1a:	80 91 97 01 	lds	r24, 0x0197
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	80 93 97 01 	sts	0x0197, r24
			if(!(u8StackIsEmpty(&operators_stack)))
			{
				op=SDTStackTop(&operators_stack);
				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     a2c:	88 23       	and	r24, r24
     a2e:	19 f3       	breq	.-58     	; 0x9f6 <__stack+0x197>
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     a30:	2f 96       	adiw	r28, 0x0f	; 15
     a32:	4c ad       	ldd	r20, Y+60	; 0x3c
     a34:	5d ad       	ldd	r21, Y+61	; 0x3d
     a36:	6e ad       	ldd	r22, Y+62	; 0x3e
     a38:	7f ad       	ldd	r23, Y+63	; 0x3f
     a3a:	2f 97       	sbiw	r28, 0x0f	; 15
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     a44:	df c0       	rjmp	.+446    	; 0xc04 <__stack+0x3a5>
				else
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) == PLUS_OPERATOR) || (SDTStackTop(&operators_stack) ==MINUS_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     a46:	00 91 97 01 	lds	r16, 0x0197
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     a54:	f8 01       	movw	r30, r16
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ed 5a       	subi	r30, 0xAD	; 173
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	60 83       	st	Z, r22
     a64:	71 83       	std	Z+1, r23	; 0x01
     a66:	82 83       	std	Z+2, r24	; 0x02
     a68:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     a6a:	80 91 97 01 	lds	r24, 0x0197
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	80 93 97 01 	sts	0x0197, r24
					}
					vStackPush(&operators_stack,temp);
				}
				else
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     a7c:	88 23       	and	r24, r24
     a7e:	19 f3       	breq	.-58     	; 0xa46 <__stack+0x1e7>
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) == PLUS_OPERATOR) || (SDTStackTop(&operators_stack) ==MINUS_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     a80:	2f 96       	adiw	r28, 0x0f	; 15
     a82:	4c ad       	ldd	r20, Y+60	; 0x3c
     a84:	5d ad       	ldd	r21, Y+61	; 0x3d
     a86:	6e ad       	ldd	r22, Y+62	; 0x3e
     a88:	7f ad       	ldd	r23, Y+63	; 0x3f
     a8a:	2f 97       	sbiw	r28, 0x0f	; 15
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     a94:	b7 c0       	rjmp	.+366    	; 0xc04 <__stack+0x3a5>
				}
			}
			else  //if stack is empty
			{
				vStackPush(&operators_stack,temp);
     a96:	2f 96       	adiw	r28, 0x0f	; 15
     a98:	4c ad       	ldd	r20, Y+60	; 0x3c
     a9a:	5d ad       	ldd	r21, Y+61	; 0x3d
     a9c:	6e ad       	ldd	r22, Y+62	; 0x3e
     a9e:	7f ad       	ldd	r23, Y+63	; 0x3f
     aa0:	2f 97       	sbiw	r28, 0x0f	; 15
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     aaa:	ac c0       	rjmp	.+344    	; 0xc04 <__stack+0x3a5>
			}

		}
		// if * / check top of stack if * / pop them first then add * / to stack
		// else if - + push to stack
		else if((temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
     aac:	2f 96       	adiw	r28, 0x0f	; 15
     aae:	6c ad       	ldd	r22, Y+60	; 0x3c
     ab0:	7d ad       	ldd	r23, Y+61	; 0x3d
     ab2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ab4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ab6:	2f 97       	sbiw	r28, 0x0f	; 15
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	48 e2       	ldi	r20, 0x28	; 40
     abe:	52 ec       	ldi	r21, 0xC2	; 194
     ac0:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     ac4:	88 23       	and	r24, r24
     ac6:	71 f0       	breq	.+28     	; 0xae4 <__stack+0x285>
     ac8:	2f 96       	adiw	r28, 0x0f	; 15
     aca:	6c ad       	ldd	r22, Y+60	; 0x3c
     acc:	7d ad       	ldd	r23, Y+61	; 0x3d
     ace:	8e ad       	ldd	r24, Y+62	; 0x3e
     ad0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ad2:	2f 97       	sbiw	r28, 0x0f	; 15
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	4c e3       	ldi	r20, 0x3C	; 60
     ada:	52 ec       	ldi	r21, 0xC2	; 194
     adc:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     ae0:	81 11       	cpse	r24, r1
     ae2:	79 c0       	rjmp	.+242    	; 0xbd6 <__stack+0x377>
		{
			if(!(u8StackIsEmpty(&operators_stack)))
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     aec:	81 11       	cpse	r24, r1
     aee:	68 c0       	rjmp	.+208    	; 0xbc0 <__stack+0x361>
			{

				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
     af0:	2b 96       	adiw	r28, 0x0b	; 11
     af2:	6c ad       	ldd	r22, Y+60	; 0x3c
     af4:	7d ad       	ldd	r23, Y+61	; 0x3d
     af6:	8e ad       	ldd	r24, Y+62	; 0x3e
     af8:	9f ad       	ldd	r25, Y+63	; 0x3f
     afa:	2b 97       	sbiw	r28, 0x0b	; 11
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	48 e2       	ldi	r20, 0x28	; 40
     b02:	52 ec       	ldi	r21, 0xC2	; 194
     b04:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     b08:	88 23       	and	r24, r24
     b0a:	31 f1       	breq	.+76     	; 0xb58 <__stack+0x2f9>
     b0c:	2b 96       	adiw	r28, 0x0b	; 11
     b0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b10:	7d ad       	ldd	r23, Y+61	; 0x3d
     b12:	8e ad       	ldd	r24, Y+62	; 0x3e
     b14:	9f ad       	ldd	r25, Y+63	; 0x3f
     b16:	2b 97       	sbiw	r28, 0x0b	; 11
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4c e3       	ldi	r20, 0x3C	; 60
     b1e:	52 ec       	ldi	r21, 0xC2	; 194
     b20:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     b24:	88 23       	and	r24, r24
     b26:	c1 f0       	breq	.+48     	; 0xb58 <__stack+0x2f9>
     b28:	40 c0       	rjmp	.+128    	; 0xbaa <__stack+0x34b>
				{
				    //vStackPush(&operators_stack,temp);
					while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
                     //while((!(u8StackIsEmpty(&operators_stack))))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     b2a:	00 91 97 01 	lds	r16, 0x0197
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     b38:	f8 01       	movw	r30, r16
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	ed 5a       	subi	r30, 0xAD	; 173
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	60 83       	st	Z, r22
     b48:	71 83       	std	Z+1, r23	; 0x01
     b4a:	82 83       	std	Z+2, r24	; 0x02
     b4c:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     b4e:	80 91 97 01 	lds	r24, 0x0197
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 97 01 	sts	0x0197, r24
			{

				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
				{
				    //vStackPush(&operators_stack,temp);
					while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <u8StackIsEmpty>
     b60:	81 11       	cpse	r24, r1
     b62:	18 c0       	rjmp	.+48     	; 0xb94 <__stack+0x335>
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 a7 07 	call	0xf4e	; 0xf4e <SDTStackTop>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	48 e2       	ldi	r20, 0x28	; 40
     b72:	52 ec       	ldi	r21, 0xC2	; 194
     b74:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     b78:	88 23       	and	r24, r24
     b7a:	b9 f2       	breq	.-82     	; 0xb2a <__stack+0x2cb>
     b7c:	ce 01       	movw	r24, r28
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	0e 94 a7 07 	call	0xf4e	; 0xf4e <SDTStackTop>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	4c e3       	ldi	r20, 0x3C	; 60
     b8a:	52 ec       	ldi	r21, 0xC2	; 194
     b8c:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     b90:	88 23       	and	r24, r24
     b92:	59 f2       	breq	.-106    	; 0xb2a <__stack+0x2cb>
                     //while((!(u8StackIsEmpty(&operators_stack))))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     b94:	2f 96       	adiw	r28, 0x0f	; 15
     b96:	4c ad       	ldd	r20, Y+60	; 0x3c
     b98:	5d ad       	ldd	r21, Y+61	; 0x3d
     b9a:	6e ad       	ldd	r22, Y+62	; 0x3e
     b9c:	7f ad       	ldd	r23, Y+63	; 0x3f
     b9e:	2f 97       	sbiw	r28, 0x0f	; 15
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     ba8:	2d c0       	rjmp	.+90     	; 0xc04 <__stack+0x3a5>
				}
				else
				{
					vStackPush(&operators_stack,temp);
     baa:	2f 96       	adiw	r28, 0x0f	; 15
     bac:	4c ad       	ldd	r20, Y+60	; 0x3c
     bae:	5d ad       	ldd	r21, Y+61	; 0x3d
     bb0:	6e ad       	ldd	r22, Y+62	; 0x3e
     bb2:	7f ad       	ldd	r23, Y+63	; 0x3f
     bb4:	2f 97       	sbiw	r28, 0x0f	; 15
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     bbe:	22 c0       	rjmp	.+68     	; 0xc04 <__stack+0x3a5>
				}
			}
			//if stack is empty push to stack
			else
			{
				vStackPush(&operators_stack,temp);
     bc0:	2f 96       	adiw	r28, 0x0f	; 15
     bc2:	4c ad       	ldd	r20, Y+60	; 0x3c
     bc4:	5d ad       	ldd	r21, Y+61	; 0x3d
     bc6:	6e ad       	ldd	r22, Y+62	; 0x3e
     bc8:	7f ad       	ldd	r23, Y+63	; 0x3f
     bca:	2f 97       	sbiw	r28, 0x0f	; 15
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     bd4:	17 c0       	rjmp	.+46     	; 0xc04 <__stack+0x3a5>

		}
		//if number save it in array
		else  //if it is an operand
		{
			g_post_fix_array[g_post_fix_index]=temp;  //save it in post fix
     bd6:	20 91 97 01 	lds	r18, 0x0197
     bda:	2f 96       	adiw	r28, 0x0f	; 15
     bdc:	8c ad       	ldd	r24, Y+60	; 0x3c
     bde:	9d ad       	ldd	r25, Y+61	; 0x3d
     be0:	ae ad       	ldd	r26, Y+62	; 0x3e
     be2:	bf ad       	ldd	r27, Y+63	; 0x3f
     be4:	2f 97       	sbiw	r28, 0x0f	; 15
     be6:	e2 2f       	mov	r30, r18
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ed 5a       	subi	r30, 0xAD	; 173
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	80 83       	st	Z, r24
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	a2 83       	std	Z+2, r26	; 0x02
     bfc:	b3 83       	std	Z+3, r27	; 0x03
			g_post_fix_index++;
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	20 93 97 01 	sts	0x0197, r18
{
	volatile PROCESSING_DATA_TYPE temp,op=0;
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
     c04:	ec 14       	cp	r14, r12
     c06:	fd 04       	cpc	r15, r13
     c08:	09 f0       	breq	.+2      	; 0xc0c <__stack+0x3ad>
     c0a:	52 ce       	rjmp	.-860    	; 0x8b0 <__stack+0x51>
	//loop the array if operand push to stack
	//else if operator pop op2 and op1 accumelate
	PROCESSING_DATA_TYPE temp,op1,op2;
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
     c0c:	fe 01       	movw	r30, r28
     c0e:	31 96       	adiw	r30, 0x01	; 1
     c10:	86 e4       	ldi	r24, 0x46	; 70
     c12:	df 01       	movw	r26, r30
     c14:	1d 92       	st	X+, r1
     c16:	8a 95       	dec	r24
     c18:	e9 f7       	brne	.-6      	; 0xc14 <__stack+0x3b5>
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	89 83       	std	Y+1, r24	; 0x01
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_post_fix_array[index];
     c1e:	80 90 53 01 	lds	r8, 0x0153
     c22:	90 90 54 01 	lds	r9, 0x0154
     c26:	a0 90 55 01 	lds	r10, 0x0155
     c2a:	b0 90 56 01 	lds	r11, 0x0156
		//exit condition
		if(temp == EQUEL_OPERATOR)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	44 e7       	ldi	r20, 0x74	; 116
     c34:	52 ec       	ldi	r21, 0xC2	; 194
     c36:	c5 01       	movw	r24, r10
     c38:	b4 01       	movw	r22, r8
     c3a:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     c3e:	88 23       	and	r24, r24
     c40:	09 f4       	brne	.+2      	; 0xc44 <__stack+0x3e5>
     c42:	98 c0       	rjmp	.+304    	; 0xd74 <__stack+0x515>
     c44:	07 e5       	ldi	r16, 0x57	; 87
     c46:	11 e0       	ldi	r17, 0x01	; 1
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     c48:	0f 2e       	mov	r0, r31
     c4a:	f7 e9       	ldi	r31, 0x97	; 151
     c4c:	ef 2e       	mov	r14, r31
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	ff 2e       	mov	r15, r31
     c52:	f0 2d       	mov	r31, r0
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <__stack+0x419>
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_post_fix_array[index];
     c56:	f8 01       	movw	r30, r16
     c58:	81 90       	ld	r8, Z+
     c5a:	91 90       	ld	r9, Z+
     c5c:	a1 90       	ld	r10, Z+
     c5e:	b1 90       	ld	r11, Z+
     c60:	8f 01       	movw	r16, r30
		//exit condition
		if(temp == EQUEL_OPERATOR)
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	44 e7       	ldi	r20, 0x74	; 116
     c68:	52 ec       	ldi	r21, 0xC2	; 194
     c6a:	c5 01       	movw	r24, r10
     c6c:	b4 01       	movw	r22, r8
     c6e:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <__stack+0x419>
     c76:	7e c0       	rjmp	.+252    	; 0xd74 <__stack+0x515>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4c e2       	ldi	r20, 0x2C	; 44
     c7e:	52 ec       	ldi	r21, 0xC2	; 194
     c80:	c5 01       	movw	r24, r10
     c82:	b4 01       	movw	r22, r8
     c84:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     c88:	88 23       	and	r24, r24
     c8a:	09 f4       	brne	.+2      	; 0xc8e <__stack+0x42f>
     c8c:	62 c0       	rjmp	.+196    	; 0xd52 <__stack+0x4f3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	44 e3       	ldi	r20, 0x34	; 52
     c94:	52 ec       	ldi	r21, 0xC2	; 194
     c96:	c5 01       	movw	r24, r10
     c98:	b4 01       	movw	r22, r8
     c9a:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	49 f1       	breq	.+82     	; 0xcf4 <__stack+0x495>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	48 e2       	ldi	r20, 0x28	; 40
     ca8:	52 ec       	ldi	r21, 0xC2	; 194
     caa:	c5 01       	movw	r24, r10
     cac:	b4 01       	movw	r22, r8
     cae:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	71 f1       	breq	.+92     	; 0xd12 <__stack+0x4b3>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4c e3       	ldi	r20, 0x3C	; 60
     cbc:	52 ec       	ldi	r21, 0xC2	; 194
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	a9 f1       	breq	.+106    	; 0xd34 <__stack+0x4d5>
     cca:	09 c0       	rjmp	.+18     	; 0xcde <__stack+0x47f>
		{
			op2=SDTStackPop(&operand_stack);
			op1=SDTStackPop(&operand_stack);
			accumelator= PDTOperation(op1,op2,temp);
			vStackPush(&operand_stack,accumelator);//push it to stack
     ccc:	46 2f       	mov	r20, r22
     cce:	57 2f       	mov	r21, r23
     cd0:	68 2f       	mov	r22, r24
     cd2:	79 2f       	mov	r23, r25
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <__stack+0x48b>
		}
		else
		{
			vStackPush(&operand_stack,temp);
     cde:	b5 01       	movw	r22, r10
     ce0:	a4 01       	movw	r20, r8
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 63 07 	call	0xec6	; 0xec6 <vStackPush>
	//else if operator pop op2 and op1 accumelate
	PROCESSING_DATA_TYPE temp,op1,op2;
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
	for(index=0;index<MAX_INPUT_CHAR;index++)
     cea:	0e 15       	cp	r16, r14
     cec:	1f 05       	cpc	r17, r15
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__stack+0x493>
     cf0:	b2 cf       	rjmp	.-156    	; 0xc56 <__stack+0x3f7>
     cf2:	40 c0       	rjmp	.+128    	; 0xd74 <__stack+0x515>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     cfc:	4b 01       	movw	r8, r22
     cfe:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
PROCESSING_DATA_TYPE PDTOperation(PROCESSING_DATA_TYPE op1,PROCESSING_DATA_TYPE op2,PROCESSING_DATA_TYPE temp)
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
     d08:	a5 01       	movw	r20, r10
     d0a:	94 01       	movw	r18, r8
     d0c:	0e 94 bb 07 	call	0xf76	; 0xf76 <__subsf3>
     d10:	dd cf       	rjmp	.-70     	; 0xccc <__stack+0x46d>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     d1a:	4b 01       	movw	r8, r22
     d1c:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
		case MULTIPLY_OPERATOR :return op1 * op2 ;
     d2a:	c5 01       	movw	r24, r10
     d2c:	b4 01       	movw	r22, r8
     d2e:	0e 94 42 09 	call	0x1284	; 0x1284 <__mulsf3>
     d32:	cc cf       	rjmp	.-104    	; 0xccc <__stack+0x46d>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     d3c:	4b 01       	movw	r8, r22
     d3e:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
		case MULTIPLY_OPERATOR :return op1 * op2 ;
		case DIVISOIN_OPERATOR :return op1 / op2 ;
     d48:	a5 01       	movw	r20, r10
     d4a:	94 01       	movw	r18, r8
     d4c:	0e 94 24 08 	call	0x1048	; 0x1048 <__divsf3>
     d50:	bd cf       	rjmp	.-134    	; 0xccc <__stack+0x46d>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     d52:	ce 01       	movw	r24, r28
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 7c 07 	call	0xef8	; 0xef8 <SDTStackPop>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
//----------------------------------------------------------------
PROCESSING_DATA_TYPE PDTOperation(PROCESSING_DATA_TYPE op1,PROCESSING_DATA_TYPE op2,PROCESSING_DATA_TYPE temp)
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
     d6a:	c5 01       	movw	r24, r10
     d6c:	b4 01       	movw	r22, r8
     d6e:	0e 94 bc 07 	call	0xf78	; 0xf78 <__addsf3>
     d72:	ac cf       	rjmp	.-168    	; 0xccc <__stack+0x46d>
		else
		{
			vStackPush(&operand_stack,temp);
		}
	}
	return SDTStackTop(&operand_stack);
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 a7 07 	call	0xf4e	; 0xf4e <SDTStackTop>
	//ascii char to int
	vAsciiToInt(dump_array);
	//infix to postfix
	vInfixToPostfix();  //error change operators to well defined data
	//evaluate postfix
	final_answer=PDTEvaluatePostfix();
     d7c:	60 93 4f 01 	sts	0x014F, r22
     d80:	70 93 50 01 	sts	0x0150, r23
     d84:	80 93 51 01 	sts	0x0151, r24
     d88:	90 93 52 01 	sts	0x0152, r25
	return 0; //no error
	//set output or error
}
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	c8 5a       	subi	r28, 0xA8	; 168
     d90:	df 4f       	sbci	r29, 0xFF	; 255
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	2f 90       	pop	r2
     dbe:	08 95       	ret

00000dc0 <u8ProcessingFloatToString>:
	}
	return 0;
}
//---------------------------------------------------------------
u8 u8ProcessingFloatToString(char * dump_array,u8 result_format)
{
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	ec 01       	movw	r28, r24
	//float to string
	//check format to make configuration state
	//if float format exceed change to E format 
	if(result_format==RESULT_FLOAT_FORMAT)
     dd2:	61 11       	cpse	r22, r1
     dd4:	2c c0       	rjmp	.+88     	; 0xe2e <u8ProcessingFloatToString+0x6e>
	{
		if(final_answer > MAX_FLOAT_FORMAT || final_answer < (MAX_FLOAT_FORMAT*(-1)) )
     dd6:	c0 90 4f 01 	lds	r12, 0x014F
     dda:	d0 90 50 01 	lds	r13, 0x0150
     dde:	e0 90 51 01 	lds	r14, 0x0151
     de2:	f0 90 52 01 	lds	r15, 0x0152
     de6:	20 e8       	ldi	r18, 0x80	; 128
     de8:	36 e9       	ldi	r19, 0x96	; 150
     dea:	48 e1       	ldi	r20, 0x18	; 24
     dec:	5b e4       	ldi	r21, 0x4B	; 75
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 3e 09 	call	0x127c	; 0x127c <__gesf2>
     df6:	18 16       	cp	r1, r24
     df8:	54 f0       	brlt	.+20     	; 0xe0e <u8ProcessingFloatToString+0x4e>
     dfa:	20 e8       	ldi	r18, 0x80	; 128
     dfc:	36 e9       	ldi	r19, 0x96	; 150
     dfe:	48 e1       	ldi	r20, 0x18	; 24
     e00:	5b ec       	ldi	r21, 0xCB	; 203
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	0e 94 20 08 	call	0x1040	; 0x1040 <__cmpsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	44 f4       	brge	.+16     	; 0xe1e <u8ProcessingFloatToString+0x5e>
		{
			//convert flaot to string with E notation
			dtostre(final_answer,dump_array,5,DTOSTR_ALWAYS_SIGN | DTOSTR_UPPERCASE);
     e0e:	05 e0       	ldi	r16, 0x05	; 5
     e10:	25 e0       	ldi	r18, 0x05	; 5
     e12:	ae 01       	movw	r20, r28
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	0e 94 a5 09 	call	0x134a	; 0x134a <dtostre>
     e1c:	28 c0       	rjmp	.+80     	; 0xe6e <u8ProcessingFloatToString+0xae>
			*/
		}
		else
		{
			//convert flaot to string
			dtostrf((double)final_answer,1,3,dump_array);
     e1e:	8e 01       	movw	r16, r28
     e20:	23 e0       	ldi	r18, 0x03	; 3
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	c7 01       	movw	r24, r14
     e26:	b6 01       	movw	r22, r12
     e28:	0e 94 21 0a 	call	0x1442	; 0x1442 <dtostrf>
     e2c:	20 c0       	rjmp	.+64     	; 0xe6e <u8ProcessingFloatToString+0xae>
		}
			
	}
	else if(result_format==RESULT_E_FORMAT)
     e2e:	61 30       	cpi	r22, 0x01	; 1
     e30:	f1 f4       	brne	.+60     	; 0xe6e <u8ProcessingFloatToString+0xae>
	{
		//convert flaot to string with E notation
		dtostre(final_answer,dump_array,5,DTOSTR_ALWAYS_SIGN | DTOSTR_UPPERCASE);
     e32:	60 91 4f 01 	lds	r22, 0x014F
     e36:	70 91 50 01 	lds	r23, 0x0150
     e3a:	80 91 51 01 	lds	r24, 0x0151
     e3e:	90 91 52 01 	lds	r25, 0x0152
     e42:	05 e0       	ldi	r16, 0x05	; 5
     e44:	25 e0       	ldi	r18, 0x05	; 5
     e46:	ae 01       	movw	r20, r28
     e48:	0e 94 a5 09 	call	0x134a	; 0x134a <dtostre>
     e4c:	10 c0       	rjmp	.+32     	; 0xe6e <u8ProcessingFloatToString+0xae>
{
	//clean up all global variables 
	u8 index;
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		g_ascii_to_int_temp_stck.arr[index]=0;
     e4e:	11 92       	st	Z+, r1
     e50:	11 92       	st	Z+, r1
     e52:	11 92       	st	Z+, r1
     e54:	11 92       	st	Z+, r1
		g_ascii_to_int_stck.arr[index]=0;
     e56:	19 92       	st	Y+, r1
     e58:	19 92       	st	Y+, r1
     e5a:	19 92       	st	Y+, r1
     e5c:	19 92       	st	Y+, r1
		g_post_fix_array[index]=0;
     e5e:	1d 92       	st	X+, r1
     e60:	1d 92       	st	X+, r1
     e62:	1d 92       	st	X+, r1
     e64:	1d 92       	st	X+, r1
//--------------------------------------------------------------------
void vclean_up(void)
{
	//clean up all global variables 
	u8 index;
	for(index=0;index<MAX_INPUT_CHAR;index++)
     e66:	e8 17       	cp	r30, r24
     e68:	f9 07       	cpc	r31, r25
     e6a:	89 f7       	brne	.-30     	; 0xe4e <u8ProcessingFloatToString+0x8e>
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <u8ProcessingFloatToString+0xc0>
     e6e:	e8 ea       	ldi	r30, 0xA8	; 168
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	c2 e6       	ldi	r28, 0x62	; 98
     e74:	d0 e0       	ldi	r29, 0x00	; 0
     e76:	a3 e5       	ldi	r26, 0x53	; 83
     e78:	b1 e0       	ldi	r27, 0x01	; 1
		default:break;
	}
	return 0;
}
//---------------------------------------------------------------
u8 u8ProcessingFloatToString(char * dump_array,u8 result_format)
     e7a:	8c ee       	ldi	r24, 0xEC	; 236
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	e7 cf       	rjmp	.-50     	; 0xe4e <u8ProcessingFloatToString+0x8e>
	{
		g_ascii_to_int_temp_stck.arr[index]=0;
		g_ascii_to_int_stck.arr[index]=0;
		g_post_fix_array[index]=0;
	}	
	g_ascii_to_int_temp_stck.items=0;
     e80:	10 92 a7 00 	sts	0x00A7, r1
	g_ascii_to_int_stck.items=0;
     e84:	10 92 61 00 	sts	0x0061, r1
	g_ascii_to_int_temp_stck.top=0;
     e88:	10 92 a6 00 	sts	0x00A6, r1
	g_ascii_to_int_stck.top=0;
     e8c:	10 92 60 00 	sts	0x0060, r1
	g_post_fix_index=0;
     e90:	10 92 97 01 	sts	0x0197, r1
	final_answer=0;
     e94:	10 92 4f 01 	sts	0x014F, r1
     e98:	10 92 50 01 	sts	0x0150, r1
     e9c:	10 92 51 01 	sts	0x0151, r1
     ea0:	10 92 52 01 	sts	0x0152, r1
	}
	
	vclean_up();
	return NO_PROCESSING_ERROR;

}
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret

00000eb8 <u8StackIsEmpty>:
//----------------------------------------------------------
#include "stack.h"
//---------------------------------------------------------
u8 u8StackIsEmpty(ARR_STACK* stk)
{
    if(stk->items==0)
     eb8:	21 e0       	ldi	r18, 0x01	; 1
     eba:	fc 01       	movw	r30, r24
     ebc:	81 81       	ldd	r24, Z+1	; 0x01
     ebe:	81 11       	cpse	r24, r1
     ec0:	20 e0       	ldi	r18, 0x00	; 0
        return 1;
    else
        return 0;
}
     ec2:	82 2f       	mov	r24, r18
     ec4:	08 95       	ret

00000ec6 <vStackPush>:
	else
	return 0;
}
//--------------------------------------------------------
void vStackPush(ARR_STACK* stk,STACK_DATA_TYPE data)
{
     ec6:	fc 01       	movw	r30, r24
    stk->top +=1;
     ec8:	90 81       	ld	r25, Z
     eca:	89 2f       	mov	r24, r25
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 83       	st	Z, r24
    if(stk->top==STACK_SIZE)
     ed0:	81 31       	cpi	r24, 0x11	; 17
     ed2:	11 f4       	brne	.+4      	; 0xed8 <vStackPush+0x12>
    {
        stk->top -=1;
     ed4:	90 83       	st	Z, r25
        return;
     ed6:	08 95       	ret
    }
    stk->arr[stk->top]=data;
     ed8:	df 01       	movw	r26, r30
     eda:	94 e0       	ldi	r25, 0x04	; 4
     edc:	89 9f       	mul	r24, r25
     ede:	a0 0d       	add	r26, r0
     ee0:	b1 1d       	adc	r27, r1
     ee2:	11 24       	eor	r1, r1
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	4d 93       	st	X+, r20
     ee8:	5d 93       	st	X+, r21
     eea:	6d 93       	st	X+, r22
     eec:	7c 93       	st	X, r23
     eee:	15 97       	sbiw	r26, 0x05	; 5
    stk->items +=1;
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	81 83       	std	Z+1, r24	; 0x01
     ef6:	08 95       	ret

00000ef8 <SDTStackPop>:
}
//------------------------------------------------------------
STACK_DATA_TYPE SDTStackPop(ARR_STACK* stk)
{
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	fc 01       	movw	r30, r24
    if(stk->items)
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	88 23       	and	r24, r24
     f02:	d9 f0       	breq	.+54     	; 0xf3a <SDTStackPop+0x42>
    {
            STACK_DATA_TYPE temp=stk->arr[stk->top];
     f04:	20 81       	ld	r18, Z
     f06:	ef 01       	movw	r28, r30
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	29 9f       	mul	r18, r25
     f0c:	c0 0d       	add	r28, r0
     f0e:	d1 1d       	adc	r29, r1
     f10:	11 24       	eor	r1, r1
     f12:	de 01       	movw	r26, r28
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	ca 81       	ldd	r28, Y+2	; 0x02
     f18:	11 96       	adiw	r26, 0x01	; 1
     f1a:	7c 91       	ld	r23, X
     f1c:	11 97       	sbiw	r26, 0x01	; 1
     f1e:	12 96       	adiw	r26, 0x02	; 2
     f20:	6c 91       	ld	r22, X
     f22:	12 97       	sbiw	r26, 0x02	; 2
     f24:	13 96       	adiw	r26, 0x03	; 3
     f26:	9c 91       	ld	r25, X
            stk->top -=1;
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	20 83       	st	Z, r18
            stk->items -=1;
              if(stk->top==255)
     f2c:	2f 3f       	cpi	r18, 0xFF	; 255
     f2e:	19 f0       	breq	.+6      	; 0xf36 <SDTStackPop+0x3e>
{
    if(stk->items)
    {
            STACK_DATA_TYPE temp=stk->arr[stk->top];
            stk->top -=1;
            stk->items -=1;
     f30:	81 50       	subi	r24, 0x01	; 1
     f32:	81 83       	std	Z+1, r24	; 0x01
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <SDTStackPop+0x4a>
              if(stk->top==255)
            {
                stk->items=0;
     f36:	11 82       	std	Z+1, r1	; 0x01
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <SDTStackPop+0x4a>
            }
            return temp;
    }
    else
    {
        return 0;   /*garbage value*/
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
    }

}
     f42:	36 2f       	mov	r19, r22
     f44:	6c 2f       	mov	r22, r28
     f46:	83 2f       	mov	r24, r19
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <SDTStackTop>:
//--------------------------------------------------------------------
STACK_DATA_TYPE SDTStackTop(ARR_STACK* stk)
{
    return stk->arr[stk->top];
     f4e:	fc 01       	movw	r30, r24
     f50:	20 81       	ld	r18, Z
     f52:	dc 01       	movw	r26, r24
     f54:	f4 e0       	ldi	r31, 0x04	; 4
     f56:	2f 9f       	mul	r18, r31
     f58:	a0 0d       	add	r26, r0
     f5a:	b1 1d       	adc	r27, r1
     f5c:	11 24       	eor	r1, r1
     f5e:	fd 01       	movw	r30, r26
     f60:	32 96       	adiw	r30, 0x02	; 2
}
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	5c 91       	ld	r21, X
     f66:	41 81       	ldd	r20, Z+1	; 0x01
     f68:	32 81       	ldd	r19, Z+2	; 0x02
     f6a:	23 81       	ldd	r18, Z+3	; 0x03
     f6c:	65 2f       	mov	r22, r21
     f6e:	74 2f       	mov	r23, r20
     f70:	83 2f       	mov	r24, r19
     f72:	92 2f       	mov	r25, r18
     f74:	08 95       	ret

00000f76 <__subsf3>:
     f76:	50 58       	subi	r21, 0x80	; 128

00000f78 <__addsf3>:
     f78:	bb 27       	eor	r27, r27
     f7a:	aa 27       	eor	r26, r26
     f7c:	0e d0       	rcall	.+28     	; 0xf9a <__addsf3x>
     f7e:	44 c1       	rjmp	.+648    	; 0x1208 <__fp_round>
     f80:	35 d1       	rcall	.+618    	; 0x11ec <__fp_pscA>
     f82:	30 f0       	brcs	.+12     	; 0xf90 <__addsf3+0x18>
     f84:	3a d1       	rcall	.+628    	; 0x11fa <__fp_pscB>
     f86:	20 f0       	brcs	.+8      	; 0xf90 <__addsf3+0x18>
     f88:	31 f4       	brne	.+12     	; 0xf96 <__addsf3+0x1e>
     f8a:	9f 3f       	cpi	r25, 0xFF	; 255
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__addsf3+0x1a>
     f8e:	1e f4       	brtc	.+6      	; 0xf96 <__addsf3+0x1e>
     f90:	2a c1       	rjmp	.+596    	; 0x11e6 <__fp_nan>
     f92:	0e f4       	brtc	.+2      	; 0xf96 <__addsf3+0x1e>
     f94:	e0 95       	com	r30
     f96:	e7 fb       	bst	r30, 7
     f98:	20 c1       	rjmp	.+576    	; 0x11da <__fp_inf>

00000f9a <__addsf3x>:
     f9a:	e9 2f       	mov	r30, r25
     f9c:	46 d1       	rcall	.+652    	; 0x122a <__fp_split3>
     f9e:	80 f3       	brcs	.-32     	; 0xf80 <__addsf3+0x8>
     fa0:	ba 17       	cp	r27, r26
     fa2:	62 07       	cpc	r22, r18
     fa4:	73 07       	cpc	r23, r19
     fa6:	84 07       	cpc	r24, r20
     fa8:	95 07       	cpc	r25, r21
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__addsf3x+0x18>
     fac:	71 f4       	brne	.+28     	; 0xfca <__addsf3x+0x30>
     fae:	9e f5       	brtc	.+102    	; 0x1016 <__addsf3x+0x7c>
     fb0:	5e c1       	rjmp	.+700    	; 0x126e <__fp_zero>
     fb2:	0e f4       	brtc	.+2      	; 0xfb6 <__addsf3x+0x1c>
     fb4:	e0 95       	com	r30
     fb6:	0b 2e       	mov	r0, r27
     fb8:	ba 2f       	mov	r27, r26
     fba:	a0 2d       	mov	r26, r0
     fbc:	0b 01       	movw	r0, r22
     fbe:	b9 01       	movw	r22, r18
     fc0:	90 01       	movw	r18, r0
     fc2:	0c 01       	movw	r0, r24
     fc4:	ca 01       	movw	r24, r20
     fc6:	a0 01       	movw	r20, r0
     fc8:	11 24       	eor	r1, r1
     fca:	ff 27       	eor	r31, r31
     fcc:	59 1b       	sub	r21, r25
     fce:	99 f0       	breq	.+38     	; 0xff6 <__addsf3x+0x5c>
     fd0:	59 3f       	cpi	r21, 0xF9	; 249
     fd2:	50 f4       	brcc	.+20     	; 0xfe8 <__addsf3x+0x4e>
     fd4:	50 3e       	cpi	r21, 0xE0	; 224
     fd6:	68 f1       	brcs	.+90     	; 0x1032 <__addsf3x+0x98>
     fd8:	1a 16       	cp	r1, r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	a2 2f       	mov	r26, r18
     fde:	23 2f       	mov	r18, r19
     fe0:	34 2f       	mov	r19, r20
     fe2:	44 27       	eor	r20, r20
     fe4:	58 5f       	subi	r21, 0xF8	; 248
     fe6:	f3 cf       	rjmp	.-26     	; 0xfce <__addsf3x+0x34>
     fe8:	46 95       	lsr	r20
     fea:	37 95       	ror	r19
     fec:	27 95       	ror	r18
     fee:	a7 95       	ror	r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	53 95       	inc	r21
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__addsf3x+0x4e>
     ff6:	7e f4       	brtc	.+30     	; 0x1016 <__addsf3x+0x7c>
     ff8:	1f 16       	cp	r1, r31
     ffa:	ba 0b       	sbc	r27, r26
     ffc:	62 0b       	sbc	r22, r18
     ffe:	73 0b       	sbc	r23, r19
    1000:	84 0b       	sbc	r24, r20
    1002:	ba f0       	brmi	.+46     	; 0x1032 <__addsf3x+0x98>
    1004:	91 50       	subi	r25, 0x01	; 1
    1006:	a1 f0       	breq	.+40     	; 0x1030 <__addsf3x+0x96>
    1008:	ff 0f       	add	r31, r31
    100a:	bb 1f       	adc	r27, r27
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	c2 f7       	brpl	.-16     	; 0x1004 <__addsf3x+0x6a>
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <__addsf3x+0x98>
    1016:	ba 0f       	add	r27, r26
    1018:	62 1f       	adc	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	84 1f       	adc	r24, r20
    101e:	48 f4       	brcc	.+18     	; 0x1032 <__addsf3x+0x98>
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f7 95       	ror	r31
    102a:	9e 3f       	cpi	r25, 0xFE	; 254
    102c:	08 f0       	brcs	.+2      	; 0x1030 <__addsf3x+0x96>
    102e:	b3 cf       	rjmp	.-154    	; 0xf96 <__addsf3+0x1e>
    1030:	93 95       	inc	r25
    1032:	88 0f       	add	r24, r24
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__addsf3x+0x9e>
    1036:	99 27       	eor	r25, r25
    1038:	ee 0f       	add	r30, r30
    103a:	97 95       	ror	r25
    103c:	87 95       	ror	r24
    103e:	08 95       	ret

00001040 <__cmpsf2>:
    1040:	a8 d0       	rcall	.+336    	; 0x1192 <__fp_cmp>
    1042:	08 f4       	brcc	.+2      	; 0x1046 <__cmpsf2+0x6>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 95       	ret

00001048 <__divsf3>:
    1048:	0c d0       	rcall	.+24     	; 0x1062 <__divsf3x>
    104a:	de c0       	rjmp	.+444    	; 0x1208 <__fp_round>
    104c:	d6 d0       	rcall	.+428    	; 0x11fa <__fp_pscB>
    104e:	40 f0       	brcs	.+16     	; 0x1060 <__divsf3+0x18>
    1050:	cd d0       	rcall	.+410    	; 0x11ec <__fp_pscA>
    1052:	30 f0       	brcs	.+12     	; 0x1060 <__divsf3+0x18>
    1054:	21 f4       	brne	.+8      	; 0x105e <__divsf3+0x16>
    1056:	5f 3f       	cpi	r21, 0xFF	; 255
    1058:	19 f0       	breq	.+6      	; 0x1060 <__divsf3+0x18>
    105a:	bf c0       	rjmp	.+382    	; 0x11da <__fp_inf>
    105c:	51 11       	cpse	r21, r1
    105e:	08 c1       	rjmp	.+528    	; 0x1270 <__fp_szero>
    1060:	c2 c0       	rjmp	.+388    	; 0x11e6 <__fp_nan>

00001062 <__divsf3x>:
    1062:	e3 d0       	rcall	.+454    	; 0x122a <__fp_split3>
    1064:	98 f3       	brcs	.-26     	; 0x104c <__divsf3+0x4>

00001066 <__divsf3_pse>:
    1066:	99 23       	and	r25, r25
    1068:	c9 f3       	breq	.-14     	; 0x105c <__divsf3+0x14>
    106a:	55 23       	and	r21, r21
    106c:	b1 f3       	breq	.-20     	; 0x105a <__divsf3+0x12>
    106e:	95 1b       	sub	r25, r21
    1070:	55 0b       	sbc	r21, r21
    1072:	bb 27       	eor	r27, r27
    1074:	aa 27       	eor	r26, r26
    1076:	62 17       	cp	r22, r18
    1078:	73 07       	cpc	r23, r19
    107a:	84 07       	cpc	r24, r20
    107c:	38 f0       	brcs	.+14     	; 0x108c <__divsf3_pse+0x26>
    107e:	9f 5f       	subi	r25, 0xFF	; 255
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	22 0f       	add	r18, r18
    1084:	33 1f       	adc	r19, r19
    1086:	44 1f       	adc	r20, r20
    1088:	aa 1f       	adc	r26, r26
    108a:	a9 f3       	breq	.-22     	; 0x1076 <__divsf3_pse+0x10>
    108c:	33 d0       	rcall	.+102    	; 0x10f4 <__divsf3_pse+0x8e>
    108e:	0e 2e       	mov	r0, r30
    1090:	3a f0       	brmi	.+14     	; 0x10a0 <__divsf3_pse+0x3a>
    1092:	e0 e8       	ldi	r30, 0x80	; 128
    1094:	30 d0       	rcall	.+96     	; 0x10f6 <__divsf3_pse+0x90>
    1096:	91 50       	subi	r25, 0x01	; 1
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	e6 95       	lsr	r30
    109c:	00 1c       	adc	r0, r0
    109e:	ca f7       	brpl	.-14     	; 0x1092 <__divsf3_pse+0x2c>
    10a0:	29 d0       	rcall	.+82     	; 0x10f4 <__divsf3_pse+0x8e>
    10a2:	fe 2f       	mov	r31, r30
    10a4:	27 d0       	rcall	.+78     	; 0x10f4 <__divsf3_pse+0x8e>
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	bb 1f       	adc	r27, r27
    10ae:	26 17       	cp	r18, r22
    10b0:	37 07       	cpc	r19, r23
    10b2:	48 07       	cpc	r20, r24
    10b4:	ab 07       	cpc	r26, r27
    10b6:	b0 e8       	ldi	r27, 0x80	; 128
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__divsf3_pse+0x56>
    10ba:	bb 0b       	sbc	r27, r27
    10bc:	80 2d       	mov	r24, r0
    10be:	bf 01       	movw	r22, r30
    10c0:	ff 27       	eor	r31, r31
    10c2:	93 58       	subi	r25, 0x83	; 131
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	2a f0       	brmi	.+10     	; 0x10d2 <__divsf3_pse+0x6c>
    10c8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ca:	51 05       	cpc	r21, r1
    10cc:	68 f0       	brcs	.+26     	; 0x10e8 <__divsf3_pse+0x82>
    10ce:	85 c0       	rjmp	.+266    	; 0x11da <__fp_inf>
    10d0:	cf c0       	rjmp	.+414    	; 0x1270 <__fp_szero>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	ec f3       	brlt	.-6      	; 0x10d0 <__divsf3_pse+0x6a>
    10d6:	98 3e       	cpi	r25, 0xE8	; 232
    10d8:	dc f3       	brlt	.-10     	; 0x10d0 <__divsf3_pse+0x6a>
    10da:	86 95       	lsr	r24
    10dc:	77 95       	ror	r23
    10de:	67 95       	ror	r22
    10e0:	b7 95       	ror	r27
    10e2:	f7 95       	ror	r31
    10e4:	9f 5f       	subi	r25, 0xFF	; 255
    10e6:	c9 f7       	brne	.-14     	; 0x10da <__divsf3_pse+0x74>
    10e8:	88 0f       	add	r24, r24
    10ea:	91 1d       	adc	r25, r1
    10ec:	96 95       	lsr	r25
    10ee:	87 95       	ror	r24
    10f0:	97 f9       	bld	r25, 7
    10f2:	08 95       	ret
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	bb 1f       	adc	r27, r27
    10fe:	62 17       	cp	r22, r18
    1100:	73 07       	cpc	r23, r19
    1102:	84 07       	cpc	r24, r20
    1104:	ba 07       	cpc	r27, r26
    1106:	20 f0       	brcs	.+8      	; 0x1110 <__divsf3_pse+0xaa>
    1108:	62 1b       	sub	r22, r18
    110a:	73 0b       	sbc	r23, r19
    110c:	84 0b       	sbc	r24, r20
    110e:	ba 0b       	sbc	r27, r26
    1110:	ee 1f       	adc	r30, r30
    1112:	88 f7       	brcc	.-30     	; 0x10f6 <__divsf3_pse+0x90>
    1114:	e0 95       	com	r30
    1116:	08 95       	ret

00001118 <__floatunsisf>:
    1118:	e8 94       	clt
    111a:	09 c0       	rjmp	.+18     	; 0x112e <__floatsisf+0x12>

0000111c <__floatsisf>:
    111c:	97 fb       	bst	r25, 7
    111e:	3e f4       	brtc	.+14     	; 0x112e <__floatsisf+0x12>
    1120:	90 95       	com	r25
    1122:	80 95       	com	r24
    1124:	70 95       	com	r23
    1126:	61 95       	neg	r22
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	99 23       	and	r25, r25
    1130:	a9 f0       	breq	.+42     	; 0x115c <__floatsisf+0x40>
    1132:	f9 2f       	mov	r31, r25
    1134:	96 e9       	ldi	r25, 0x96	; 150
    1136:	bb 27       	eor	r27, r27
    1138:	93 95       	inc	r25
    113a:	f6 95       	lsr	r31
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f1 11       	cpse	r31, r1
    1146:	f8 cf       	rjmp	.-16     	; 0x1138 <__floatsisf+0x1c>
    1148:	fa f4       	brpl	.+62     	; 0x1188 <__floatsisf+0x6c>
    114a:	bb 0f       	add	r27, r27
    114c:	11 f4       	brne	.+4      	; 0x1152 <__floatsisf+0x36>
    114e:	60 ff       	sbrs	r22, 0
    1150:	1b c0       	rjmp	.+54     	; 0x1188 <__floatsisf+0x6c>
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	16 c0       	rjmp	.+44     	; 0x1188 <__floatsisf+0x6c>
    115c:	88 23       	and	r24, r24
    115e:	11 f0       	breq	.+4      	; 0x1164 <__floatsisf+0x48>
    1160:	96 e9       	ldi	r25, 0x96	; 150
    1162:	11 c0       	rjmp	.+34     	; 0x1186 <__floatsisf+0x6a>
    1164:	77 23       	and	r23, r23
    1166:	21 f0       	breq	.+8      	; 0x1170 <__floatsisf+0x54>
    1168:	9e e8       	ldi	r25, 0x8E	; 142
    116a:	87 2f       	mov	r24, r23
    116c:	76 2f       	mov	r23, r22
    116e:	05 c0       	rjmp	.+10     	; 0x117a <__floatsisf+0x5e>
    1170:	66 23       	and	r22, r22
    1172:	71 f0       	breq	.+28     	; 0x1190 <__floatsisf+0x74>
    1174:	96 e8       	ldi	r25, 0x86	; 134
    1176:	86 2f       	mov	r24, r22
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	2a f0       	brmi	.+10     	; 0x1188 <__floatsisf+0x6c>
    117e:	9a 95       	dec	r25
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	da f7       	brpl	.-10     	; 0x117e <__floatsisf+0x62>
    1188:	88 0f       	add	r24, r24
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <__fp_cmp>:
    1192:	99 0f       	add	r25, r25
    1194:	00 08       	sbc	r0, r0
    1196:	55 0f       	add	r21, r21
    1198:	aa 0b       	sbc	r26, r26
    119a:	e0 e8       	ldi	r30, 0x80	; 128
    119c:	fe ef       	ldi	r31, 0xFE	; 254
    119e:	16 16       	cp	r1, r22
    11a0:	17 06       	cpc	r1, r23
    11a2:	e8 07       	cpc	r30, r24
    11a4:	f9 07       	cpc	r31, r25
    11a6:	c0 f0       	brcs	.+48     	; 0x11d8 <__fp_cmp+0x46>
    11a8:	12 16       	cp	r1, r18
    11aa:	13 06       	cpc	r1, r19
    11ac:	e4 07       	cpc	r30, r20
    11ae:	f5 07       	cpc	r31, r21
    11b0:	98 f0       	brcs	.+38     	; 0x11d8 <__fp_cmp+0x46>
    11b2:	62 1b       	sub	r22, r18
    11b4:	73 0b       	sbc	r23, r19
    11b6:	84 0b       	sbc	r24, r20
    11b8:	95 0b       	sbc	r25, r21
    11ba:	39 f4       	brne	.+14     	; 0x11ca <__fp_cmp+0x38>
    11bc:	0a 26       	eor	r0, r26
    11be:	61 f0       	breq	.+24     	; 0x11d8 <__fp_cmp+0x46>
    11c0:	23 2b       	or	r18, r19
    11c2:	24 2b       	or	r18, r20
    11c4:	25 2b       	or	r18, r21
    11c6:	21 f4       	brne	.+8      	; 0x11d0 <__fp_cmp+0x3e>
    11c8:	08 95       	ret
    11ca:	0a 26       	eor	r0, r26
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <__fp_cmp+0x3e>
    11ce:	a1 40       	sbci	r26, 0x01	; 1
    11d0:	a6 95       	lsr	r26
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	81 1d       	adc	r24, r1
    11d6:	81 1d       	adc	r24, r1
    11d8:	08 95       	ret

000011da <__fp_inf>:
    11da:	97 f9       	bld	r25, 7
    11dc:	9f 67       	ori	r25, 0x7F	; 127
    11de:	80 e8       	ldi	r24, 0x80	; 128
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	08 95       	ret

000011e6 <__fp_nan>:
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	80 ec       	ldi	r24, 0xC0	; 192
    11ea:	08 95       	ret

000011ec <__fp_pscA>:
    11ec:	00 24       	eor	r0, r0
    11ee:	0a 94       	dec	r0
    11f0:	16 16       	cp	r1, r22
    11f2:	17 06       	cpc	r1, r23
    11f4:	18 06       	cpc	r1, r24
    11f6:	09 06       	cpc	r0, r25
    11f8:	08 95       	ret

000011fa <__fp_pscB>:
    11fa:	00 24       	eor	r0, r0
    11fc:	0a 94       	dec	r0
    11fe:	12 16       	cp	r1, r18
    1200:	13 06       	cpc	r1, r19
    1202:	14 06       	cpc	r1, r20
    1204:	05 06       	cpc	r0, r21
    1206:	08 95       	ret

00001208 <__fp_round>:
    1208:	09 2e       	mov	r0, r25
    120a:	03 94       	inc	r0
    120c:	00 0c       	add	r0, r0
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0xc>
    1210:	88 23       	and	r24, r24
    1212:	52 f0       	brmi	.+20     	; 0x1228 <__fp_round+0x20>
    1214:	bb 0f       	add	r27, r27
    1216:	40 f4       	brcc	.+16     	; 0x1228 <__fp_round+0x20>
    1218:	bf 2b       	or	r27, r31
    121a:	11 f4       	brne	.+4      	; 0x1220 <__fp_round+0x18>
    121c:	60 ff       	sbrs	r22, 0
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <__fp_round+0x20>
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__fp_split3>:
    122a:	57 fd       	sbrc	r21, 7
    122c:	90 58       	subi	r25, 0x80	; 128
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	59 f0       	breq	.+22     	; 0x124a <__fp_splitA+0x10>
    1234:	5f 3f       	cpi	r21, 0xFF	; 255
    1236:	71 f0       	breq	.+28     	; 0x1254 <__fp_splitA+0x1a>
    1238:	47 95       	ror	r20

0000123a <__fp_splitA>:
    123a:	88 0f       	add	r24, r24
    123c:	97 fb       	bst	r25, 7
    123e:	99 1f       	adc	r25, r25
    1240:	61 f0       	breq	.+24     	; 0x125a <__fp_splitA+0x20>
    1242:	9f 3f       	cpi	r25, 0xFF	; 255
    1244:	79 f0       	breq	.+30     	; 0x1264 <__fp_splitA+0x2a>
    1246:	87 95       	ror	r24
    1248:	08 95       	ret
    124a:	12 16       	cp	r1, r18
    124c:	13 06       	cpc	r1, r19
    124e:	14 06       	cpc	r1, r20
    1250:	55 1f       	adc	r21, r21
    1252:	f2 cf       	rjmp	.-28     	; 0x1238 <__fp_split3+0xe>
    1254:	46 95       	lsr	r20
    1256:	f1 df       	rcall	.-30     	; 0x123a <__fp_splitA>
    1258:	08 c0       	rjmp	.+16     	; 0x126a <__fp_splitA+0x30>
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	18 06       	cpc	r1, r24
    1260:	99 1f       	adc	r25, r25
    1262:	f1 cf       	rjmp	.-30     	; 0x1246 <__fp_splitA+0xc>
    1264:	86 95       	lsr	r24
    1266:	71 05       	cpc	r23, r1
    1268:	61 05       	cpc	r22, r1
    126a:	08 94       	sec
    126c:	08 95       	ret

0000126e <__fp_zero>:
    126e:	e8 94       	clt

00001270 <__fp_szero>:
    1270:	bb 27       	eor	r27, r27
    1272:	66 27       	eor	r22, r22
    1274:	77 27       	eor	r23, r23
    1276:	cb 01       	movw	r24, r22
    1278:	97 f9       	bld	r25, 7
    127a:	08 95       	ret

0000127c <__gesf2>:
    127c:	8a df       	rcall	.-236    	; 0x1192 <__fp_cmp>
    127e:	08 f4       	brcc	.+2      	; 0x1282 <__gesf2+0x6>
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	08 95       	ret

00001284 <__mulsf3>:
    1284:	0b d0       	rcall	.+22     	; 0x129c <__mulsf3x>
    1286:	c0 cf       	rjmp	.-128    	; 0x1208 <__fp_round>
    1288:	b1 df       	rcall	.-158    	; 0x11ec <__fp_pscA>
    128a:	28 f0       	brcs	.+10     	; 0x1296 <__mulsf3+0x12>
    128c:	b6 df       	rcall	.-148    	; 0x11fa <__fp_pscB>
    128e:	18 f0       	brcs	.+6      	; 0x1296 <__mulsf3+0x12>
    1290:	95 23       	and	r25, r21
    1292:	09 f0       	breq	.+2      	; 0x1296 <__mulsf3+0x12>
    1294:	a2 cf       	rjmp	.-188    	; 0x11da <__fp_inf>
    1296:	a7 cf       	rjmp	.-178    	; 0x11e6 <__fp_nan>
    1298:	11 24       	eor	r1, r1
    129a:	ea cf       	rjmp	.-44     	; 0x1270 <__fp_szero>

0000129c <__mulsf3x>:
    129c:	c6 df       	rcall	.-116    	; 0x122a <__fp_split3>
    129e:	a0 f3       	brcs	.-24     	; 0x1288 <__mulsf3+0x4>

000012a0 <__mulsf3_pse>:
    12a0:	95 9f       	mul	r25, r21
    12a2:	d1 f3       	breq	.-12     	; 0x1298 <__mulsf3+0x14>
    12a4:	95 0f       	add	r25, r21
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	55 1f       	adc	r21, r21
    12aa:	62 9f       	mul	r22, r18
    12ac:	f0 01       	movw	r30, r0
    12ae:	72 9f       	mul	r23, r18
    12b0:	bb 27       	eor	r27, r27
    12b2:	f0 0d       	add	r31, r0
    12b4:	b1 1d       	adc	r27, r1
    12b6:	63 9f       	mul	r22, r19
    12b8:	aa 27       	eor	r26, r26
    12ba:	f0 0d       	add	r31, r0
    12bc:	b1 1d       	adc	r27, r1
    12be:	aa 1f       	adc	r26, r26
    12c0:	64 9f       	mul	r22, r20
    12c2:	66 27       	eor	r22, r22
    12c4:	b0 0d       	add	r27, r0
    12c6:	a1 1d       	adc	r26, r1
    12c8:	66 1f       	adc	r22, r22
    12ca:	82 9f       	mul	r24, r18
    12cc:	22 27       	eor	r18, r18
    12ce:	b0 0d       	add	r27, r0
    12d0:	a1 1d       	adc	r26, r1
    12d2:	62 1f       	adc	r22, r18
    12d4:	73 9f       	mul	r23, r19
    12d6:	b0 0d       	add	r27, r0
    12d8:	a1 1d       	adc	r26, r1
    12da:	62 1f       	adc	r22, r18
    12dc:	83 9f       	mul	r24, r19
    12de:	a0 0d       	add	r26, r0
    12e0:	61 1d       	adc	r22, r1
    12e2:	22 1f       	adc	r18, r18
    12e4:	74 9f       	mul	r23, r20
    12e6:	33 27       	eor	r19, r19
    12e8:	a0 0d       	add	r26, r0
    12ea:	61 1d       	adc	r22, r1
    12ec:	23 1f       	adc	r18, r19
    12ee:	84 9f       	mul	r24, r20
    12f0:	60 0d       	add	r22, r0
    12f2:	21 1d       	adc	r18, r1
    12f4:	82 2f       	mov	r24, r18
    12f6:	76 2f       	mov	r23, r22
    12f8:	6a 2f       	mov	r22, r26
    12fa:	11 24       	eor	r1, r1
    12fc:	9f 57       	subi	r25, 0x7F	; 127
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	8a f0       	brmi	.+34     	; 0x1324 <__mulsf3_pse+0x84>
    1302:	e1 f0       	breq	.+56     	; 0x133c <__mulsf3_pse+0x9c>
    1304:	88 23       	and	r24, r24
    1306:	4a f0       	brmi	.+18     	; 0x131a <__mulsf3_pse+0x7a>
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	bb 1f       	adc	r27, r27
    130e:	66 1f       	adc	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	91 50       	subi	r25, 0x01	; 1
    1316:	50 40       	sbci	r21, 0x00	; 0
    1318:	a9 f7       	brne	.-22     	; 0x1304 <__mulsf3_pse+0x64>
    131a:	9e 3f       	cpi	r25, 0xFE	; 254
    131c:	51 05       	cpc	r21, r1
    131e:	70 f0       	brcs	.+28     	; 0x133c <__mulsf3_pse+0x9c>
    1320:	5c cf       	rjmp	.-328    	; 0x11da <__fp_inf>
    1322:	a6 cf       	rjmp	.-180    	; 0x1270 <__fp_szero>
    1324:	5f 3f       	cpi	r21, 0xFF	; 255
    1326:	ec f3       	brlt	.-6      	; 0x1322 <__mulsf3_pse+0x82>
    1328:	98 3e       	cpi	r25, 0xE8	; 232
    132a:	dc f3       	brlt	.-10     	; 0x1322 <__mulsf3_pse+0x82>
    132c:	86 95       	lsr	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	b7 95       	ror	r27
    1334:	f7 95       	ror	r31
    1336:	e7 95       	ror	r30
    1338:	9f 5f       	subi	r25, 0xFF	; 255
    133a:	c1 f7       	brne	.-16     	; 0x132c <__mulsf3_pse+0x8c>
    133c:	fe 2b       	or	r31, r30
    133e:	88 0f       	add	r24, r24
    1340:	91 1d       	adc	r25, r1
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <dtostre>:
    134a:	a1 e0       	ldi	r26, 0x01	; 1
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb ea       	ldi	r30, 0xAB	; 171
    1350:	f9 e0       	ldi	r31, 0x09	; 9
    1352:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__prologue_saves__+0x14>
    1356:	7a 01       	movw	r14, r20
    1358:	10 2f       	mov	r17, r16
    135a:	32 2f       	mov	r19, r18
    135c:	28 30       	cpi	r18, 0x08	; 8
    135e:	08 f0       	brcs	.+2      	; 0x1362 <dtostre+0x18>
    1360:	37 e0       	ldi	r19, 0x07	; 7
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	23 2f       	mov	r18, r19
    1366:	a7 01       	movw	r20, r14
    1368:	39 83       	std	Y+1, r19	; 0x01
    136a:	0e 94 42 0a 	call	0x1484	; 0x1484 <__ftoa_engine>
    136e:	d7 01       	movw	r26, r14
    1370:	9c 91       	ld	r25, X
    1372:	39 81       	ldd	r19, Y+1	; 0x01
    1374:	f7 01       	movw	r30, r14
    1376:	90 ff       	sbrs	r25, 0
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <dtostre+0x38>
    137a:	93 fd       	sbrc	r25, 3
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <dtostre+0x38>
    137e:	2d e2       	ldi	r18, 0x2D	; 45
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <dtostre+0x46>
    1382:	11 ff       	sbrs	r17, 1
    1384:	02 c0       	rjmp	.+4      	; 0x138a <dtostre+0x40>
    1386:	2b e2       	ldi	r18, 0x2B	; 43
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <dtostre+0x46>
    138a:	10 ff       	sbrs	r17, 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <dtostre+0x48>
    138e:	20 e2       	ldi	r18, 0x20	; 32
    1390:	21 93       	st	Z+, r18
    1392:	93 fd       	sbrc	r25, 3
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <dtostre+0x56>
    1396:	92 ff       	sbrs	r25, 2
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <dtostre+0x6a>
    139a:	6c e5       	ldi	r22, 0x5C	; 92
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <dtostre+0x5a>
    13a0:	64 e5       	ldi	r22, 0x54	; 84
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	12 ff       	sbrs	r17, 2
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <dtostre+0x62>
    13a8:	6c 5f       	subi	r22, 0xFC	; 252
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	cf 01       	movw	r24, r30
    13ae:	0e 94 1a 0b 	call	0x1634	; 0x1634 <strcpy_P>
    13b2:	42 c0       	rjmp	.+132    	; 0x1438 <dtostre+0xee>
    13b4:	d7 01       	movw	r26, r14
    13b6:	11 96       	adiw	r26, 0x01	; 1
    13b8:	2c 91       	ld	r18, X
    13ba:	21 93       	st	Z+, r18
    13bc:	21 33       	cpi	r18, 0x31	; 49
    13be:	09 f0       	breq	.+2      	; 0x13c2 <dtostre+0x78>
    13c0:	9f 7e       	andi	r25, 0xEF	; 239
    13c2:	33 23       	and	r19, r19
    13c4:	c9 f0       	breq	.+50     	; 0x13f8 <dtostre+0xae>
    13c6:	67 01       	movw	r12, r14
    13c8:	b2 e0       	ldi	r27, 0x02	; 2
    13ca:	cb 0e       	add	r12, r27
    13cc:	d1 1c       	adc	r13, r1
    13ce:	af 01       	movw	r20, r30
    13d0:	6e e2       	ldi	r22, 0x2E	; 46
    13d2:	23 2f       	mov	r18, r19
    13d4:	2c 0d       	add	r18, r12
    13d6:	d6 01       	movw	r26, r12
    13d8:	7d 91       	ld	r23, X+
    13da:	6d 01       	movw	r12, r26
    13dc:	da 01       	movw	r26, r20
    13de:	6d 93       	st	X+, r22
    13e0:	ad 01       	movw	r20, r26
    13e2:	67 2f       	mov	r22, r23
    13e4:	2c 11       	cpse	r18, r12
    13e6:	f7 cf       	rjmp	.-18     	; 0x13d6 <dtostre+0x8c>
    13e8:	31 50       	subi	r19, 0x01	; 1
    13ea:	23 2f       	mov	r18, r19
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	2f 5f       	subi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	e2 0f       	add	r30, r18
    13f4:	f3 1f       	adc	r31, r19
    13f6:	71 93       	st	Z+, r23
    13f8:	12 ff       	sbrs	r17, 2
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <dtostre+0xb6>
    13fc:	25 e4       	ldi	r18, 0x45	; 69
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <dtostre+0xb8>
    1400:	25 e6       	ldi	r18, 0x65	; 101
    1402:	20 83       	st	Z, r18
    1404:	87 ff       	sbrs	r24, 7
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <dtostre+0xc8>
    1408:	9d e2       	ldi	r25, 0x2D	; 45
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	32 96       	adiw	r30, 0x02	; 2
    140e:	81 95       	neg	r24
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <dtostre+0xda>
    1412:	81 11       	cpse	r24, r1
    1414:	04 c0       	rjmp	.+8      	; 0x141e <dtostre+0xd4>
    1416:	94 ff       	sbrs	r25, 4
    1418:	02 c0       	rjmp	.+4      	; 0x141e <dtostre+0xd4>
    141a:	9d e2       	ldi	r25, 0x2D	; 45
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <dtostre+0xd6>
    141e:	9b e2       	ldi	r25, 0x2B	; 43
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	32 96       	adiw	r30, 0x02	; 2
    1424:	90 e3       	ldi	r25, 0x30	; 48
    1426:	02 c0       	rjmp	.+4      	; 0x142c <dtostre+0xe2>
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	8a 50       	subi	r24, 0x0A	; 10
    142c:	8a 30       	cpi	r24, 0x0A	; 10
    142e:	e4 f7       	brge	.-8      	; 0x1428 <dtostre+0xde>
    1430:	90 83       	st	Z, r25
    1432:	80 5d       	subi	r24, 0xD0	; 208
    1434:	81 83       	std	Z+1, r24	; 0x01
    1436:	12 82       	std	Z+2, r1	; 0x02
    1438:	c7 01       	movw	r24, r14
    143a:	21 96       	adiw	r28, 0x01	; 1
    143c:	e8 e0       	ldi	r30, 0x08	; 8
    143e:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__epilogue_restores__+0x14>

00001442 <dtostrf>:
    1442:	ef 92       	push	r14
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	c0 2f       	mov	r28, r16
    144c:	47 ff       	sbrs	r20, 7
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <dtostrf+0x12>
    1450:	34 e1       	ldi	r19, 0x14	; 20
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <dtostrf+0x14>
    1454:	34 e0       	ldi	r19, 0x04	; 4
    1456:	e4 2f       	mov	r30, r20
    1458:	ff 27       	eor	r31, r31
    145a:	e7 fd       	sbrc	r30, 7
    145c:	f0 95       	com	r31
    145e:	f7 ff       	sbrs	r31, 7
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <dtostrf+0x26>
    1462:	f1 95       	neg	r31
    1464:	e1 95       	neg	r30
    1466:	f1 09       	sbc	r31, r1
    1468:	e3 2e       	mov	r14, r19
    146a:	02 2f       	mov	r16, r18
    146c:	2e 2f       	mov	r18, r30
    146e:	4c 2f       	mov	r20, r28
    1470:	51 2f       	mov	r21, r17
    1472:	0e 94 21 0b 	call	0x1642	; 0x1642 <dtoa_prf>
    1476:	8c 2f       	mov	r24, r28
    1478:	91 2f       	mov	r25, r17
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <__ftoa_engine>:
    1484:	28 30       	cpi	r18, 0x08	; 8
    1486:	08 f0       	brcs	.+2      	; 0x148a <__ftoa_engine+0x6>
    1488:	27 e0       	ldi	r18, 0x07	; 7
    148a:	33 27       	eor	r19, r19
    148c:	da 01       	movw	r26, r20
    148e:	99 0f       	add	r25, r25
    1490:	31 1d       	adc	r19, r1
    1492:	87 fd       	sbrc	r24, 7
    1494:	91 60       	ori	r25, 0x01	; 1
    1496:	00 96       	adiw	r24, 0x00	; 0
    1498:	61 05       	cpc	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	39 f4       	brne	.+14     	; 0x14ac <__ftoa_engine+0x28>
    149e:	32 60       	ori	r19, 0x02	; 2
    14a0:	2e 5f       	subi	r18, 0xFE	; 254
    14a2:	3d 93       	st	X+, r19
    14a4:	30 e3       	ldi	r19, 0x30	; 48
    14a6:	2a 95       	dec	r18
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <__ftoa_engine+0x1e>
    14aa:	08 95       	ret
    14ac:	9f 3f       	cpi	r25, 0xFF	; 255
    14ae:	30 f0       	brcs	.+12     	; 0x14bc <__ftoa_engine+0x38>
    14b0:	80 38       	cpi	r24, 0x80	; 128
    14b2:	71 05       	cpc	r23, r1
    14b4:	61 05       	cpc	r22, r1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <__ftoa_engine+0x36>
    14b8:	3c 5f       	subi	r19, 0xFC	; 252
    14ba:	3c 5f       	subi	r19, 0xFC	; 252
    14bc:	3d 93       	st	X+, r19
    14be:	91 30       	cpi	r25, 0x01	; 1
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <__ftoa_engine+0x40>
    14c2:	80 68       	ori	r24, 0x80	; 128
    14c4:	91 1d       	adc	r25, r1
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	1f 93       	push	r17
    14cc:	0f 93       	push	r16
    14ce:	ff 92       	push	r15
    14d0:	ef 92       	push	r14
    14d2:	19 2f       	mov	r17, r25
    14d4:	98 7f       	andi	r25, 0xF8	; 248
    14d6:	96 95       	lsr	r25
    14d8:	e9 2f       	mov	r30, r25
    14da:	96 95       	lsr	r25
    14dc:	96 95       	lsr	r25
    14de:	e9 0f       	add	r30, r25
    14e0:	ff 27       	eor	r31, r31
    14e2:	e2 54       	subi	r30, 0x42	; 66
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	99 27       	eor	r25, r25
    14e8:	33 27       	eor	r19, r19
    14ea:	ee 24       	eor	r14, r14
    14ec:	ff 24       	eor	r15, r15
    14ee:	a7 01       	movw	r20, r14
    14f0:	e7 01       	movw	r28, r14
    14f2:	05 90       	lpm	r0, Z+
    14f4:	08 94       	sec
    14f6:	07 94       	ror	r0
    14f8:	28 f4       	brcc	.+10     	; 0x1504 <__ftoa_engine+0x80>
    14fa:	36 0f       	add	r19, r22
    14fc:	e7 1e       	adc	r14, r23
    14fe:	f8 1e       	adc	r15, r24
    1500:	49 1f       	adc	r20, r25
    1502:	51 1d       	adc	r21, r1
    1504:	66 0f       	add	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	06 94       	lsr	r0
    150e:	a1 f7       	brne	.-24     	; 0x14f8 <__ftoa_engine+0x74>
    1510:	05 90       	lpm	r0, Z+
    1512:	07 94       	ror	r0
    1514:	28 f4       	brcc	.+10     	; 0x1520 <__ftoa_engine+0x9c>
    1516:	e7 0e       	add	r14, r23
    1518:	f8 1e       	adc	r15, r24
    151a:	49 1f       	adc	r20, r25
    151c:	56 1f       	adc	r21, r22
    151e:	c1 1d       	adc	r28, r1
    1520:	77 0f       	add	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	66 1f       	adc	r22, r22
    1528:	06 94       	lsr	r0
    152a:	a1 f7       	brne	.-24     	; 0x1514 <__ftoa_engine+0x90>
    152c:	05 90       	lpm	r0, Z+
    152e:	07 94       	ror	r0
    1530:	28 f4       	brcc	.+10     	; 0x153c <__ftoa_engine+0xb8>
    1532:	f8 0e       	add	r15, r24
    1534:	49 1f       	adc	r20, r25
    1536:	56 1f       	adc	r21, r22
    1538:	c7 1f       	adc	r28, r23
    153a:	d1 1d       	adc	r29, r1
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	06 94       	lsr	r0
    1546:	a1 f7       	brne	.-24     	; 0x1530 <__ftoa_engine+0xac>
    1548:	05 90       	lpm	r0, Z+
    154a:	07 94       	ror	r0
    154c:	20 f4       	brcc	.+8      	; 0x1556 <__ftoa_engine+0xd2>
    154e:	49 0f       	add	r20, r25
    1550:	56 1f       	adc	r21, r22
    1552:	c7 1f       	adc	r28, r23
    1554:	d8 1f       	adc	r29, r24
    1556:	99 0f       	add	r25, r25
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	06 94       	lsr	r0
    1560:	a9 f7       	brne	.-22     	; 0x154c <__ftoa_engine+0xc8>
    1562:	84 91       	lpm	r24, Z
    1564:	10 95       	com	r17
    1566:	17 70       	andi	r17, 0x07	; 7
    1568:	41 f0       	breq	.+16     	; 0x157a <__ftoa_engine+0xf6>
    156a:	d6 95       	lsr	r29
    156c:	c7 95       	ror	r28
    156e:	57 95       	ror	r21
    1570:	47 95       	ror	r20
    1572:	f7 94       	ror	r15
    1574:	e7 94       	ror	r14
    1576:	1a 95       	dec	r17
    1578:	c1 f7       	brne	.-16     	; 0x156a <__ftoa_engine+0xe6>
    157a:	e4 e6       	ldi	r30, 0x64	; 100
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	68 94       	set
    1580:	15 90       	lpm	r1, Z+
    1582:	15 91       	lpm	r17, Z+
    1584:	35 91       	lpm	r19, Z+
    1586:	65 91       	lpm	r22, Z+
    1588:	95 91       	lpm	r25, Z+
    158a:	05 90       	lpm	r0, Z+
    158c:	7f e2       	ldi	r23, 0x2F	; 47
    158e:	73 95       	inc	r23
    1590:	e1 18       	sub	r14, r1
    1592:	f1 0a       	sbc	r15, r17
    1594:	43 0b       	sbc	r20, r19
    1596:	56 0b       	sbc	r21, r22
    1598:	c9 0b       	sbc	r28, r25
    159a:	d0 09       	sbc	r29, r0
    159c:	c0 f7       	brcc	.-16     	; 0x158e <__ftoa_engine+0x10a>
    159e:	e1 0c       	add	r14, r1
    15a0:	f1 1e       	adc	r15, r17
    15a2:	43 1f       	adc	r20, r19
    15a4:	56 1f       	adc	r21, r22
    15a6:	c9 1f       	adc	r28, r25
    15a8:	d0 1d       	adc	r29, r0
    15aa:	7e f4       	brtc	.+30     	; 0x15ca <__ftoa_engine+0x146>
    15ac:	70 33       	cpi	r23, 0x30	; 48
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <__ftoa_engine+0x130>
    15b0:	8a 95       	dec	r24
    15b2:	e6 cf       	rjmp	.-52     	; 0x1580 <__ftoa_engine+0xfc>
    15b4:	e8 94       	clt
    15b6:	01 50       	subi	r16, 0x01	; 1
    15b8:	30 f0       	brcs	.+12     	; 0x15c6 <__ftoa_engine+0x142>
    15ba:	08 0f       	add	r16, r24
    15bc:	0a f4       	brpl	.+2      	; 0x15c0 <__ftoa_engine+0x13c>
    15be:	00 27       	eor	r16, r16
    15c0:	02 17       	cp	r16, r18
    15c2:	08 f4       	brcc	.+2      	; 0x15c6 <__ftoa_engine+0x142>
    15c4:	20 2f       	mov	r18, r16
    15c6:	23 95       	inc	r18
    15c8:	02 2f       	mov	r16, r18
    15ca:	7a 33       	cpi	r23, 0x3A	; 58
    15cc:	28 f0       	brcs	.+10     	; 0x15d8 <__ftoa_engine+0x154>
    15ce:	79 e3       	ldi	r23, 0x39	; 57
    15d0:	7d 93       	st	X+, r23
    15d2:	2a 95       	dec	r18
    15d4:	e9 f7       	brne	.-6      	; 0x15d0 <__ftoa_engine+0x14c>
    15d6:	10 c0       	rjmp	.+32     	; 0x15f8 <__ftoa_engine+0x174>
    15d8:	7d 93       	st	X+, r23
    15da:	2a 95       	dec	r18
    15dc:	89 f6       	brne	.-94     	; 0x1580 <__ftoa_engine+0xfc>
    15de:	06 94       	lsr	r0
    15e0:	97 95       	ror	r25
    15e2:	67 95       	ror	r22
    15e4:	37 95       	ror	r19
    15e6:	17 95       	ror	r17
    15e8:	17 94       	ror	r1
    15ea:	e1 18       	sub	r14, r1
    15ec:	f1 0a       	sbc	r15, r17
    15ee:	43 0b       	sbc	r20, r19
    15f0:	56 0b       	sbc	r21, r22
    15f2:	c9 0b       	sbc	r28, r25
    15f4:	d0 09       	sbc	r29, r0
    15f6:	98 f0       	brcs	.+38     	; 0x161e <__ftoa_engine+0x19a>
    15f8:	23 95       	inc	r18
    15fa:	7e 91       	ld	r23, -X
    15fc:	73 95       	inc	r23
    15fe:	7a 33       	cpi	r23, 0x3A	; 58
    1600:	08 f0       	brcs	.+2      	; 0x1604 <__ftoa_engine+0x180>
    1602:	70 e3       	ldi	r23, 0x30	; 48
    1604:	7c 93       	st	X, r23
    1606:	20 13       	cpse	r18, r16
    1608:	b8 f7       	brcc	.-18     	; 0x15f8 <__ftoa_engine+0x174>
    160a:	7e 91       	ld	r23, -X
    160c:	70 61       	ori	r23, 0x10	; 16
    160e:	7d 93       	st	X+, r23
    1610:	30 f0       	brcs	.+12     	; 0x161e <__ftoa_engine+0x19a>
    1612:	83 95       	inc	r24
    1614:	71 e3       	ldi	r23, 0x31	; 49
    1616:	7d 93       	st	X+, r23
    1618:	70 e3       	ldi	r23, 0x30	; 48
    161a:	2a 95       	dec	r18
    161c:	e1 f7       	brne	.-8      	; 0x1616 <__ftoa_engine+0x192>
    161e:	11 24       	eor	r1, r1
    1620:	ef 90       	pop	r14
    1622:	ff 90       	pop	r15
    1624:	0f 91       	pop	r16
    1626:	1f 91       	pop	r17
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	99 27       	eor	r25, r25
    162e:	87 fd       	sbrc	r24, 7
    1630:	90 95       	com	r25
    1632:	08 95       	ret

00001634 <strcpy_P>:
    1634:	fb 01       	movw	r30, r22
    1636:	dc 01       	movw	r26, r24
    1638:	05 90       	lpm	r0, Z+
    163a:	0d 92       	st	X+, r0
    163c:	00 20       	and	r0, r0
    163e:	e1 f7       	brne	.-8      	; 0x1638 <strcpy_P+0x4>
    1640:	08 95       	ret

00001642 <dtoa_prf>:
    1642:	6f 92       	push	r6
    1644:	7f 92       	push	r7
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	29 97       	sbiw	r28, 0x09	; 9
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	6a 01       	movw	r12, r20
    166e:	b2 2e       	mov	r11, r18
    1670:	10 2f       	mov	r17, r16
    1672:	0c 33       	cpi	r16, 0x3C	; 60
    1674:	18 f4       	brcc	.+6      	; 0x167c <dtoa_prf+0x3a>
    1676:	f0 2e       	mov	r15, r16
    1678:	f3 94       	inc	r15
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <dtoa_prf+0x3e>
    167c:	5c e3       	ldi	r21, 0x3C	; 60
    167e:	f5 2e       	mov	r15, r21
    1680:	0f 2d       	mov	r16, r15
    1682:	27 e0       	ldi	r18, 0x07	; 7
    1684:	ae 01       	movw	r20, r28
    1686:	4f 5f       	subi	r20, 0xFF	; 255
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	0e 94 42 0a 	call	0x1484	; 0x1484 <__ftoa_engine>
    168e:	79 81       	ldd	r23, Y+1	; 0x01
    1690:	27 2f       	mov	r18, r23
    1692:	29 70       	andi	r18, 0x09	; 9
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 f0       	breq	.+12     	; 0x16a4 <dtoa_prf+0x62>
    1698:	e1 fc       	sbrc	r14, 1
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <dtoa_prf+0x66>
    169c:	e0 fe       	sbrs	r14, 0
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <dtoa_prf+0x6a>
    16a0:	60 e2       	ldi	r22, 0x20	; 32
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <dtoa_prf+0x6c>
    16a4:	6d e2       	ldi	r22, 0x2D	; 45
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <dtoa_prf+0x6c>
    16a8:	6b e2       	ldi	r22, 0x2B	; 43
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <dtoa_prf+0x6c>
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	73 ff       	sbrs	r23, 3
    16b0:	3d c0       	rjmp	.+122    	; 0x172c <dtoa_prf+0xea>
    16b2:	66 23       	and	r22, r22
    16b4:	11 f0       	breq	.+4      	; 0x16ba <dtoa_prf+0x78>
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <dtoa_prf+0x7a>
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	8b 15       	cp	r24, r11
    16be:	10 f4       	brcc	.+4      	; 0x16c4 <dtoa_prf+0x82>
    16c0:	b8 1a       	sub	r11, r24
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <dtoa_prf+0x84>
    16c4:	b1 2c       	mov	r11, r1
    16c6:	e4 fc       	sbrc	r14, 4
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <dtoa_prf+0x9e>
    16ca:	8b 2d       	mov	r24, r11
    16cc:	f6 01       	movw	r30, r12
    16ce:	90 e2       	ldi	r25, 0x20	; 32
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <dtoa_prf+0x94>
    16d2:	91 93       	st	Z+, r25
    16d4:	81 50       	subi	r24, 0x01	; 1
    16d6:	81 11       	cpse	r24, r1
    16d8:	fc cf       	rjmp	.-8      	; 0x16d2 <dtoa_prf+0x90>
    16da:	cb 0c       	add	r12, r11
    16dc:	d1 1c       	adc	r13, r1
    16de:	b1 2c       	mov	r11, r1
    16e0:	66 23       	and	r22, r22
    16e2:	19 f0       	breq	.+6      	; 0x16ea <dtoa_prf+0xa8>
    16e4:	d6 01       	movw	r26, r12
    16e6:	6d 93       	st	X+, r22
    16e8:	6d 01       	movw	r12, r26
    16ea:	e2 fe       	sbrs	r14, 2
    16ec:	0a c0       	rjmp	.+20     	; 0x1702 <dtoa_prf+0xc0>
    16ee:	8e e4       	ldi	r24, 0x4E	; 78
    16f0:	f6 01       	movw	r30, r12
    16f2:	80 83       	st	Z, r24
    16f4:	91 e4       	ldi	r25, 0x41	; 65
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	82 83       	std	Z+2, r24	; 0x02
    16fa:	f3 e0       	ldi	r31, 0x03	; 3
    16fc:	cf 0e       	add	r12, r31
    16fe:	d1 1c       	adc	r13, r1
    1700:	0c c0       	rjmp	.+24     	; 0x171a <dtoa_prf+0xd8>
    1702:	8e e6       	ldi	r24, 0x6E	; 110
    1704:	d6 01       	movw	r26, r12
    1706:	8c 93       	st	X, r24
    1708:	91 e6       	ldi	r25, 0x61	; 97
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	9c 93       	st	X, r25
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	12 96       	adiw	r26, 0x02	; 2
    1712:	8c 93       	st	X, r24
    1714:	b3 e0       	ldi	r27, 0x03	; 3
    1716:	cb 0e       	add	r12, r27
    1718:	d1 1c       	adc	r13, r1
    171a:	8b 2d       	mov	r24, r11
    171c:	f6 01       	movw	r30, r12
    171e:	90 e2       	ldi	r25, 0x20	; 32
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <dtoa_prf+0xe4>
    1722:	91 93       	st	Z+, r25
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	81 11       	cpse	r24, r1
    1728:	fc cf       	rjmp	.-8      	; 0x1722 <dtoa_prf+0xe0>
    172a:	40 c0       	rjmp	.+128    	; 0x17ac <dtoa_prf+0x16a>
    172c:	72 ff       	sbrs	r23, 2
    172e:	45 c0       	rjmp	.+138    	; 0x17ba <dtoa_prf+0x178>
    1730:	66 23       	and	r22, r22
    1732:	11 f0       	breq	.+4      	; 0x1738 <dtoa_prf+0xf6>
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	01 c0       	rjmp	.+2      	; 0x173a <dtoa_prf+0xf8>
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	8b 15       	cp	r24, r11
    173c:	10 f4       	brcc	.+4      	; 0x1742 <dtoa_prf+0x100>
    173e:	b8 1a       	sub	r11, r24
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <dtoa_prf+0x102>
    1742:	b1 2c       	mov	r11, r1
    1744:	e4 fc       	sbrc	r14, 4
    1746:	0b c0       	rjmp	.+22     	; 0x175e <dtoa_prf+0x11c>
    1748:	8b 2d       	mov	r24, r11
    174a:	f6 01       	movw	r30, r12
    174c:	90 e2       	ldi	r25, 0x20	; 32
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <dtoa_prf+0x112>
    1750:	91 93       	st	Z+, r25
    1752:	81 50       	subi	r24, 0x01	; 1
    1754:	81 11       	cpse	r24, r1
    1756:	fc cf       	rjmp	.-8      	; 0x1750 <dtoa_prf+0x10e>
    1758:	cb 0c       	add	r12, r11
    175a:	d1 1c       	adc	r13, r1
    175c:	b1 2c       	mov	r11, r1
    175e:	66 23       	and	r22, r22
    1760:	19 f0       	breq	.+6      	; 0x1768 <dtoa_prf+0x126>
    1762:	f6 01       	movw	r30, r12
    1764:	61 93       	st	Z+, r22
    1766:	6f 01       	movw	r12, r30
    1768:	e2 fe       	sbrs	r14, 2
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <dtoa_prf+0x146>
    176c:	89 e4       	ldi	r24, 0x49	; 73
    176e:	d6 01       	movw	r26, r12
    1770:	8c 93       	st	X, r24
    1772:	8e e4       	ldi	r24, 0x4E	; 78
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	8c 93       	st	X, r24
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	86 e4       	ldi	r24, 0x46	; 70
    177c:	12 96       	adiw	r26, 0x02	; 2
    177e:	8c 93       	st	X, r24
    1780:	b3 e0       	ldi	r27, 0x03	; 3
    1782:	cb 0e       	add	r12, r27
    1784:	d1 1c       	adc	r13, r1
    1786:	0a c0       	rjmp	.+20     	; 0x179c <dtoa_prf+0x15a>
    1788:	89 e6       	ldi	r24, 0x69	; 105
    178a:	f6 01       	movw	r30, r12
    178c:	80 83       	st	Z, r24
    178e:	8e e6       	ldi	r24, 0x6E	; 110
    1790:	81 83       	std	Z+1, r24	; 0x01
    1792:	86 e6       	ldi	r24, 0x66	; 102
    1794:	82 83       	std	Z+2, r24	; 0x02
    1796:	f3 e0       	ldi	r31, 0x03	; 3
    1798:	cf 0e       	add	r12, r31
    179a:	d1 1c       	adc	r13, r1
    179c:	8b 2d       	mov	r24, r11
    179e:	f6 01       	movw	r30, r12
    17a0:	90 e2       	ldi	r25, 0x20	; 32
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <dtoa_prf+0x166>
    17a4:	91 93       	st	Z+, r25
    17a6:	81 50       	subi	r24, 0x01	; 1
    17a8:	81 11       	cpse	r24, r1
    17aa:	fc cf       	rjmp	.-8      	; 0x17a4 <dtoa_prf+0x162>
    17ac:	f6 01       	movw	r30, r12
    17ae:	eb 0d       	add	r30, r11
    17b0:	f1 1d       	adc	r31, r1
    17b2:	10 82       	st	Z, r1
    17b4:	2e ef       	ldi	r18, 0xFE	; 254
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	ac c0       	rjmp	.+344    	; 0x1912 <dtoa_prf+0x2d0>
    17ba:	a1 e0       	ldi	r26, 0x01	; 1
    17bc:	61 11       	cpse	r22, r1
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <dtoa_prf+0x180>
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	4a 2f       	mov	r20, r26
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	18 16       	cp	r1, r24
    17c8:	19 06       	cpc	r1, r25
    17ca:	24 f4       	brge	.+8      	; 0x17d4 <dtoa_prf+0x192>
    17cc:	9c 01       	movw	r18, r24
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <dtoa_prf+0x196>
    17d4:	21 e0       	ldi	r18, 0x01	; 1
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	24 0f       	add	r18, r20
    17da:	35 1f       	adc	r19, r21
    17dc:	11 23       	and	r17, r17
    17de:	29 f0       	breq	.+10     	; 0x17ea <dtoa_prf+0x1a8>
    17e0:	41 2f       	mov	r20, r17
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	4f 5f       	subi	r20, 0xFF	; 255
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <dtoa_prf+0x1ac>
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	42 0f       	add	r20, r18
    17f0:	53 1f       	adc	r21, r19
    17f2:	2b 2d       	mov	r18, r11
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	42 17       	cp	r20, r18
    17f8:	53 07       	cpc	r21, r19
    17fa:	14 f4       	brge	.+4      	; 0x1800 <dtoa_prf+0x1be>
    17fc:	b4 1a       	sub	r11, r20
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <dtoa_prf+0x1c0>
    1800:	b1 2c       	mov	r11, r1
    1802:	3e 2d       	mov	r19, r14
    1804:	30 71       	andi	r19, 0x10	; 16
    1806:	e4 fc       	sbrc	r14, 4
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <dtoa_prf+0x1e2>
    180a:	e3 fc       	sbrc	r14, 3
    180c:	0b c0       	rjmp	.+22     	; 0x1824 <dtoa_prf+0x1e2>
    180e:	2b 2d       	mov	r18, r11
    1810:	f6 01       	movw	r30, r12
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	02 c0       	rjmp	.+4      	; 0x181a <dtoa_prf+0x1d8>
    1816:	41 93       	st	Z+, r20
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	21 11       	cpse	r18, r1
    181c:	fc cf       	rjmp	.-8      	; 0x1816 <dtoa_prf+0x1d4>
    181e:	cb 0c       	add	r12, r11
    1820:	d1 1c       	adc	r13, r1
    1822:	b1 2c       	mov	r11, r1
    1824:	aa 23       	and	r26, r26
    1826:	19 f0       	breq	.+6      	; 0x182e <dtoa_prf+0x1ec>
    1828:	d6 01       	movw	r26, r12
    182a:	6d 93       	st	X+, r22
    182c:	6d 01       	movw	r12, r26
    182e:	31 11       	cpse	r19, r1
    1830:	0b c0       	rjmp	.+22     	; 0x1848 <dtoa_prf+0x206>
    1832:	2b 2d       	mov	r18, r11
    1834:	f6 01       	movw	r30, r12
    1836:	30 e3       	ldi	r19, 0x30	; 48
    1838:	02 c0       	rjmp	.+4      	; 0x183e <dtoa_prf+0x1fc>
    183a:	31 93       	st	Z+, r19
    183c:	21 50       	subi	r18, 0x01	; 1
    183e:	21 11       	cpse	r18, r1
    1840:	fc cf       	rjmp	.-8      	; 0x183a <dtoa_prf+0x1f8>
    1842:	cb 0c       	add	r12, r11
    1844:	d1 1c       	adc	r13, r1
    1846:	b1 2c       	mov	r11, r1
    1848:	f8 0e       	add	r15, r24
    184a:	0a 81       	ldd	r16, Y+2	; 0x02
    184c:	40 e1       	ldi	r20, 0x10	; 16
    184e:	a4 2e       	mov	r10, r20
    1850:	a7 22       	and	r10, r23
    1852:	74 ff       	sbrs	r23, 4
    1854:	03 c0       	rjmp	.+6      	; 0x185c <dtoa_prf+0x21a>
    1856:	01 33       	cpi	r16, 0x31	; 49
    1858:	09 f4       	brne	.+2      	; 0x185c <dtoa_prf+0x21a>
    185a:	fa 94       	dec	r15
    185c:	1f 14       	cp	r1, r15
    185e:	2c f4       	brge	.+10     	; 0x186a <dtoa_prf+0x228>
    1860:	2f 2d       	mov	r18, r15
    1862:	29 30       	cpi	r18, 0x09	; 9
    1864:	18 f0       	brcs	.+6      	; 0x186c <dtoa_prf+0x22a>
    1866:	28 e0       	ldi	r18, 0x08	; 8
    1868:	01 c0       	rjmp	.+2      	; 0x186c <dtoa_prf+0x22a>
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	ac 01       	movw	r20, r24
    186e:	97 ff       	sbrs	r25, 7
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <dtoa_prf+0x234>
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	3e e2       	ldi	r19, 0x2E	; 46
    187c:	93 2e       	mov	r9, r19
    187e:	fc 01       	movw	r30, r24
    1880:	e2 1b       	sub	r30, r18
    1882:	f1 09       	sbc	r31, r1
    1884:	9f 01       	movw	r18, r30
    1886:	dc 01       	movw	r26, r24
    1888:	a4 1b       	sub	r26, r20
    188a:	b5 0b       	sbc	r27, r21
    188c:	fe 01       	movw	r30, r28
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	ea 0f       	add	r30, r26
    1892:	fb 1f       	adc	r31, r27
    1894:	a1 2f       	mov	r26, r17
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	66 24       	eor	r6, r6
    189a:	77 24       	eor	r7, r7
    189c:	6a 1a       	sub	r6, r26
    189e:	7b 0a       	sbc	r7, r27
    18a0:	4f 3f       	cpi	r20, 0xFF	; 255
    18a2:	1f ef       	ldi	r17, 0xFF	; 255
    18a4:	51 07       	cpc	r21, r17
    18a6:	19 f4       	brne	.+6      	; 0x18ae <dtoa_prf+0x26c>
    18a8:	d6 01       	movw	r26, r12
    18aa:	9d 92       	st	X+, r9
    18ac:	6d 01       	movw	r12, r26
    18ae:	84 17       	cp	r24, r20
    18b0:	95 07       	cpc	r25, r21
    18b2:	54 f0       	brlt	.+20     	; 0x18c8 <dtoa_prf+0x286>
    18b4:	24 17       	cp	r18, r20
    18b6:	35 07       	cpc	r19, r21
    18b8:	3c f4       	brge	.+14     	; 0x18c8 <dtoa_prf+0x286>
    18ba:	7f 01       	movw	r14, r30
    18bc:	e6 0e       	add	r14, r22
    18be:	f7 1e       	adc	r15, r23
    18c0:	d7 01       	movw	r26, r14
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	1c 91       	ld	r17, X
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <dtoa_prf+0x288>
    18c8:	10 e3       	ldi	r17, 0x30	; 48
    18ca:	41 50       	subi	r20, 0x01	; 1
    18cc:	51 09       	sbc	r21, r1
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	46 15       	cp	r20, r6
    18d4:	57 05       	cpc	r21, r7
    18d6:	24 f0       	brlt	.+8      	; 0x18e0 <dtoa_prf+0x29e>
    18d8:	d6 01       	movw	r26, r12
    18da:	1d 93       	st	X+, r17
    18dc:	6d 01       	movw	r12, r26
    18de:	e0 cf       	rjmp	.-64     	; 0x18a0 <dtoa_prf+0x25e>
    18e0:	48 17       	cp	r20, r24
    18e2:	59 07       	cpc	r21, r25
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <dtoa_prf+0x2b2>
    18e6:	06 33       	cpi	r16, 0x36	; 54
    18e8:	20 f4       	brcc	.+8      	; 0x18f2 <dtoa_prf+0x2b0>
    18ea:	05 33       	cpi	r16, 0x35	; 53
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <dtoa_prf+0x2b2>
    18ee:	a1 10       	cpse	r10, r1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <dtoa_prf+0x2b2>
    18f2:	11 e3       	ldi	r17, 0x31	; 49
    18f4:	f6 01       	movw	r30, r12
    18f6:	11 93       	st	Z+, r17
    18f8:	8b 2d       	mov	r24, r11
    18fa:	df 01       	movw	r26, r30
    18fc:	90 e2       	ldi	r25, 0x20	; 32
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <dtoa_prf+0x2c2>
    1900:	9d 93       	st	X+, r25
    1902:	81 50       	subi	r24, 0x01	; 1
    1904:	81 11       	cpse	r24, r1
    1906:	fc cf       	rjmp	.-8      	; 0x1900 <dtoa_prf+0x2be>
    1908:	eb 0d       	add	r30, r11
    190a:	f1 1d       	adc	r31, r1
    190c:	10 82       	st	Z, r1
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	c9 01       	movw	r24, r18
    1914:	29 96       	adiw	r28, 0x09	; 9
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	9f 90       	pop	r9
    1936:	7f 90       	pop	r7
    1938:	6f 90       	pop	r6
    193a:	08 95       	ret

0000193c <__prologue_saves__>:
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	ca 1b       	sub	r28, r26
    1966:	db 0b       	sbc	r29, r27
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	09 94       	ijmp

00001974 <__epilogue_restores__>:
    1974:	2a 88       	ldd	r2, Y+18	; 0x12
    1976:	39 88       	ldd	r3, Y+17	; 0x11
    1978:	48 88       	ldd	r4, Y+16	; 0x10
    197a:	5f 84       	ldd	r5, Y+15	; 0x0f
    197c:	6e 84       	ldd	r6, Y+14	; 0x0e
    197e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1980:	8c 84       	ldd	r8, Y+12	; 0x0c
    1982:	9b 84       	ldd	r9, Y+11	; 0x0b
    1984:	aa 84       	ldd	r10, Y+10	; 0x0a
    1986:	b9 84       	ldd	r11, Y+9	; 0x09
    1988:	c8 84       	ldd	r12, Y+8	; 0x08
    198a:	df 80       	ldd	r13, Y+7	; 0x07
    198c:	ee 80       	ldd	r14, Y+6	; 0x06
    198e:	fd 80       	ldd	r15, Y+5	; 0x05
    1990:	0c 81       	ldd	r16, Y+4	; 0x04
    1992:	1b 81       	ldd	r17, Y+3	; 0x03
    1994:	aa 81       	ldd	r26, Y+2	; 0x02
    1996:	b9 81       	ldd	r27, Y+1	; 0x01
    1998:	ce 0f       	add	r28, r30
    199a:	d1 1d       	adc	r29, r1
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	ed 01       	movw	r28, r26
    19a8:	08 95       	ret

000019aa <_exit>:
    19aa:	f8 94       	cli

000019ac <__stop_program>:
    19ac:	ff cf       	rjmp	.-2      	; 0x19ac <__stop_program>
