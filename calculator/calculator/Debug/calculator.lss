
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00001a4e  00001ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  0080013c  0080013c  00001bbe  2**0
                  ALLOC
  3 .stab         00002c40  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000794  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004f94  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c13  00000000  00000000  00005143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a5a  00000000  00000000  00006d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b96  00000000  00000000  000077b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000360  00000000  00000000  00008348  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006be  00000000  00000000  000086a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000016e1  00000000  00000000  00008d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  0000a447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

00000054 <str_nan.1656>:
      54:	6e 61 6e 00 4e 41 4e 00                             nan.NAN.

0000005c <str_inf.1657>:
      5c:	69 6e 66 00 49 4e 46 00 00 40 7a 10 f3 5a 00 a0     inf.INF..@z..Z..
      6c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      7c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      8c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      9c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      ac:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      bc:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      cc:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
      dc:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
      ec:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
      fc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     10c:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     11c:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     12c:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     13c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     14c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     15c:	3d 27                                               ='

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf e5       	ldi	r28, 0x5F	; 95
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e6       	ldi	r26, 0x60	; 96
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ee e4       	ldi	r30, 0x4E	; 78
     172:	fa e1       	ldi	r31, 0x1A	; 26
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x10>
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ac 33       	cpi	r26, 0x3C	; 60
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0xc>

00000180 <__do_clear_bss>:
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	ac e3       	ldi	r26, 0x3C	; 60
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a1 3a       	cpi	r26, 0xA1	; 161
     18c:	b2 07       	cpc	r27, r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
     194:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <vKeypadInit>:
									                  {'C','0','=','+'}};
//-----------------------------------------------------------------------
 void vKeypadInit(void)
 {
 //set rows as output
 ROW0_DIR |=(1U<<ROW0);
     19c:	a0 9a       	sbi	0x14, 0	; 20
 ROW1_DIR |=(1U<<ROW1);
     19e:	a1 9a       	sbi	0x14, 1	; 20
 ROW2_DIR |=(1U<<ROW2);
     1a0:	a2 9a       	sbi	0x14, 2	; 20
 ROW3_DIR |=(1U<<ROW3);
     1a2:	a3 9a       	sbi	0x14, 3	; 20
  //set lines as input
  LINE0_DIR &=~(1U<<LINE0);
     1a4:	a4 98       	cbi	0x14, 4	; 20
  LINE1_DIR &=~(1U<<LINE1);
     1a6:	a5 98       	cbi	0x14, 5	; 20
  LINE2_DIR &=~(1U<<LINE2);
     1a8:	a6 98       	cbi	0x14, 6	; 20
  LINE3_DIR &=~(1U<<LINE3);
     1aa:	a7 98       	cbi	0x14, 7	; 20
 //set rows output to no output state(1)
 ROW0_OUTPUT |=(1U<<ROW0);
     1ac:	a8 9a       	sbi	0x15, 0	; 21
 ROW1_OUTPUT |=(1U<<ROW1);
     1ae:	a9 9a       	sbi	0x15, 1	; 21
 ROW2_OUTPUT |=(1U<<ROW2);
     1b0:	aa 9a       	sbi	0x15, 2	; 21
 ROW3_OUTPUT |=(1U<<ROW3);
     1b2:	ab 9a       	sbi	0x15, 3	; 21
 //pull the line up
 LINE0_PULLRIG |=(1U<<LINE0);
     1b4:	ac 9a       	sbi	0x15, 4	; 21
 LINE1_PULLRIG |=(1U<<LINE1);
     1b6:	ad 9a       	sbi	0x15, 5	; 21
 LINE2_PULLRIG |=(1U<<LINE2);
     1b8:	ae 9a       	sbi	0x15, 6	; 21
 LINE3_PULLRIG |=(1U<<LINE3);
     1ba:	af 9a       	sbi	0x15, 7	; 21
     1bc:	08 95       	ret

000001be <ucKeypadScan>:
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
     1be:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set rows output to no output state(1)
		ROW0_OUTPUT |=(1U<<ROW0);
     1c0:	a8 9a       	sbi	0x15, 0	; 21
		ROW1_OUTPUT |=(1U<<ROW1);
     1c2:	a9 9a       	sbi	0x15, 1	; 21
		ROW2_OUTPUT |=(1U<<ROW2);
     1c4:	aa 9a       	sbi	0x15, 2	; 21
		ROW3_OUTPUT |=(1U<<ROW3);
     1c6:	ab 9a       	sbi	0x15, 3	; 21
		
		//set certain row to output state (0)
		switch(row)
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	41 f0       	breq	.+16     	; 0x1dc <ucKeypadScan+0x1e>
     1cc:	28 f0       	brcs	.+10     	; 0x1d8 <ucKeypadScan+0x1a>
     1ce:	82 30       	cpi	r24, 0x02	; 2
     1d0:	39 f0       	breq	.+14     	; 0x1e0 <ucKeypadScan+0x22>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	41 f4       	brne	.+16     	; 0x1e6 <ucKeypadScan+0x28>
     1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <ucKeypadScan+0x26>
		{
		case 0:ROW0_OUTPUT &=~(1U<<ROW0);break;
     1d8:	a8 98       	cbi	0x15, 0	; 21
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <ucKeypadScan+0x28>
		case 1:ROW1_OUTPUT &=~(1U<<ROW1);break;
     1dc:	a9 98       	cbi	0x15, 1	; 21
     1de:	03 c0       	rjmp	.+6      	; 0x1e6 <ucKeypadScan+0x28>
		case 2:ROW2_OUTPUT &=~(1U<<ROW2);break;
     1e0:	aa 98       	cbi	0x15, 2	; 21
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <ucKeypadScan+0x28>
		case 3:ROW3_OUTPUT &=~(1U<<ROW3);break;
     1e4:	ab 98       	cbi	0x15, 3	; 21
		default:break;
		}
		//check on lines
		if (LINE0_CHECK==IS_VALID){line=0;}
     1e6:	9c 9b       	sbis	0x13, 4	; 19
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <ucKeypadScan+0x42>
		else if (LINE1_CHECK==IS_VALID){line=1;}
     1ea:	9d 9b       	sbis	0x13, 5	; 19
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <ucKeypadScan+0x46>
		else if (LINE2_CHECK==IS_VALID){line=2;}
     1ee:	9e 9b       	sbis	0x13, 6	; 19
     1f0:	0b c0       	rjmp	.+22     	; 0x208 <ucKeypadScan+0x4a>
		else if (LINE3_CHECK==IS_VALID){line=3;}
     1f2:	9f 9b       	sbis	0x13, 7	; 19
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <ucKeypadScan+0x4e>
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	84 30       	cpi	r24, 0x04	; 4
     1fa:	11 f7       	brne	.-60     	; 0x1c0 <ucKeypadScan+0x2>
 unsigned char ucKeypadScan(void)
 {
	//pseudo code
	uint8_t row=0;
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	08 95       	ret
		case 2:ROW2_OUTPUT &=~(1U<<ROW2);break;
		case 3:ROW3_OUTPUT &=~(1U<<ROW3);break;
		default:break;
		}
		//check on lines
		if (LINE0_CHECK==IS_VALID){line=0;}
     200:	e0 e0       	ldi	r30, 0x00	; 0
     202:	05 c0       	rjmp	.+10     	; 0x20e <ucKeypadScan+0x50>
		else if (LINE1_CHECK==IS_VALID){line=1;}
     204:	e1 e0       	ldi	r30, 0x01	; 1
     206:	03 c0       	rjmp	.+6      	; 0x20e <ucKeypadScan+0x50>
		else if (LINE2_CHECK==IS_VALID){line=2;}
     208:	e2 e0       	ldi	r30, 0x02	; 2
     20a:	01 c0       	rjmp	.+2      	; 0x20e <ucKeypadScan+0x50>
		else if (LINE3_CHECK==IS_VALID){line=3;}
     20c:	e3 e0       	ldi	r30, 0x03	; 3
			#ifndef NO_KEYPAD_WAIT
				while(ALL_INPUTS_CHECK == IS_STILL_VALID);
			#endif
			
			//save the mapped key[row][line]
			result = s_keypad_mapping[row][line];
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	94 e0       	ldi	r25, 0x04	; 4
     212:	89 9f       	mul	r24, r25
     214:	e0 0d       	add	r30, r0
     216:	f1 1d       	adc	r31, r1
     218:	11 24       	eor	r1, r1
     21a:	e4 51       	subi	r30, 0x14	; 20
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	80 81       	ld	r24, Z
		}
		
	}
	//return the mapped key	 
	return result;
 }
     220:	08 95       	ret

00000222 <ucKeypadScanDebounce>:
	static u8 key_last_state=0;
	u8 key_state=0;
	static u64 key_time_pressed=0;
	//static u8 key_time_not_pressed=0;
	//read button
	key_state=ucKeypadScan();
     222:	0e 94 df 00 	call	0x1be	; 0x1be <ucKeypadScan>
     226:	e8 2f       	mov	r30, r24
	//check the last state of the key
	if(key_state ==key_last_state)
     228:	80 91 3c 01 	lds	r24, 0x013C
     22c:	e8 13       	cpse	r30, r24
     22e:	43 c0       	rjmp	.+134    	; 0x2b6 <ucKeypadScanDebounce+0x94>
	{
		key_time_pressed++;
     230:	20 91 3d 01 	lds	r18, 0x013D
     234:	30 91 3e 01 	lds	r19, 0x013E
     238:	40 91 3f 01 	lds	r20, 0x013F
     23c:	50 91 40 01 	lds	r21, 0x0140
     240:	60 91 41 01 	lds	r22, 0x0141
     244:	70 91 42 01 	lds	r23, 0x0142
     248:	80 91 43 01 	lds	r24, 0x0143
     24c:	90 91 44 01 	lds	r25, 0x0144
     250:	a1 e0       	ldi	r26, 0x01	; 1
     252:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__adddi3_s8>
     256:	20 93 3d 01 	sts	0x013D, r18
     25a:	30 93 3e 01 	sts	0x013E, r19
     25e:	40 93 3f 01 	sts	0x013F, r20
     262:	50 93 40 01 	sts	0x0140, r21
     266:	60 93 41 01 	sts	0x0141, r22
     26a:	70 93 42 01 	sts	0x0142, r23
     26e:	80 93 43 01 	sts	0x0143, r24
     272:	90 93 44 01 	sts	0x0144, r25
		if(key_time_pressed==KEY_PRESSED_TIME)
     276:	20 31       	cpi	r18, 0x10	; 16
     278:	37 42       	sbci	r19, 0x27	; 39
     27a:	41 05       	cpc	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	81 05       	cpc	r24, r1
     284:	91 05       	cpc	r25, r1
     286:	99 f4       	brne	.+38     	; 0x2ae <ucKeypadScanDebounce+0x8c>
		{
			key_time_pressed=0;
     288:	10 92 3d 01 	sts	0x013D, r1
     28c:	10 92 3e 01 	sts	0x013E, r1
     290:	10 92 3f 01 	sts	0x013F, r1
     294:	10 92 40 01 	sts	0x0140, r1
     298:	10 92 41 01 	sts	0x0141, r1
     29c:	10 92 42 01 	sts	0x0142, r1
     2a0:	10 92 43 01 	sts	0x0143, r1
     2a4:	10 92 44 01 	sts	0x0144, r1
			key_last_state=key_state;
     2a8:	e0 93 3c 01 	sts	0x013C, r30
			return key_state;
     2ac:	07 c0       	rjmp	.+14     	; 0x2bc <ucKeypadScanDebounce+0x9a>
			
		}
		else
		{
			key_last_state=key_state;
     2ae:	e0 93 3c 01 	sts	0x013C, r30
			return NO_VALID_INPUT;
     2b2:	ef ef       	ldi	r30, 0xFF	; 255
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <ucKeypadScanDebounce+0x9a>
		}
		
	}
	else
	{	
		key_last_state=key_state;
     2b6:	e0 93 3c 01 	sts	0x013C, r30
		return NO_VALID_INPUT;
     2ba:	ef ef       	ldi	r30, 0xFF	; 255
	}
	
	
}
     2bc:	8e 2f       	mov	r24, r30
     2be:	08 95       	ret

000002c0 <main>:
														  {"MATH ERROR"},
														  {"F FORMAT ERROR"},
														  {"NO OPERATION"}};
//-------------------------------------------------------------
int main(void)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	61 97       	sbiw	r28, 0x11	; 17
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
//-------------------------------------------------------------
static void vMainOutputCalculator( void )
{
	u8 processing_error=0;
	u8 input_char=0;
	char output_string[MAX_INPUT_CHAR]={0};
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f1 e1       	ldi	r31, 0x11	; 17
     2d8:	bf 2e       	mov	r11, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	ee 24       	eor	r14, r14
     2de:	e3 94       	inc	r14
     2e0:	f1 2c       	mov	r15, r1
     2e2:	ec 0e       	add	r14, r28
     2e4:	fd 1e       	adc	r15, r29
			input_char=ucKeypadScan();  //read input
		#endif
		
		if(input_char == 'C') break;
	}
	g_e_calculator_state=INPUT_STATE;
     2e6:	dd 24       	eor	r13, r13
     2e8:	d3 94       	inc	r13
static const char g_error_string[MAX_ERROR][MAX_ERROR_STRING]={{"NO ERROR"},
														  {"MATH ERROR"},
														  {"F FORMAT ERROR"},
														  {"NO OPERATION"}};
//-------------------------------------------------------------
int main(void)
     2ea:	08 e5       	ldi	r16, 0x58	; 88
     2ec:	11 e0       	ldi	r17, 0x01	; 1
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
				g_e_calculator_state=OUTPUT_STATE;
				break;
			}
			//save the = sign
			g_dump_input_array[input_count]=input_char;  //save = as last char number index 16 or less
     2ee:	0f 2e       	mov	r0, r31
     2f0:	fd e3       	ldi	r31, 0x3D	; 61
     2f2:	9f 2e       	mov	r9, r31
     2f4:	f0 2d       	mov	r31, r0
				g_e_calculator_state=PROCESS_STATE;
				break;	
			}
			else
			{
				g_e_calculator_state=ERROR_STATE;
     2f6:	68 94       	set
     2f8:	aa 24       	eor	r10, r10
     2fa:	a2 f8       	bld	r10, 2
			{
				g_error_flag=CALCULATOR_MATH_ERROR;
			}
			if(g_error_flag ==CALCULATOR_NO_INPUT_ERROR)
			{
				g_e_calculator_state=PROCESS_STATE;
     2fc:	68 94       	set
     2fe:	88 24       	eor	r8, r8
     300:	81 f8       	bld	r8, 1
		{
			
			//check if no operation 
			if(operator_count ==0)
			{
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
     302:	0f 2e       	mov	r0, r31
     304:	f3 e0       	ldi	r31, 0x03	; 3
     306:	cf 2e       	mov	r12, r31
     308:	f0 2d       	mov	r31, r0
//-------------------------------------------------------------
int main(void)
{
    while(1)
    {
		switch(g_e_calculator_state)
     30a:	80 91 45 01 	lds	r24, 0x0145
     30e:	82 30       	cpi	r24, 0x02	; 2
     310:	09 f4       	brne	.+2      	; 0x314 <main+0x54>
     312:	81 c0       	rjmp	.+258    	; 0x416 <main+0x156>
     314:	28 f4       	brcc	.+10     	; 0x320 <main+0x60>
     316:	88 23       	and	r24, r24
     318:	49 f0       	breq	.+18     	; 0x32c <main+0x6c>
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	b1 f7       	brne	.-20     	; 0x30a <main+0x4a>
     31e:	0d c0       	rjmp	.+26     	; 0x33a <main+0x7a>
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	09 f4       	brne	.+2      	; 0x326 <main+0x66>
     324:	8b c0       	rjmp	.+278    	; 0x43c <main+0x17c>
     326:	84 30       	cpi	r24, 0x04	; 4
     328:	81 f7       	brne	.-32     	; 0x30a <main+0x4a>
     32a:	bd c0       	rjmp	.+378    	; 0x4a6 <main+0x1e6>
    }
}
//--------------------------------------------------------------
static void vMainInitCalculator( void )
{
	vLcdInit();  
     32c:	0e 94 b2 02 	call	0x564	; 0x564 <vLcdInit>
	vKeypadInit();
     330:	0e 94 ce 00 	call	0x19c	; 0x19c <vKeypadInit>
	g_e_calculator_state=INPUT_STATE;
     334:	d0 92 45 01 	sts	0x0145, r13
     338:	e8 cf       	rjmp	.-48     	; 0x30a <main+0x4a>
	u8 input_count=0;
	u8 input_char=0;
	u8 index=0;
	u8 operator_count=0;
	//claen up
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;  //reset flag
     33a:	10 92 46 01 	sts	0x0146, r1
     33e:	e7 e4       	ldi	r30, 0x47	; 71
     340:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		g_dump_input_array[index]=0;
     342:	11 92       	st	Z+, r1
	u8 index=0;
	u8 operator_count=0;
	//claen up
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;  //reset flag
	
	for(index=0;index<MAX_INPUT_CHAR;index++)
     344:	e0 17       	cp	r30, r16
     346:	f1 07       	cpc	r31, r17
     348:	e1 f7       	brne	.-8      	; 0x342 <main+0x82>
     34a:	61 2c       	mov	r6, r1
     34c:	71 2c       	mov	r7, r1
	index=0;
	//end clean up
	while(1)
	{
		#ifdef NO_KEYPAD_WAIT
		input_char=ucKeypadScanDebounce();  //read input
     34e:	0e 94 11 01 	call	0x222	; 0x222 <ucKeypadScanDebounce>
		#else
		input_char=ucKeypadScan();  //read input
		#endif
		if(input_char == NO_VALID_INPUT)
     352:	8f 3f       	cpi	r24, 0xFF	; 255
     354:	e1 f3       	breq	.-8      	; 0x34e <main+0x8e>
		{
			continue;   //skip
		}
		else if(input_char == 'C')    //reset
     356:	83 34       	cpi	r24, 0x43	; 67
     358:	79 f4       	brne	.+30     	; 0x378 <main+0xb8>
		{
			vLcdClearDisplay();  //clear display
     35a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <vLcdClearDisplay>
			//clear array
			for(index=0;index<=input_count;index++)
     35e:	80 e0       	ldi	r24, 0x00	; 0
			{
				g_dump_input_array[index]=0;
     360:	e8 2f       	mov	r30, r24
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	e9 5b       	subi	r30, 0xB9	; 185
     366:	fe 4f       	sbci	r31, 0xFE	; 254
     368:	10 82       	st	Z, r1
		}
		else if(input_char == 'C')    //reset
		{
			vLcdClearDisplay();  //clear display
			//clear array
			for(index=0;index<=input_count;index++)
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	78 16       	cp	r7, r24
     36e:	c0 f7       	brcc	.-16     	; 0x360 <main+0xa0>
			{
				g_dump_input_array[index]=0;
			}
			input_count=0;
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     370:	10 92 46 01 	sts	0x0146, r1
			//clear array
			for(index=0;index<=input_count;index++)
			{
				g_dump_input_array[index]=0;
			}
			input_count=0;
     374:	71 2c       	mov	r7, r1
     376:	eb cf       	rjmp	.-42     	; 0x34e <main+0x8e>
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
			continue;				
		}
		else if(input_char== '=')  // if equel
     378:	8d 33       	cpi	r24, 0x3D	; 61
     37a:	19 f5       	brne	.+70     	; 0x3c2 <main+0x102>
		{
			
			//check if no operation 
			if(operator_count ==0)
     37c:	61 10       	cpse	r6, r1
     37e:	05 c0       	rjmp	.+10     	; 0x38a <main+0xca>
			{
				g_error_flag=CALCULATOR_ERROR_NO_OPERATION;
     380:	c0 92 46 01 	sts	0x0146, r12
				g_e_calculator_state=OUTPUT_STATE;
     384:	c0 92 45 01 	sts	0x0145, r12
     388:	c0 cf       	rjmp	.-128    	; 0x30a <main+0x4a>
				break;
			}
			//save the = sign
			g_dump_input_array[input_count]=input_char;  //save = as last char number index 16 or less
     38a:	e7 2d       	mov	r30, r7
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	e9 5b       	subi	r30, 0xB9	; 185
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	90 82       	st	Z, r9
			//check last char is not operator
			if((g_dump_input_array[input_count-1] == '+') || (g_dump_input_array[input_count-1] == '-') || (g_dump_input_array[input_count-1] == '*') || (g_dump_input_array[input_count-1] == '/'))
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	80 81       	ld	r24, Z
     398:	8b 32       	cpi	r24, 0x2B	; 43
     39a:	31 f0       	breq	.+12     	; 0x3a8 <main+0xe8>
     39c:	8d 32       	cpi	r24, 0x2D	; 45
     39e:	21 f0       	breq	.+8      	; 0x3a8 <main+0xe8>
     3a0:	8a 32       	cpi	r24, 0x2A	; 42
     3a2:	11 f0       	breq	.+4      	; 0x3a8 <main+0xe8>
     3a4:	8f 32       	cpi	r24, 0x2F	; 47
     3a6:	19 f4       	brne	.+6      	; 0x3ae <main+0xee>
			{
				g_error_flag=CALCULATOR_MATH_ERROR;
     3a8:	d0 92 46 01 	sts	0x0146, r13
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <main+0xfc>
			}
			if(g_error_flag ==CALCULATOR_NO_INPUT_ERROR)
     3ae:	80 91 46 01 	lds	r24, 0x0146
     3b2:	81 11       	cpse	r24, r1
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <main+0xfc>
			{
				g_e_calculator_state=PROCESS_STATE;
     3b6:	80 92 45 01 	sts	0x0145, r8
     3ba:	a7 cf       	rjmp	.-178    	; 0x30a <main+0x4a>
				break;	
			}
			else
			{
				g_e_calculator_state=ERROR_STATE;
     3bc:	a0 92 45 01 	sts	0x0145, r10
     3c0:	a4 cf       	rjmp	.-184    	; 0x30a <main+0x4a>
			
		}
		else   //if any valid char 
		{
			
			if(input_count<MAX_INPUT_CHAR-1)
     3c2:	9f e0       	ldi	r25, 0x0F	; 15
     3c4:	97 15       	cp	r25, r7
     3c6:	18 f2       	brcs	.-122    	; 0x34e <main+0x8e>
			{
				//count number of operator
				if((input_char == '+') || (input_char == '-') || (input_char == '*') || (input_char == '/'))
     3c8:	8b 32       	cpi	r24, 0x2B	; 43
     3ca:	51 f0       	breq	.+20     	; 0x3e0 <main+0x120>
     3cc:	8d 32       	cpi	r24, 0x2D	; 45
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <main+0x120>
     3d0:	8a 32       	cpi	r24, 0x2A	; 42
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <main+0x116>
     3d4:	79 c0       	rjmp	.+242    	; 0x4c8 <main+0x208>
     3d6:	8f 32       	cpi	r24, 0x2F	; 47
     3d8:	99 f4       	brne	.+38     	; 0x400 <main+0x140>
     3da:	7a c0       	rjmp	.+244    	; 0x4d0 <main+0x210>
				{
				//check if * or / sign placed first
					if (input_count==0 && ((input_char == '*') || (input_char == '/')))
					{
						g_error_flag=CALCULATOR_MATH_ERROR;
     3dc:	d0 92 46 01 	sts	0x0146, r13
					}
					//check if 2 operation signs 
					if((g_dump_input_array[input_count-1] == '+') || (g_dump_input_array[input_count-1]== '-') || (g_dump_input_array[input_count-1]== '*') || (g_dump_input_array[input_count-1]== '/'))
     3e0:	e7 2d       	mov	r30, r7
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	ea 5b       	subi	r30, 0xBA	; 186
     3e6:	fe 4f       	sbci	r31, 0xFE	; 254
     3e8:	90 81       	ld	r25, Z
     3ea:	9b 32       	cpi	r25, 0x2B	; 43
     3ec:	31 f0       	breq	.+12     	; 0x3fa <main+0x13a>
     3ee:	9d 32       	cpi	r25, 0x2D	; 45
     3f0:	21 f0       	breq	.+8      	; 0x3fa <main+0x13a>
     3f2:	9a 32       	cpi	r25, 0x2A	; 42
     3f4:	11 f0       	breq	.+4      	; 0x3fa <main+0x13a>
     3f6:	9f 32       	cpi	r25, 0x2F	; 47
     3f8:	11 f4       	brne	.+4      	; 0x3fe <main+0x13e>
					{
						g_error_flag=CALCULATOR_MATH_ERROR;
     3fa:	d0 92 46 01 	sts	0x0146, r13
					}
					operator_count++;
     3fe:	63 94       	inc	r6
				}
			
				g_dump_input_array[input_count]=input_char;   //save char
     400:	e7 2d       	mov	r30, r7
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	e9 5b       	subi	r30, 0xB9	; 185
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	80 83       	st	Z, r24
				u8LcdPrint(input_char,LCD_FIRST_LINE,input_count); //print char
     40a:	47 2d       	mov	r20, r7
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	0e 94 16 03 	call	0x62c	; 0x62c <u8LcdPrint>
				input_count++;
     412:	73 94       	inc	r7
     414:	9c cf       	rjmp	.-200    	; 0x34e <main+0x8e>
}
//-------------------------------------------------------------
static void vMainProcessCalculator(void)
{
	u8 result=0;
	if(g_error_flag==CALCULATOR_ERROR_NO_OPERATION)
     416:	80 91 46 01 	lds	r24, 0x0146
     41a:	83 30       	cpi	r24, 0x03	; 3
     41c:	19 f4       	brne	.+6      	; 0x424 <main+0x164>
	{
		g_e_calculator_state=OUTPUT_STATE;
     41e:	c0 92 45 01 	sts	0x0145, r12
     422:	73 cf       	rjmp	.-282    	; 0x30a <main+0x4a>
		return;  //break 
	}
	else
	{
		//calculate the expresion
		result=u8ProcessingCalculate(g_dump_input_array);
     424:	87 e4       	ldi	r24, 0x47	; 71
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 30 03 	call	0x660	; 0x660 <u8ProcessingCalculate>
		if(result==0)
     42c:	81 11       	cpse	r24, r1
     42e:	03 c0       	rjmp	.+6      	; 0x436 <main+0x176>
		{
			g_e_calculator_state=OUTPUT_STATE;
     430:	c0 92 45 01 	sts	0x0145, r12
     434:	6a cf       	rjmp	.-300    	; 0x30a <main+0x4a>
		}
		else
		{
			g_e_calculator_state=ERROR_STATE;
     436:	a0 92 45 01 	sts	0x0145, r10
     43a:	67 cf       	rjmp	.-306    	; 0x30a <main+0x4a>
//-------------------------------------------------------------
static void vMainOutputCalculator( void )
{
	u8 processing_error=0;
	u8 input_char=0;
	char output_string[MAX_INPUT_CHAR]={0};
     43c:	f7 01       	movw	r30, r14
     43e:	8b 2d       	mov	r24, r11
     440:	11 92       	st	Z+, r1
     442:	8a 95       	dec	r24
     444:	e9 f7       	brne	.-6      	; 0x440 <main+0x180>
	//check if no operation
	if(g_error_flag==CALCULATOR_ERROR_NO_OPERATION)
     446:	80 91 46 01 	lds	r24, 0x0146
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	59 f4       	brne	.+22     	; 0x464 <main+0x1a4>
	{
		u8LcdGoToXy(LCD_SECOND_LINE,0);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	8d 2d       	mov	r24, r13
     452:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <u8LcdGoToXy>
		u8LcdSendString(g_dump_input_array);  //print the input value
     456:	87 e4       	ldi	r24, 0x47	; 71
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <u8LcdSendString>
		g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     45e:	10 92 46 01 	sts	0x0146, r1
     462:	1a c0       	rjmp	.+52     	; 0x498 <main+0x1d8>
		
	}
	else //output if operation 
	{
		processing_error=u8ProcessingFloatToString(output_string,g_result_format);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	c7 01       	movw	r24, r14
     468:	0e 94 24 07 	call	0xe48	; 0xe48 <u8ProcessingFloatToString>
		if(processing_error==NO_PROCESSING_ERROR)
     46c:	81 11       	cpse	r24, r1
     46e:	08 c0       	rjmp	.+16     	; 0x480 <main+0x1c0>
		{//print answer 
			u8LcdGoToXy(LCD_SECOND_LINE,0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	8d 2d       	mov	r24, r13
     474:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <u8LcdGoToXy>
			u8LcdSendString(output_string);
     478:	c7 01       	movw	r24, r14
     47a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <u8LcdSendString>
     47e:	0c c0       	rjmp	.+24     	; 0x498 <main+0x1d8>
		}
		else if(processing_error==CALCULATOR_ERROR_EXCEED_FLOAT_FORMAT)
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	51 f4       	brne	.+20     	; 0x498 <main+0x1d8>
		{
			u8LcdGoToXy(LCD_SECOND_LINE,0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	8d 2d       	mov	r24, r13
     488:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <u8LcdGoToXy>
			u8LcdSendString((char *)g_error_string[CALCULATOR_ERROR_EXCEED_FLOAT_FORMAT]);  //print the input value
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 fe 02 	call	0x5fc	; 0x5fc <u8LcdSendString>
			g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     494:	10 92 46 01 	sts	0x0146, r1
	}	
	//wait till enter 'C'	
	while(1)
	{
		#ifdef NO_KEYPAD_WAIT
			input_char=ucKeypadScanDebounce();  //read input
     498:	0e 94 11 01 	call	0x222	; 0x222 <ucKeypadScanDebounce>
		#else
			input_char=ucKeypadScan();  //read input
		#endif
		
		if(input_char == 'C') break;
     49c:	83 34       	cpi	r24, 0x43	; 67
     49e:	e1 f7       	brne	.-8      	; 0x498 <main+0x1d8>
	}
	g_e_calculator_state=INPUT_STATE;
     4a0:	d0 92 45 01 	sts	0x0145, r13
     4a4:	32 cf       	rjmp	.-412    	; 0x30a <main+0x4a>
}
//-----------------------------------------------------------------
static void vMainErrorCalculator(void)
{
	char input_char=0;
	u8LcdGoToXy(LCD_SECOND_LINE,0);
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <u8LcdGoToXy>
	u8LcdSendString((char *)g_error_string[CALCULATOR_MATH_ERROR]);
     4ae:	8c e0       	ldi	r24, 0x0C	; 12
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <u8LcdSendString>
	while(1)
	{
		#ifdef NO_KEYPAD_WAIT
		input_char=ucKeypadScanDebounce();  //read input
     4b6:	0e 94 11 01 	call	0x222	; 0x222 <ucKeypadScanDebounce>
		#else
		input_char=ucKeypadScan();  //read input
		#endif
		if(input_char == 'C') break;
     4ba:	83 34       	cpi	r24, 0x43	; 67
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x1f6>
	}
	g_e_calculator_state=INPUT_STATE;
     4be:	d0 92 45 01 	sts	0x0145, r13
	g_error_flag=CALCULATOR_NO_INPUT_ERROR;
     4c2:	10 92 46 01 	sts	0x0146, r1
     4c6:	21 cf       	rjmp	.-446    	; 0x30a <main+0x4a>
			{
				//count number of operator
				if((input_char == '+') || (input_char == '-') || (input_char == '*') || (input_char == '/'))
				{
				//check if * or / sign placed first
					if (input_count==0 && ((input_char == '*') || (input_char == '/')))
     4c8:	77 20       	and	r7, r7
     4ca:	09 f4       	brne	.+2      	; 0x4ce <main+0x20e>
     4cc:	87 cf       	rjmp	.-242    	; 0x3dc <main+0x11c>
     4ce:	88 cf       	rjmp	.-240    	; 0x3e0 <main+0x120>
     4d0:	77 20       	and	r7, r7
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <main+0x216>
     4d4:	83 cf       	rjmp	.-250    	; 0x3dc <main+0x11c>
     4d6:	84 cf       	rjmp	.-248    	; 0x3e0 <main+0x120>

000004d8 <SvLatch_data>:
}
//----------------------------------------------------------
static void SvLatch_data( void )
{
	//make E HIGH
	set_bit(LCD_E_OUTPUT,LCD_E);
     4d8:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4da:	85 e3       	ldi	r24, 0x35	; 53
     4dc:	8a 95       	dec	r24
     4de:	f1 f7       	brne	.-4      	; 0x4dc <SvLatch_data+0x4>
     4e0:	00 00       	nop
	//delay
	_delay_us(20);
	//make E LOw 
	clear_bit(LCD_E_OUTPUT,LCD_E);
     4e2:	d8 98       	cbi	0x1b, 0	; 27
     4e4:	85 e3       	ldi	r24, 0x35	; 53
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <SvLatch_data+0xe>
     4ea:	00 00       	nop
     4ec:	08 95       	ret

000004ee <SvLcdSend>:
	SvLcdSend(CMD,LCD_CMD_MODE4_2LINES);
	SvLcdSend(CMD,LCD_CMD_DISPLAY_ON_CURSOR_OFF);
}
//--------------------------------------------------------------
static void SvLcdSend(u8 type,u8 data)
{
     4ee:	cf 93       	push	r28
     4f0:	c6 2f       	mov	r28, r22
	//make RS =0 as cmd and = 1 as data
	if(type==CMD)
     4f2:	81 11       	cpse	r24, r1
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <SvLcdSend+0xc>
	{
		clear_bit(LCD_RS_OUTPUT,LCD_RS);
     4f6:	d9 98       	cbi	0x1b, 1	; 27
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <SvLcdSend+0xe>
	}
	else 
	{
		set_bit(LCD_RS_OUTPUT,LCD_RS);
     4fa:	d9 9a       	sbi	0x1b, 1	; 27
	}
	
	//high nibble data send
	if(check_bit(data,4))
     4fc:	c4 ff       	sbrs	r28, 4
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <SvLcdSend+0x16>
	{
		set_bit(LCD_D4_OUTPUT,LCD_D4);
     500:	dc 9a       	sbi	0x1b, 4	; 27
     502:	01 c0       	rjmp	.+2      	; 0x506 <SvLcdSend+0x18>
	}
	else
	{
		clear_bit(LCD_D4_OUTPUT,LCD_D4);
     504:	dc 98       	cbi	0x1b, 4	; 27
	} 
	if(check_bit(data,5))
     506:	c5 ff       	sbrs	r28, 5
     508:	02 c0       	rjmp	.+4      	; 0x50e <SvLcdSend+0x20>
	{
		set_bit(LCD_D5_OUTPUT,LCD_D5);
     50a:	dd 9a       	sbi	0x1b, 5	; 27
     50c:	01 c0       	rjmp	.+2      	; 0x510 <SvLcdSend+0x22>
	}
	else
	{
		clear_bit(LCD_D5_OUTPUT,LCD_D5);
     50e:	dd 98       	cbi	0x1b, 5	; 27
	}
	if(check_bit(data,6))
     510:	c6 ff       	sbrs	r28, 6
     512:	02 c0       	rjmp	.+4      	; 0x518 <SvLcdSend+0x2a>
	{
		set_bit(LCD_D6_OUTPUT,LCD_D6);
     514:	de 9a       	sbi	0x1b, 6	; 27
     516:	01 c0       	rjmp	.+2      	; 0x51a <SvLcdSend+0x2c>
	}
	else
	{
		clear_bit(LCD_D6_OUTPUT,LCD_D6);
     518:	de 98       	cbi	0x1b, 6	; 27
	}
	if(check_bit(data,7))
     51a:	cc 23       	and	r28, r28
     51c:	14 f4       	brge	.+4      	; 0x522 <SvLcdSend+0x34>
	{
		set_bit(LCD_D7_OUTPUT,LCD_D7);
     51e:	df 9a       	sbi	0x1b, 7	; 27
     520:	01 c0       	rjmp	.+2      	; 0x524 <SvLcdSend+0x36>
	}
	else
	{
		clear_bit(LCD_D7_OUTPUT,LCD_D7);
     522:	df 98       	cbi	0x1b, 7	; 27
	}
	//latch data
	SvLatch_data();
     524:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SvLatch_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	8f e9       	ldi	r24, 0x9F	; 159
     52a:	9f e0       	ldi	r25, 0x0F	; 15
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <SvLcdSend+0x3e>
     530:	00 c0       	rjmp	.+0      	; 0x532 <SvLcdSend+0x44>
     532:	00 00       	nop
	//delay
	_delay_ms(2);
	//lower nibble data 
		if(check_bit(data,0))
     534:	c0 ff       	sbrs	r28, 0
     536:	02 c0       	rjmp	.+4      	; 0x53c <SvLcdSend+0x4e>
		{
			set_bit(LCD_D4_OUTPUT,LCD_D4);
     538:	dc 9a       	sbi	0x1b, 4	; 27
     53a:	01 c0       	rjmp	.+2      	; 0x53e <SvLcdSend+0x50>
		}
		else
		{
			clear_bit(LCD_D4_OUTPUT,LCD_D4);
     53c:	dc 98       	cbi	0x1b, 4	; 27
		}
		if(check_bit(data,1))
     53e:	c1 ff       	sbrs	r28, 1
     540:	02 c0       	rjmp	.+4      	; 0x546 <SvLcdSend+0x58>
		{
			set_bit(LCD_D5_OUTPUT,LCD_D5);
     542:	dd 9a       	sbi	0x1b, 5	; 27
     544:	01 c0       	rjmp	.+2      	; 0x548 <SvLcdSend+0x5a>
		}
		else
		{
			clear_bit(LCD_D5_OUTPUT,LCD_D5);
     546:	dd 98       	cbi	0x1b, 5	; 27
		}
		if(check_bit(data,2))
     548:	c2 ff       	sbrs	r28, 2
     54a:	02 c0       	rjmp	.+4      	; 0x550 <SvLcdSend+0x62>
		{
			set_bit(LCD_D6_OUTPUT,LCD_D6);
     54c:	de 9a       	sbi	0x1b, 6	; 27
     54e:	01 c0       	rjmp	.+2      	; 0x552 <SvLcdSend+0x64>
		}
		else
		{
			clear_bit(LCD_D6_OUTPUT,LCD_D6);
     550:	de 98       	cbi	0x1b, 6	; 27
		}
		if(check_bit(data,3))
     552:	c3 ff       	sbrs	r28, 3
     554:	02 c0       	rjmp	.+4      	; 0x55a <SvLcdSend+0x6c>
		{
			set_bit(LCD_D7_OUTPUT,LCD_D7);
     556:	df 9a       	sbi	0x1b, 7	; 27
     558:	01 c0       	rjmp	.+2      	; 0x55c <SvLcdSend+0x6e>
		}
		else
		{
			clear_bit(LCD_D7_OUTPUT,LCD_D7);
     55a:	df 98       	cbi	0x1b, 7	; 27
		}
	//latch data
	SvLatch_data();
     55c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SvLatch_data>
}
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <vLcdInit>:
static void SvLatch_data(void);
//-------------------------------------------------------------
void vLcdInit( void )
{
	//init data as output and E and RS
	set_bit(LCD_E_DDR,LCD_E);
     564:	d0 9a       	sbi	0x1a, 0	; 26
	set_bit(LCD_RS_DDR,LCD_RS);
     566:	d1 9a       	sbi	0x1a, 1	; 26
	
	set_bit(LCD_D4_DDR,LCD_D4);
     568:	d4 9a       	sbi	0x1a, 4	; 26
	set_bit(LCD_D5_DDR,LCD_D5);
     56a:	d5 9a       	sbi	0x1a, 5	; 26
	set_bit(LCD_D6_DDR,LCD_D6);
     56c:	d6 9a       	sbi	0x1a, 6	; 26
	set_bit(LCD_D7_DDR,LCD_D7);
     56e:	d7 9a       	sbi	0x1a, 7	; 26
	//init initial condition
	clear_bit(LCD_E_OUTPUT,LCD_E);
     570:	d8 98       	cbi	0x1b, 0	; 27
	clear_bit(LCD_RS_OUTPUT,LCD_RS);
     572:	d9 98       	cbi	0x1b, 1	; 27
	
	clear_bit(LCD_D4_OUTPUT,LCD_D4);
     574:	dc 98       	cbi	0x1b, 4	; 27
	clear_bit(LCD_D5_OUTPUT,LCD_D5);
     576:	dd 98       	cbi	0x1b, 5	; 27
	clear_bit(LCD_D6_OUTPUT,LCD_D6);
     578:	de 98       	cbi	0x1b, 6	; 27
	clear_bit(LCD_D7_OUTPUT,LCD_D7);
     57a:	df 98       	cbi	0x1b, 7	; 27
     57c:	8f e3       	ldi	r24, 0x3F	; 63
     57e:	9c e9       	ldi	r25, 0x9C	; 156
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <vLcdInit+0x1c>
     584:	00 c0       	rjmp	.+0      	; 0x586 <vLcdInit+0x22>
     586:	00 00       	nop
	//delay to reach vcc level
	_delay_ms(20);
	//send init cmds
	SvLcdSend(CMD,LCD_CMD_MODE4_INIT0);
     588:	63 e3       	ldi	r22, 0x33	; 51
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_MODE4_INIT1);
     590:	62 e3       	ldi	r22, 0x32	; 50
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_MODE4_2LINES);
     598:	68 e2       	ldi	r22, 0x28	; 40
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	SvLcdSend(CMD,LCD_CMD_DISPLAY_ON_CURSOR_OFF);
     5a0:	6c e0       	ldi	r22, 0x0C	; 12
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
     5a8:	08 95       	ret

000005aa <vLcdClearDisplay>:
	SvLcdSend(CMD,data);
}
//-----------------------------------------------------------
void vLcdClearDisplay( void )
{
	SvLcdSend(CMD,LCD_CMD_CLEAR_DISPLAY);
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	80 e7       	ldi	r24, 0x70	; 112
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <vLcdClearDisplay+0xe>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <vLcdClearDisplay+0x18>
     5c2:	00 00       	nop
     5c4:	08 95       	ret

000005c6 <u8LcdGoToXy>:
}
//-------------------------------------------------------
u8 u8LcdGoToXy( u8 line,u8 column )
{
	//limit check
	switch(line)
     5c6:	88 23       	and	r24, r24
     5c8:	19 f0       	breq	.+6      	; 0x5d0 <u8LcdGoToXy+0xa>
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	89 f4       	brne	.+34     	; 0x5f0 <u8LcdGoToXy+0x2a>
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <u8LcdGoToXy+0x1a>
	{
		case LCD_FIRST_LINE :
					if(column >=0 && column <=15)
     5d0:	60 31       	cpi	r22, 0x10	; 16
     5d2:	80 f4       	brcc	.+32     	; 0x5f4 <u8LcdGoToXy+0x2e>
					{
						SvLcdSend(CMD,FIRST_LINE_ADDRESS + column);
     5d4:	60 58       	subi	r22, 0x80	; 128
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
     5de:	08 95       	ret
		case LCD_SECOND_LINE :
					if(column >=0 && column <=15)
     5e0:	60 31       	cpi	r22, 0x10	; 16
     5e2:	50 f4       	brcc	.+20     	; 0x5f8 <u8LcdGoToXy+0x32>
					{
						SvLcdSend(CMD,SECOND_LINE_ADDRESS + column);
     5e4:	60 54       	subi	r22, 0x40	; 64
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
					}
					break;
     5ee:	08 95       	ret
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	08 95       	ret
					{
						SvLcdSend(CMD,FIRST_LINE_ADDRESS + column);
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	08 95       	ret
					{
						SvLcdSend(CMD,SECOND_LINE_ADDRESS + column);
					}
					else
					{
						return LCD_ERROR_COLUMN_OUT_OF_RANGE ;
     5f8:	83 e0       	ldi	r24, 0x03	; 3
					}
					break;
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
}
     5fa:	08 95       	ret

000005fc <u8LcdSendString>:
//---------------------------------------------------------
u8 u8LcdSendString(char* str_ptr)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
	//check if no char send 
	if(str_ptr ==NULL)
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	71 f0       	breq	.+28     	; 0x620 <u8LcdSendString+0x24>
	{
		return LCD_NO_CHAR_TO_PRINT ;
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
     604:	fc 01       	movw	r30, r24
     606:	60 81       	ld	r22, Z
     608:	66 23       	and	r22, r22
     60a:	61 f0       	breq	.+24     	; 0x624 <u8LcdSendString+0x28>
		default:return LCD_ERROR_ROW_OUT_OF_RANGE ;
			}
			return LCD_NO_ERROR ;
}
//---------------------------------------------------------
u8 u8LcdSendString(char* str_ptr)
     60c:	ec 01       	movw	r28, r24
     60e:	21 96       	adiw	r28, 0x01	; 1
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
		{
			SvLcdSend(DATA,*str_ptr);
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	{
		return LCD_NO_CHAR_TO_PRINT ;
	}
	else
	{   //print till null char
		while(*str_ptr !='\0')
     616:	69 91       	ld	r22, Y+
     618:	61 11       	cpse	r22, r1
     61a:	fa cf       	rjmp	.-12     	; 0x610 <u8LcdSendString+0x14>
		{
			SvLcdSend(DATA,*str_ptr);
			str_ptr++;
		}
		return LCD_NO_ERROR ;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	03 c0       	rjmp	.+6      	; 0x626 <u8LcdSendString+0x2a>
u8 u8LcdSendString(char* str_ptr)
{
	//check if no char send 
	if(str_ptr ==NULL)
	{
		return LCD_NO_CHAR_TO_PRINT ;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	01 c0       	rjmp	.+2      	; 0x626 <u8LcdSendString+0x2a>
		while(*str_ptr !='\0')
		{
			SvLcdSend(DATA,*str_ptr);
			str_ptr++;
		}
		return LCD_NO_ERROR ;
     624:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <u8LcdPrint>:
//----------------------------------------------------
u8 u8LcdPrint(u8 data,u8 line,u8 position)
{
     62c:	cf 93       	push	r28
     62e:	c8 2f       	mov	r28, r24
	u8 l=0;
	if(line>1 || line<0)
     630:	62 30       	cpi	r22, 0x02	; 2
     632:	98 f4       	brcc	.+38     	; 0x65a <u8LcdPrint+0x2e>
	{
		return LCD_ERROR_ROW_OUT_OF_RANGE;   //error
	}
	if(position>15 || position<0)
     634:	40 31       	cpi	r20, 0x10	; 16
     636:	08 f0       	brcs	.+2      	; 0x63a <u8LcdPrint+0xe>
	{
		position=position % 16;  //error
     638:	4f 70       	andi	r20, 0x0F	; 15
	}
	switch (line)
     63a:	61 11       	cpse	r22, r1
     63c:	03 c0       	rjmp	.+6      	; 0x644 <u8LcdPrint+0x18>
	{
		case 0:
		l=0x80 +position;
     63e:	64 2f       	mov	r22, r20
     640:	60 58       	subi	r22, 0x80	; 128
		break;
     642:	02 c0       	rjmp	.+4      	; 0x648 <u8LcdPrint+0x1c>
		default:
		l=0xc0+position;
     644:	64 2f       	mov	r22, r20
     646:	60 54       	subi	r22, 0x40	; 64
		break;
		
	}
	SvLcdSend(CMD,l);    //position    11
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	SvLcdSend(DATA,data);  //data
     64e:	6c 2f       	mov	r22, r28
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 77 02 	call	0x4ee	; 0x4ee <SvLcdSend>
	return LCD_NO_ERROR;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	01 c0       	rjmp	.+2      	; 0x65c <u8LcdPrint+0x30>
u8 u8LcdPrint(u8 data,u8 line,u8 position)
{
	u8 l=0;
	if(line>1 || line<0)
	{
		return LCD_ERROR_ROW_OUT_OF_RANGE;   //error
     65a:	82 e0       	ldi	r24, 0x02	; 2
		
	}
	SvLcdSend(CMD,l);    //position    11
	SvLcdSend(DATA,data);  //data
	return LCD_NO_ERROR;
}
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <u8ProcessingCalculate>:
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
{
     660:	2f 92       	push	r2
     662:	4f 92       	push	r4
     664:	5f 92       	push	r5
     666:	6f 92       	push	r6
     668:	7f 92       	push	r7
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	c8 55       	subi	r28, 0x58	; 88
     688:	d1 09       	sbc	r29, r1
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
}
//---------------------------------------------------------------
static void	vAsciiToInt(char * array)
{
	u8 temp=0,index;
	volatile float ten_power=1;
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	60 e8       	ldi	r22, 0x80	; 128
     69a:	7f e3       	ldi	r23, 0x3F	; 63
     69c:	67 96       	adiw	r28, 0x17	; 23
     69e:	4c af       	std	Y+60, r20	; 0x3c
     6a0:	5d af       	std	Y+61, r21	; 0x3d
     6a2:	6e af       	std	Y+62, r22	; 0x3e
     6a4:	7f af       	std	Y+63, r23	; 0x3f
     6a6:	67 97       	sbiw	r28, 0x17	; 23
	volatile float accumelator=0;
     6a8:	63 96       	adiw	r28, 0x13	; 19
     6aa:	1c ae       	std	Y+60, r1	; 0x3c
     6ac:	1d ae       	std	Y+61, r1	; 0x3d
     6ae:	1e ae       	std	Y+62, r1	; 0x3e
     6b0:	1f ae       	std	Y+63, r1	; 0x3f
     6b2:	63 97       	sbiw	r28, 0x13	; 19
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
	{
		temp=array[index];
     6b4:	dc 01       	movw	r26, r24
     6b6:	1c 91       	ld	r17, X
		if(temp==0)
     6b8:	11 23       	and	r17, r17
     6ba:	09 f4       	brne	.+2      	; 0x6be <u8ProcessingCalculate+0x5e>
     6bc:	11 c1       	rjmp	.+546    	; 0x8e0 <__stack+0x81>
		{
			break;
		}
		else if(temp=='=') //if last char
     6be:	1d 33       	cpi	r17, 0x3D	; 61
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <u8ProcessingCalculate+0x64>
     6c2:	72 c0       	rjmp	.+228    	; 0x7a8 <u8ProcessingCalculate+0x148>
     6c4:	4e c0       	rjmp	.+156    	; 0x762 <u8ProcessingCalculate+0x102>
	u8 temp=0,index;
	volatile float ten_power=1;
	volatile float accumelator=0;
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
	{
		temp=array[index];
     6c6:	69 96       	adiw	r28, 0x19	; 25
     6c8:	ee ad       	ldd	r30, Y+62	; 0x3e
     6ca:	ff ad       	ldd	r31, Y+63	; 0x3f
     6cc:	69 97       	sbiw	r28, 0x19	; 25
     6ce:	11 91       	ld	r17, Z+
     6d0:	69 96       	adiw	r28, 0x19	; 25
     6d2:	ff af       	std	Y+63, r31	; 0x3f
     6d4:	ee af       	std	Y+62, r30	; 0x3e
     6d6:	69 97       	sbiw	r28, 0x19	; 25
		if(temp==0)
     6d8:	11 23       	and	r17, r17
     6da:	09 f4       	brne	.+2      	; 0x6de <u8ProcessingCalculate+0x7e>
     6dc:	01 c1       	rjmp	.+514    	; 0x8e0 <__stack+0x81>
		{
			break;
		}
		else if(temp=='=') //if last char
     6de:	1d 33       	cpi	r17, 0x3D	; 61
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <u8ProcessingCalculate+0x84>
     6e2:	75 c0       	rjmp	.+234    	; 0x7ce <u8ProcessingCalculate+0x16e>
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <u8ProcessingCalculate+0x102>
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
     6e6:	86 ea       	ldi	r24, 0xA6	; 166
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     6ee:	67 96       	adiw	r28, 0x17	; 23
     6f0:	8c ac       	ldd	r8, Y+60	; 0x3c
     6f2:	9d ac       	ldd	r9, Y+61	; 0x3d
     6f4:	ae ac       	ldd	r10, Y+62	; 0x3e
     6f6:	bf ac       	ldd	r11, Y+63	; 0x3f
     6f8:	67 97       	sbiw	r28, 0x17	; 23
     6fa:	63 96       	adiw	r28, 0x13	; 19
     6fc:	cc ac       	ldd	r12, Y+60	; 0x3c
     6fe:	dd ac       	ldd	r13, Y+61	; 0x3d
     700:	ee ac       	ldd	r14, Y+62	; 0x3e
     702:	ff ac       	ldd	r15, Y+63	; 0x3f
     704:	63 97       	sbiw	r28, 0x13	; 19
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e4       	ldi	r20, 0x40	; 64
     70c:	52 e4       	ldi	r21, 0x42	; 66
     70e:	0e 94 ff 07 	call	0xffe	; 0xffe <__subsf3>
     712:	a5 01       	movw	r20, r10
     714:	94 01       	movw	r18, r8
     716:	0e 94 86 09 	call	0x130c	; 0x130c <__mulsf3>
     71a:	a7 01       	movw	r20, r14
     71c:	96 01       	movw	r18, r12
     71e:	0e 94 00 08 	call	0x1000	; 0x1000 <__addsf3>
     722:	46 2f       	mov	r20, r22
     724:	57 2f       	mov	r21, r23
     726:	68 2f       	mov	r22, r24
     728:	79 2f       	mov	r23, r25
     72a:	63 96       	adiw	r28, 0x13	; 19
     72c:	4c af       	std	Y+60, r20	; 0x3c
     72e:	5d af       	std	Y+61, r21	; 0x3d
     730:	6e af       	std	Y+62, r22	; 0x3e
     732:	7f af       	std	Y+63, r23	; 0x3f
     734:	63 97       	sbiw	r28, 0x13	; 19
				ten_power *=10;
     736:	67 96       	adiw	r28, 0x17	; 23
     738:	6c ad       	ldd	r22, Y+60	; 0x3c
     73a:	7d ad       	ldd	r23, Y+61	; 0x3d
     73c:	8e ad       	ldd	r24, Y+62	; 0x3e
     73e:	9f ad       	ldd	r25, Y+63	; 0x3f
     740:	67 97       	sbiw	r28, 0x17	; 23
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e2       	ldi	r20, 0x20	; 32
     748:	51 e4       	ldi	r21, 0x41	; 65
     74a:	0e 94 86 09 	call	0x130c	; 0x130c <__mulsf3>
     74e:	46 2f       	mov	r20, r22
     750:	57 2f       	mov	r21, r23
     752:	68 2f       	mov	r22, r24
     754:	79 2f       	mov	r23, r25
     756:	67 96       	adiw	r28, 0x17	; 23
     758:	4c af       	std	Y+60, r20	; 0x3c
     75a:	5d af       	std	Y+61, r21	; 0x3d
     75c:	6e af       	std	Y+62, r22	; 0x3e
     75e:	7f af       	std	Y+63, r23	; 0x3f
     760:	67 97       	sbiw	r28, 0x17	; 23
		{
			break;
		}
		else if(temp=='=') //if last char
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
     762:	86 ea       	ldi	r24, 0xA6	; 166
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <u8ProcessingCalculate+0x110>
     76e:	bb cf       	rjmp	.-138    	; 0x6e6 <u8ProcessingCalculate+0x86>
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);//last input
     770:	63 96       	adiw	r28, 0x13	; 19
     772:	4c ad       	ldd	r20, Y+60	; 0x3c
     774:	5d ad       	ldd	r21, Y+61	; 0x3d
     776:	6e ad       	ldd	r22, Y+62	; 0x3e
     778:	7f ad       	ldd	r23, Y+63	; 0x3f
     77a:	63 97       	sbiw	r28, 0x13	; 19
     77c:	80 e6       	ldi	r24, 0x60	; 96
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
     784:	61 2f       	mov	r22, r17
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	71 95       	neg	r23
     78a:	61 95       	neg	r22
     78c:	71 09       	sbc	r23, r1
     78e:	88 27       	eor	r24, r24
     790:	77 fd       	sbrc	r23, 7
     792:	80 95       	com	r24
     794:	98 2f       	mov	r25, r24
     796:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__floatsisf>
     79a:	ab 01       	movw	r20, r22
     79c:	bc 01       	movw	r22, r24
     79e:	80 e6       	ldi	r24, 0x60	; 96
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     7a6:	9c c0       	rjmp	.+312    	; 0x8e0 <__stack+0x81>
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     7a8:	9c 01       	movw	r18, r24
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	69 96       	adiw	r28, 0x19	; 25
     7b0:	3f af       	std	Y+63, r19	; 0x3f
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	69 97       	sbiw	r28, 0x19	; 25
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f1 e1       	ldi	r31, 0x11	; 17
     7ba:	2f 2e       	mov	r2, r31
     7bc:	f0 2d       	mov	r31, r0
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);   //push sign
			accumelator=0;  //reset acc and ten power
			ten_power=1;
     7be:	0f 2e       	mov	r0, r31
     7c0:	41 2c       	mov	r4, r1
     7c2:	51 2c       	mov	r5, r1
     7c4:	f0 e8       	ldi	r31, 0x80	; 128
     7c6:	6f 2e       	mov	r6, r31
     7c8:	ff e3       	ldi	r31, 0x3F	; 63
     7ca:	7f 2e       	mov	r7, r31
     7cc:	f0 2d       	mov	r31, r0
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);//last input
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
			break;
		}
		else if((temp== '+') || (temp== '-') || (temp== '*') || (temp== '/'))
     7ce:	1b 32       	cpi	r17, 0x2B	; 43
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <u8ProcessingCalculate+0x174>
     7d2:	48 c0       	rjmp	.+144    	; 0x864 <__stack+0x5>
     7d4:	1d 32       	cpi	r17, 0x2D	; 45
     7d6:	09 f4       	brne	.+2      	; 0x7da <u8ProcessingCalculate+0x17a>
     7d8:	45 c0       	rjmp	.+138    	; 0x864 <__stack+0x5>
     7da:	1a 32       	cpi	r17, 0x2A	; 42
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <u8ProcessingCalculate+0x180>
     7de:	42 c0       	rjmp	.+132    	; 0x864 <__stack+0x5>
     7e0:	1f 32       	cpi	r17, 0x2F	; 47
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <u8ProcessingCalculate+0x186>
     7e4:	6e c0       	rjmp	.+220    	; 0x8c2 <__stack+0x63>
     7e6:	3e c0       	rjmp	.+124    	; 0x864 <__stack+0x5>
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
     7e8:	86 ea       	ldi	r24, 0xA6	; 166
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     7f0:	67 96       	adiw	r28, 0x17	; 23
     7f2:	8c ac       	ldd	r8, Y+60	; 0x3c
     7f4:	9d ac       	ldd	r9, Y+61	; 0x3d
     7f6:	ae ac       	ldd	r10, Y+62	; 0x3e
     7f8:	bf ac       	ldd	r11, Y+63	; 0x3f
     7fa:	67 97       	sbiw	r28, 0x17	; 23
     7fc:	63 96       	adiw	r28, 0x13	; 19
     7fe:	cc ac       	ldd	r12, Y+60	; 0x3c
     800:	dd ac       	ldd	r13, Y+61	; 0x3d
     802:	ee ac       	ldd	r14, Y+62	; 0x3e
     804:	ff ac       	ldd	r15, Y+63	; 0x3f
     806:	63 97       	sbiw	r28, 0x13	; 19
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e4       	ldi	r20, 0x40	; 64
     80e:	52 e4       	ldi	r21, 0x42	; 66
     810:	0e 94 ff 07 	call	0xffe	; 0xffe <__subsf3>
     814:	a5 01       	movw	r20, r10
     816:	94 01       	movw	r18, r8
     818:	0e 94 86 09 	call	0x130c	; 0x130c <__mulsf3>
     81c:	a7 01       	movw	r20, r14
     81e:	96 01       	movw	r18, r12
     820:	0e 94 00 08 	call	0x1000	; 0x1000 <__addsf3>
     824:	46 2f       	mov	r20, r22
     826:	57 2f       	mov	r21, r23
     828:	68 2f       	mov	r22, r24
     82a:	79 2f       	mov	r23, r25
     82c:	63 96       	adiw	r28, 0x13	; 19
     82e:	4c af       	std	Y+60, r20	; 0x3c
     830:	5d af       	std	Y+61, r21	; 0x3d
     832:	6e af       	std	Y+62, r22	; 0x3e
     834:	7f af       	std	Y+63, r23	; 0x3f
     836:	63 97       	sbiw	r28, 0x13	; 19
				ten_power *=10;
     838:	67 96       	adiw	r28, 0x17	; 23
     83a:	6c ad       	ldd	r22, Y+60	; 0x3c
     83c:	7d ad       	ldd	r23, Y+61	; 0x3d
     83e:	8e ad       	ldd	r24, Y+62	; 0x3e
     840:	9f ad       	ldd	r25, Y+63	; 0x3f
     842:	67 97       	sbiw	r28, 0x17	; 23
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e2       	ldi	r20, 0x20	; 32
     84a:	51 e4       	ldi	r21, 0x41	; 65
     84c:	0e 94 86 09 	call	0x130c	; 0x130c <__mulsf3>
     850:	46 2f       	mov	r20, r22
     852:	57 2f       	mov	r21, r23
     854:	68 2f       	mov	r22, r24
     856:	79 2f       	mov	r23, r25
     858:	67 96       	adiw	r28, 0x17	; 23
     85a:	4c af       	std	Y+60, r20	; 0x3c
     85c:	5d af       	std	Y+61, r21	; 0x3d
     85e:	6e af       	std	Y+62, r22	; 0x3e
     860:	7f af       	std	Y+63, r23	; 0x3f
     862:	67 97       	sbiw	r28, 0x17	; 23
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);  //push = sign
			break;
		}
		else if((temp== '+') || (temp== '-') || (temp== '*') || (temp== '/'))
		{
			while(!(u8StackIsEmpty(&g_ascii_to_int_temp_stck)))  //while stack not empty
     864:	86 ea       	ldi	r24, 0xA6	; 166
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     86c:	88 23       	and	r24, r24
     86e:	09 f4       	brne	.+2      	; 0x872 <__stack+0x13>
     870:	bb cf       	rjmp	.-138    	; 0x7e8 <u8ProcessingCalculate+0x188>
			{

				accumelator +=((SDTStackPop(&g_ascii_to_int_temp_stck))-'0')*ten_power;
				ten_power *=10;
			}
			vStackPush(&g_ascii_to_int_stck,accumelator);
     872:	63 96       	adiw	r28, 0x13	; 19
     874:	4c ad       	ldd	r20, Y+60	; 0x3c
     876:	5d ad       	ldd	r21, Y+61	; 0x3d
     878:	6e ad       	ldd	r22, Y+62	; 0x3e
     87a:	7f ad       	ldd	r23, Y+63	; 0x3f
     87c:	63 97       	sbiw	r28, 0x13	; 19
     87e:	80 e6       	ldi	r24, 0x60	; 96
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
			vStackPush(&g_ascii_to_int_stck,SIGN_MASK - temp);   //push sign
     886:	61 2f       	mov	r22, r17
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	71 95       	neg	r23
     88c:	61 95       	neg	r22
     88e:	71 09       	sbc	r23, r1
     890:	88 27       	eor	r24, r24
     892:	77 fd       	sbrc	r23, 7
     894:	80 95       	com	r24
     896:	98 2f       	mov	r25, r24
     898:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__floatsisf>
     89c:	ab 01       	movw	r20, r22
     89e:	bc 01       	movw	r22, r24
     8a0:	80 e6       	ldi	r24, 0x60	; 96
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
			accumelator=0;  //reset acc and ten power
     8a8:	63 96       	adiw	r28, 0x13	; 19
     8aa:	1c ae       	std	Y+60, r1	; 0x3c
     8ac:	1d ae       	std	Y+61, r1	; 0x3d
     8ae:	1e ae       	std	Y+62, r1	; 0x3e
     8b0:	1f ae       	std	Y+63, r1	; 0x3f
     8b2:	63 97       	sbiw	r28, 0x13	; 19
			ten_power=1;
     8b4:	67 96       	adiw	r28, 0x17	; 23
     8b6:	4c ae       	std	Y+60, r4	; 0x3c
     8b8:	5d ae       	std	Y+61, r5	; 0x3d
     8ba:	6e ae       	std	Y+62, r6	; 0x3e
     8bc:	7f ae       	std	Y+63, r7	; 0x3f
     8be:	67 97       	sbiw	r28, 0x17	; 23
     8c0:	0c c0       	rjmp	.+24     	; 0x8da <__stack+0x7b>
		}
		else
		{
			vStackPush(&g_ascii_to_int_temp_stck,temp);
     8c2:	61 2f       	mov	r22, r17
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__floatunsisf>
     8ce:	ab 01       	movw	r20, r22
     8d0:	bc 01       	movw	r22, r24
     8d2:	86 ea       	ldi	r24, 0xA6	; 166
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     8da:	2a 94       	dec	r2
static void	vAsciiToInt(char * array)
{
	u8 temp=0,index;
	volatile float ten_power=1;
	volatile float accumelator=0;
	for(index=0;index<MAX_INPUT_CHAR;index++)  //traverse the array
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__stack+0x81>
     8de:	f3 ce       	rjmp	.-538    	; 0x6c6 <u8ProcessingCalculate+0x66>
	}
}
//---------------------------------------------------------------
static void	vInfixToPostfix(void)
{
	volatile PROCESSING_DATA_TYPE temp,op=0;
     8e0:	2b 96       	adiw	r28, 0x0b	; 11
     8e2:	1c ae       	std	Y+60, r1	; 0x3c
     8e4:	1d ae       	std	Y+61, r1	; 0x3d
     8e6:	1e ae       	std	Y+62, r1	; 0x3e
     8e8:	1f ae       	std	Y+63, r1	; 0x3f
     8ea:	2b 97       	sbiw	r28, 0x0b	; 11
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
     8ec:	fe 01       	movw	r30, r28
     8ee:	31 96       	adiw	r30, 0x01	; 1
     8f0:	86 e4       	ldi	r24, 0x46	; 70
     8f2:	df 01       	movw	r26, r30
     8f4:	1d 92       	st	X+, r1
     8f6:	8a 95       	dec	r24
     8f8:	e9 f7       	brne	.-6      	; 0x8f4 <__stack+0x95>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	89 83       	std	Y+1, r24	; 0x01
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_ascii_to_int_stck.arr[index];
     8fe:	80 91 62 00 	lds	r24, 0x0062
     902:	90 91 63 00 	lds	r25, 0x0063
     906:	a0 91 64 00 	lds	r26, 0x0064
     90a:	b0 91 65 00 	lds	r27, 0x0065
     90e:	2f 96       	adiw	r28, 0x0f	; 15
     910:	8c af       	std	Y+60, r24	; 0x3c
     912:	9d af       	std	Y+61, r25	; 0x3d
     914:	ae af       	std	Y+62, r26	; 0x3e
     916:	bf af       	std	Y+63, r27	; 0x3f
     918:	2f 97       	sbiw	r28, 0x0f	; 15
		if(temp== EQUEL_OPERATOR)
     91a:	2f 96       	adiw	r28, 0x0f	; 15
     91c:	6c ad       	ldd	r22, Y+60	; 0x3c
     91e:	7d ad       	ldd	r23, Y+61	; 0x3d
     920:	8e ad       	ldd	r24, Y+62	; 0x3e
     922:	9f ad       	ldd	r25, Y+63	; 0x3f
     924:	2f 97       	sbiw	r28, 0x0f	; 15
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	44 e7       	ldi	r20, 0x74	; 116
     92c:	52 ec       	ldi	r21, 0xC2	; 194
     92e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     932:	81 11       	cpse	r24, r1
     934:	4f c0       	rjmp	.+158    	; 0x9d4 <__stack+0x175>
     936:	32 c0       	rjmp	.+100    	; 0x99c <__stack+0x13d>
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_ascii_to_int_stck.arr[index];
     938:	f7 01       	movw	r30, r14
     93a:	81 91       	ld	r24, Z+
     93c:	91 91       	ld	r25, Z+
     93e:	a1 91       	ld	r26, Z+
     940:	b1 91       	ld	r27, Z+
     942:	7f 01       	movw	r14, r30
     944:	2f 96       	adiw	r28, 0x0f	; 15
     946:	8c af       	std	Y+60, r24	; 0x3c
     948:	9d af       	std	Y+61, r25	; 0x3d
     94a:	ae af       	std	Y+62, r26	; 0x3e
     94c:	bf af       	std	Y+63, r27	; 0x3f
     94e:	2f 97       	sbiw	r28, 0x0f	; 15
		if(temp== EQUEL_OPERATOR)
     950:	2f 96       	adiw	r28, 0x0f	; 15
     952:	6c ad       	ldd	r22, Y+60	; 0x3c
     954:	7d ad       	ldd	r23, Y+61	; 0x3d
     956:	8e ad       	ldd	r24, Y+62	; 0x3e
     958:	9f ad       	ldd	r25, Y+63	; 0x3f
     95a:	2f 97       	sbiw	r28, 0x0f	; 15
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	44 e7       	ldi	r20, 0x74	; 116
     962:	52 ec       	ldi	r21, 0xC2	; 194
     964:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     968:	81 11       	cpse	r24, r1
     96a:	40 c0       	rjmp	.+128    	; 0x9ec <__stack+0x18d>
     96c:	17 c0       	rjmp	.+46     	; 0x99c <__stack+0x13d>
		{
			//pop last element
			while(!(u8StackIsEmpty(&operators_stack)))
			{
				g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     96e:	00 91 a0 01 	lds	r16, 0x01A0
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     97c:	f8 01       	movw	r30, r16
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e4 5a       	subi	r30, 0xA4	; 164
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	60 83       	st	Z, r22
     98c:	71 83       	std	Z+1, r23	; 0x01
     98e:	82 83       	std	Z+2, r24	; 0x02
     990:	93 83       	std	Z+3, r25	; 0x03
				g_post_fix_index++;
     992:	80 91 a0 01 	lds	r24, 0x01A0
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	80 93 a0 01 	sts	0x01A0, r24
	{
		temp=g_ascii_to_int_stck.arr[index];
		if(temp== EQUEL_OPERATOR)
		{
			//pop last element
			while(!(u8StackIsEmpty(&operators_stack)))
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     9a4:	88 23       	and	r24, r24
     9a6:	19 f3       	breq	.-58     	; 0x96e <__stack+0x10f>
			{
				g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
				g_post_fix_index++;
			}
			g_post_fix_array[g_post_fix_index]=temp;  //save = it in post fix
     9a8:	2f 96       	adiw	r28, 0x0f	; 15
     9aa:	8c ad       	ldd	r24, Y+60	; 0x3c
     9ac:	9d ad       	ldd	r25, Y+61	; 0x3d
     9ae:	ae ad       	ldd	r26, Y+62	; 0x3e
     9b0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9b2:	2f 97       	sbiw	r28, 0x0f	; 15
     9b4:	e0 91 a0 01 	lds	r30, 0x01A0
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	e4 5a       	subi	r30, 0xA4	; 164
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
			g_post_fix_index=0; //reset index
     9ce:	10 92 a0 01 	sts	0x01A0, r1
     9d2:	60 c1       	rjmp	.+704    	; 0xc94 <__stack+0x435>
     9d4:	0f 2e       	mov	r0, r31
     9d6:	f6 e6       	ldi	r31, 0x66	; 102
     9d8:	ef 2e       	mov	r14, r31
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	ff 2e       	mov	r15, r31
     9de:	f0 2d       	mov	r31, r0
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f6 ea       	ldi	r31, 0xA6	; 166
     9e4:	cf 2e       	mov	r12, r31
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	df 2e       	mov	r13, r31
     9ea:	f0 2d       	mov	r31, r0
			g_post_fix_index=0; //reset index
			break;
		}
		//if + - check the top of stack if * / pop them first then add + - to stck
		//else push them to stack
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) )
     9ec:	2f 96       	adiw	r28, 0x0f	; 15
     9ee:	6c ad       	ldd	r22, Y+60	; 0x3c
     9f0:	7d ad       	ldd	r23, Y+61	; 0x3d
     9f2:	8e ad       	ldd	r24, Y+62	; 0x3e
     9f4:	9f ad       	ldd	r25, Y+63	; 0x3f
     9f6:	2f 97       	sbiw	r28, 0x0f	; 15
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	4c e2       	ldi	r20, 0x2C	; 44
     9fe:	52 ec       	ldi	r21, 0xC2	; 194
     a00:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     a04:	88 23       	and	r24, r24
     a06:	71 f0       	breq	.+28     	; 0xa24 <__stack+0x1c5>
     a08:	2f 96       	adiw	r28, 0x0f	; 15
     a0a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a0c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a0e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a10:	9f ad       	ldd	r25, Y+63	; 0x3f
     a12:	2f 97       	sbiw	r28, 0x0f	; 15
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	44 e3       	ldi	r20, 0x34	; 52
     a1a:	52 ec       	ldi	r21, 0xC2	; 194
     a1c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     a20:	81 11       	cpse	r24, r1
     a22:	88 c0       	rjmp	.+272    	; 0xb34 <__stack+0x2d5>
		{
			if(!(u8StackIsEmpty(&operators_stack)))
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     a2c:	81 11       	cpse	r24, r1
     a2e:	77 c0       	rjmp	.+238    	; 0xb1e <__stack+0x2bf>
			{
				op=SDTStackTop(&operators_stack);
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SDTStackTop>
     a38:	2b 96       	adiw	r28, 0x0b	; 11
     a3a:	6c af       	std	Y+60, r22	; 0x3c
     a3c:	7d af       	std	Y+61, r23	; 0x3d
     a3e:	8e af       	std	Y+62, r24	; 0x3e
     a40:	9f af       	std	Y+63, r25	; 0x3f
     a42:	2b 97       	sbiw	r28, 0x0b	; 11
				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
     a44:	2b 96       	adiw	r28, 0x0b	; 11
     a46:	6c ad       	ldd	r22, Y+60	; 0x3c
     a48:	7d ad       	ldd	r23, Y+61	; 0x3d
     a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     a4e:	2b 97       	sbiw	r28, 0x0b	; 11
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	48 e2       	ldi	r20, 0x28	; 40
     a56:	52 ec       	ldi	r21, 0xC2	; 194
     a58:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     a5c:	88 23       	and	r24, r24
     a5e:	31 f1       	breq	.+76     	; 0xaac <__stack+0x24d>
     a60:	2b 96       	adiw	r28, 0x0b	; 11
     a62:	6c ad       	ldd	r22, Y+60	; 0x3c
     a64:	7d ad       	ldd	r23, Y+61	; 0x3d
     a66:	8e ad       	ldd	r24, Y+62	; 0x3e
     a68:	9f ad       	ldd	r25, Y+63	; 0x3f
     a6a:	2b 97       	sbiw	r28, 0x0b	; 11
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	4c e3       	ldi	r20, 0x3C	; 60
     a72:	52 ec       	ldi	r21, 0xC2	; 194
     a74:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     a78:	88 23       	and	r24, r24
     a7a:	c1 f0       	breq	.+48     	; 0xaac <__stack+0x24d>
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <__stack+0x29d>
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     a7e:	00 91 a0 01 	lds	r16, 0x01A0
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     a8c:	f8 01       	movw	r30, r16
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e4 5a       	subi	r30, 0xA4	; 164
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	60 83       	st	Z, r22
     a9c:	71 83       	std	Z+1, r23	; 0x01
     a9e:	82 83       	std	Z+2, r24	; 0x02
     aa0:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     aa2:	80 91 a0 01 	lds	r24, 0x01A0
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 a0 01 	sts	0x01A0, r24
			if(!(u8StackIsEmpty(&operators_stack)))
			{
				op=SDTStackTop(&operators_stack);
				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     ab4:	88 23       	and	r24, r24
     ab6:	19 f3       	breq	.-58     	; 0xa7e <__stack+0x21f>
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     ab8:	2f 96       	adiw	r28, 0x0f	; 15
     aba:	4c ad       	ldd	r20, Y+60	; 0x3c
     abc:	5d ad       	ldd	r21, Y+61	; 0x3d
     abe:	6e ad       	ldd	r22, Y+62	; 0x3e
     ac0:	7f ad       	ldd	r23, Y+63	; 0x3f
     ac2:	2f 97       	sbiw	r28, 0x0f	; 15
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     acc:	df c0       	rjmp	.+446    	; 0xc8c <__stack+0x42d>
				else
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) == PLUS_OPERATOR) || (SDTStackTop(&operators_stack) ==MINUS_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     ace:	00 91 a0 01 	lds	r16, 0x01A0
     ad2:	10 e0       	ldi	r17, 0x00	; 0
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     adc:	f8 01       	movw	r30, r16
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	e4 5a       	subi	r30, 0xA4	; 164
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	60 83       	st	Z, r22
     aec:	71 83       	std	Z+1, r23	; 0x01
     aee:	82 83       	std	Z+2, r24	; 0x02
     af0:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     af2:	80 91 a0 01 	lds	r24, 0x01A0
     af6:	8f 5f       	subi	r24, 0xFF	; 255
     af8:	80 93 a0 01 	sts	0x01A0, r24
					}
					vStackPush(&operators_stack,temp);
				}
				else
				{
				    while((!(u8StackIsEmpty(&operators_stack))))
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     b04:	88 23       	and	r24, r24
     b06:	19 f3       	breq	.-58     	; 0xace <__stack+0x26f>
					//while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) == PLUS_OPERATOR) || (SDTStackTop(&operators_stack) ==MINUS_OPERATOR) ))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     b08:	2f 96       	adiw	r28, 0x0f	; 15
     b0a:	4c ad       	ldd	r20, Y+60	; 0x3c
     b0c:	5d ad       	ldd	r21, Y+61	; 0x3d
     b0e:	6e ad       	ldd	r22, Y+62	; 0x3e
     b10:	7f ad       	ldd	r23, Y+63	; 0x3f
     b12:	2f 97       	sbiw	r28, 0x0f	; 15
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     b1c:	b7 c0       	rjmp	.+366    	; 0xc8c <__stack+0x42d>
				}
			}
			else  //if stack is empty
			{
				vStackPush(&operators_stack,temp);
     b1e:	2f 96       	adiw	r28, 0x0f	; 15
     b20:	4c ad       	ldd	r20, Y+60	; 0x3c
     b22:	5d ad       	ldd	r21, Y+61	; 0x3d
     b24:	6e ad       	ldd	r22, Y+62	; 0x3e
     b26:	7f ad       	ldd	r23, Y+63	; 0x3f
     b28:	2f 97       	sbiw	r28, 0x0f	; 15
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     b32:	ac c0       	rjmp	.+344    	; 0xc8c <__stack+0x42d>
			}

		}
		// if * / check top of stack if * / pop them first then add * / to stack
		// else if - + push to stack
		else if((temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
     b34:	2f 96       	adiw	r28, 0x0f	; 15
     b36:	6c ad       	ldd	r22, Y+60	; 0x3c
     b38:	7d ad       	ldd	r23, Y+61	; 0x3d
     b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	48 e2       	ldi	r20, 0x28	; 40
     b46:	52 ec       	ldi	r21, 0xC2	; 194
     b48:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     b4c:	88 23       	and	r24, r24
     b4e:	71 f0       	breq	.+28     	; 0xb6c <__stack+0x30d>
     b50:	2f 96       	adiw	r28, 0x0f	; 15
     b52:	6c ad       	ldd	r22, Y+60	; 0x3c
     b54:	7d ad       	ldd	r23, Y+61	; 0x3d
     b56:	8e ad       	ldd	r24, Y+62	; 0x3e
     b58:	9f ad       	ldd	r25, Y+63	; 0x3f
     b5a:	2f 97       	sbiw	r28, 0x0f	; 15
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	4c e3       	ldi	r20, 0x3C	; 60
     b62:	52 ec       	ldi	r21, 0xC2	; 194
     b64:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     b68:	81 11       	cpse	r24, r1
     b6a:	79 c0       	rjmp	.+242    	; 0xc5e <__stack+0x3ff>
		{
			if(!(u8StackIsEmpty(&operators_stack)))
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     b74:	81 11       	cpse	r24, r1
     b76:	68 c0       	rjmp	.+208    	; 0xc48 <__stack+0x3e9>
			{

				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
     b78:	2b 96       	adiw	r28, 0x0b	; 11
     b7a:	6c ad       	ldd	r22, Y+60	; 0x3c
     b7c:	7d ad       	ldd	r23, Y+61	; 0x3d
     b7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b80:	9f ad       	ldd	r25, Y+63	; 0x3f
     b82:	2b 97       	sbiw	r28, 0x0b	; 11
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	48 e2       	ldi	r20, 0x28	; 40
     b8a:	52 ec       	ldi	r21, 0xC2	; 194
     b8c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     b90:	88 23       	and	r24, r24
     b92:	31 f1       	breq	.+76     	; 0xbe0 <__stack+0x381>
     b94:	2b 96       	adiw	r28, 0x0b	; 11
     b96:	6c ad       	ldd	r22, Y+60	; 0x3c
     b98:	7d ad       	ldd	r23, Y+61	; 0x3d
     b9a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b9e:	2b 97       	sbiw	r28, 0x0b	; 11
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4c e3       	ldi	r20, 0x3C	; 60
     ba6:	52 ec       	ldi	r21, 0xC2	; 194
     ba8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     bac:	88 23       	and	r24, r24
     bae:	c1 f0       	breq	.+48     	; 0xbe0 <__stack+0x381>
     bb0:	40 c0       	rjmp	.+128    	; 0xc32 <__stack+0x3d3>
				{
				    //vStackPush(&operators_stack,temp);
					while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
                     //while((!(u8StackIsEmpty(&operators_stack))))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
     bb2:	00 91 a0 01 	lds	r16, 0x01A0
     bb6:	10 e0       	ldi	r17, 0x00	; 0
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     bc0:	f8 01       	movw	r30, r16
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	ee 0f       	add	r30, r30
     bc8:	ff 1f       	adc	r31, r31
     bca:	e4 5a       	subi	r30, 0xA4	; 164
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	60 83       	st	Z, r22
     bd0:	71 83       	std	Z+1, r23	; 0x01
     bd2:	82 83       	std	Z+2, r24	; 0x02
     bd4:	93 83       	std	Z+3, r25	; 0x03
						g_post_fix_index++;
     bd6:	80 91 a0 01 	lds	r24, 0x01A0
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 93 a0 01 	sts	0x01A0, r24
			{

				if( op== MULTIPLY_OPERATOR || op == DIVISOIN_OPERATOR)       //if high precedence
				{
				    //vStackPush(&operators_stack,temp);
					while((!(u8StackIsEmpty(&operators_stack))) && ((SDTStackTop(&operators_stack) ==MULTIPLY_OPERATOR) || (SDTStackTop(&operators_stack) ==DIVISOIN_OPERATOR) ))
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 a0 07 	call	0xf40	; 0xf40 <u8StackIsEmpty>
     be8:	81 11       	cpse	r24, r1
     bea:	18 c0       	rjmp	.+48     	; 0xc1c <__stack+0x3bd>
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SDTStackTop>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	48 e2       	ldi	r20, 0x28	; 40
     bfa:	52 ec       	ldi	r21, 0xC2	; 194
     bfc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     c00:	88 23       	and	r24, r24
     c02:	b9 f2       	breq	.-82     	; 0xbb2 <__stack+0x353>
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SDTStackTop>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	4c e3       	ldi	r20, 0x3C	; 60
     c12:	52 ec       	ldi	r21, 0xC2	; 194
     c14:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     c18:	88 23       	and	r24, r24
     c1a:	59 f2       	breq	.-106    	; 0xbb2 <__stack+0x353>
                     //while((!(u8StackIsEmpty(&operators_stack))))
					{
						g_post_fix_array[g_post_fix_index]=SDTStackPop(&operators_stack);  //save it in post fix
						g_post_fix_index++;
					}
					vStackPush(&operators_stack,temp);
     c1c:	2f 96       	adiw	r28, 0x0f	; 15
     c1e:	4c ad       	ldd	r20, Y+60	; 0x3c
     c20:	5d ad       	ldd	r21, Y+61	; 0x3d
     c22:	6e ad       	ldd	r22, Y+62	; 0x3e
     c24:	7f ad       	ldd	r23, Y+63	; 0x3f
     c26:	2f 97       	sbiw	r28, 0x0f	; 15
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     c30:	2d c0       	rjmp	.+90     	; 0xc8c <__stack+0x42d>
				}
				else
				{
					vStackPush(&operators_stack,temp);
     c32:	2f 96       	adiw	r28, 0x0f	; 15
     c34:	4c ad       	ldd	r20, Y+60	; 0x3c
     c36:	5d ad       	ldd	r21, Y+61	; 0x3d
     c38:	6e ad       	ldd	r22, Y+62	; 0x3e
     c3a:	7f ad       	ldd	r23, Y+63	; 0x3f
     c3c:	2f 97       	sbiw	r28, 0x0f	; 15
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     c46:	22 c0       	rjmp	.+68     	; 0xc8c <__stack+0x42d>
				}
			}
			//if stack is empty push to stack
			else
			{
				vStackPush(&operators_stack,temp);
     c48:	2f 96       	adiw	r28, 0x0f	; 15
     c4a:	4c ad       	ldd	r20, Y+60	; 0x3c
     c4c:	5d ad       	ldd	r21, Y+61	; 0x3d
     c4e:	6e ad       	ldd	r22, Y+62	; 0x3e
     c50:	7f ad       	ldd	r23, Y+63	; 0x3f
     c52:	2f 97       	sbiw	r28, 0x0f	; 15
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     c5c:	17 c0       	rjmp	.+46     	; 0xc8c <__stack+0x42d>

		}
		//if number save it in array
		else  //if it is an operand
		{
			g_post_fix_array[g_post_fix_index]=temp;  //save it in post fix
     c5e:	20 91 a0 01 	lds	r18, 0x01A0
     c62:	2f 96       	adiw	r28, 0x0f	; 15
     c64:	8c ad       	ldd	r24, Y+60	; 0x3c
     c66:	9d ad       	ldd	r25, Y+61	; 0x3d
     c68:	ae ad       	ldd	r26, Y+62	; 0x3e
     c6a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c6c:	2f 97       	sbiw	r28, 0x0f	; 15
     c6e:	e2 2f       	mov	r30, r18
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e4 5a       	subi	r30, 0xA4	; 164
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 83       	st	Z, r24
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	a2 83       	std	Z+2, r26	; 0x02
     c84:	b3 83       	std	Z+3, r27	; 0x03
			g_post_fix_index++;
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	20 93 a0 01 	sts	0x01A0, r18
{
	volatile PROCESSING_DATA_TYPE temp,op=0;
	u8 index;//edit
	ARR_STACK operators_stack={255,0,{0}} ;
	//loop the array if = pop last operator and save it in the array
	for(index=0;index<MAX_INPUT_CHAR;index++)
     c8c:	ec 14       	cp	r14, r12
     c8e:	fd 04       	cpc	r15, r13
     c90:	09 f0       	breq	.+2      	; 0xc94 <__stack+0x435>
     c92:	52 ce       	rjmp	.-860    	; 0x938 <__stack+0xd9>
	//loop the array if operand push to stack
	//else if operator pop op2 and op1 accumelate
	PROCESSING_DATA_TYPE temp,op1,op2;
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
     c94:	fe 01       	movw	r30, r28
     c96:	31 96       	adiw	r30, 0x01	; 1
     c98:	86 e4       	ldi	r24, 0x46	; 70
     c9a:	df 01       	movw	r26, r30
     c9c:	1d 92       	st	X+, r1
     c9e:	8a 95       	dec	r24
     ca0:	e9 f7       	brne	.-6      	; 0xc9c <__stack+0x43d>
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	89 83       	std	Y+1, r24	; 0x01
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_post_fix_array[index];
     ca6:	80 90 5c 01 	lds	r8, 0x015C
     caa:	90 90 5d 01 	lds	r9, 0x015D
     cae:	a0 90 5e 01 	lds	r10, 0x015E
     cb2:	b0 90 5f 01 	lds	r11, 0x015F
		//exit condition
		if(temp == EQUEL_OPERATOR)
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	44 e7       	ldi	r20, 0x74	; 116
     cbc:	52 ec       	ldi	r21, 0xC2	; 194
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <__stack+0x46d>
     cca:	98 c0       	rjmp	.+304    	; 0xdfc <__stack+0x59d>
     ccc:	00 e6       	ldi	r16, 0x60	; 96
     cce:	11 e0       	ldi	r17, 0x01	; 1
ARR_STACK g_ascii_to_int_stck={255,0,{0}};
PROCESSING_DATA_TYPE g_post_fix_array[MAX_INPUT_CHAR];
u8 g_post_fix_index;
PROCESSING_DATA_TYPE final_answer=0;
//--------------------------------------------------------------
u8 u8ProcessingCalculate(char * dump_array)
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f0 ea       	ldi	r31, 0xA0	; 160
     cd4:	ef 2e       	mov	r14, r31
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	ff 2e       	mov	r15, r31
     cda:	f0 2d       	mov	r31, r0
     cdc:	11 c0       	rjmp	.+34     	; 0xd00 <__stack+0x4a1>
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		temp=g_post_fix_array[index];
     cde:	f8 01       	movw	r30, r16
     ce0:	81 90       	ld	r8, Z+
     ce2:	91 90       	ld	r9, Z+
     ce4:	a1 90       	ld	r10, Z+
     ce6:	b1 90       	ld	r11, Z+
     ce8:	8f 01       	movw	r16, r30
		//exit condition
		if(temp == EQUEL_OPERATOR)
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	44 e7       	ldi	r20, 0x74	; 116
     cf0:	52 ec       	ldi	r21, 0xC2	; 194
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f4       	brne	.+2      	; 0xd00 <__stack+0x4a1>
     cfe:	7e c0       	rjmp	.+252    	; 0xdfc <__stack+0x59d>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	4c e2       	ldi	r20, 0x2C	; 44
     d06:	52 ec       	ldi	r21, 0xC2	; 194
     d08:	c5 01       	movw	r24, r10
     d0a:	b4 01       	movw	r22, r8
     d0c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <__stack+0x4b7>
     d14:	62 c0       	rjmp	.+196    	; 0xdda <__stack+0x57b>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	44 e3       	ldi	r20, 0x34	; 52
     d1c:	52 ec       	ldi	r21, 0xC2	; 194
     d1e:	c5 01       	movw	r24, r10
     d20:	b4 01       	movw	r22, r8
     d22:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     d26:	88 23       	and	r24, r24
     d28:	49 f1       	breq	.+82     	; 0xd7c <__stack+0x51d>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	48 e2       	ldi	r20, 0x28	; 40
     d30:	52 ec       	ldi	r21, 0xC2	; 194
     d32:	c5 01       	movw	r24, r10
     d34:	b4 01       	movw	r22, r8
     d36:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	71 f1       	breq	.+92     	; 0xd9a <__stack+0x53b>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4c e3       	ldi	r20, 0x3C	; 60
     d44:	52 ec       	ldi	r21, 0xC2	; 194
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     d4e:	88 23       	and	r24, r24
     d50:	a9 f1       	breq	.+106    	; 0xdbc <__stack+0x55d>
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <__stack+0x507>
		{
			op2=SDTStackPop(&operand_stack);
			op1=SDTStackPop(&operand_stack);
			accumelator= PDTOperation(op1,op2,temp);
			vStackPush(&operand_stack,accumelator);//push it to stack
     d54:	46 2f       	mov	r20, r22
     d56:	57 2f       	mov	r21, r23
     d58:	68 2f       	mov	r22, r24
     d5a:	79 2f       	mov	r23, r25
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <__stack+0x513>
		}
		else
		{
			vStackPush(&operand_stack,temp);
     d66:	b5 01       	movw	r22, r10
     d68:	a4 01       	movw	r20, r8
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <vStackPush>
	//else if operator pop op2 and op1 accumelate
	PROCESSING_DATA_TYPE temp,op1,op2;
	PROCESSING_DATA_TYPE accumelator=0;
	s32 index;
	ARR_STACK operand_stack={255,0,{0}} ;
	for(index=0;index<MAX_INPUT_CHAR;index++)
     d72:	0e 15       	cp	r16, r14
     d74:	1f 05       	cpc	r17, r15
     d76:	09 f0       	breq	.+2      	; 0xd7a <__stack+0x51b>
     d78:	b2 cf       	rjmp	.-156    	; 0xcde <__stack+0x47f>
     d7a:	40 c0       	rjmp	.+128    	; 0xdfc <__stack+0x59d>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     d84:	4b 01       	movw	r8, r22
     d86:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
PROCESSING_DATA_TYPE PDTOperation(PROCESSING_DATA_TYPE op1,PROCESSING_DATA_TYPE op2,PROCESSING_DATA_TYPE temp)
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
     d90:	a5 01       	movw	r20, r10
     d92:	94 01       	movw	r18, r8
     d94:	0e 94 ff 07 	call	0xffe	; 0xffe <__subsf3>
     d98:	dd cf       	rjmp	.-70     	; 0xd54 <__stack+0x4f5>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     da2:	4b 01       	movw	r8, r22
     da4:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
		case MULTIPLY_OPERATOR :return op1 * op2 ;
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 86 09 	call	0x130c	; 0x130c <__mulsf3>
     dba:	cc cf       	rjmp	.-104    	; 0xd54 <__stack+0x4f5>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
		case MINUS_OPERATOR :return op1 - op2 ;
		case MULTIPLY_OPERATOR :return op1 * op2 ;
		case DIVISOIN_OPERATOR :return op1 / op2 ;
     dd0:	a5 01       	movw	r20, r10
     dd2:	94 01       	movw	r18, r8
     dd4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divsf3>
     dd8:	bd cf       	rjmp	.-134    	; 0xd54 <__stack+0x4f5>
		{
			break;
		}
		else if((temp == PLUS_OPERATOR) || (temp == MINUS_OPERATOR) || (temp == MULTIPLY_OPERATOR) || (temp == DIVISOIN_OPERATOR))
		{
			op2=SDTStackPop(&operand_stack);
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     de2:	4b 01       	movw	r8, r22
     de4:	5c 01       	movw	r10, r24
			op1=SDTStackPop(&operand_stack);
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 c0 07 	call	0xf80	; 0xf80 <SDTStackPop>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
//----------------------------------------------------------------
PROCESSING_DATA_TYPE PDTOperation(PROCESSING_DATA_TYPE op1,PROCESSING_DATA_TYPE op2,PROCESSING_DATA_TYPE temp)
{
	switch((s64)temp)
	{
		case PLUS_OPERATOR :return op1 + op2 ;
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	0e 94 00 08 	call	0x1000	; 0x1000 <__addsf3>
     dfa:	ac cf       	rjmp	.-168    	; 0xd54 <__stack+0x4f5>
		else
		{
			vStackPush(&operand_stack,temp);
		}
	}
	return SDTStackTop(&operand_stack);
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SDTStackTop>
	//ascii char to int
	vAsciiToInt(dump_array);
	//infix to postfix
	vInfixToPostfix();  //error change operators to well defined data
	//evaluate postfix
	final_answer=PDTEvaluatePostfix();
     e04:	60 93 58 01 	sts	0x0158, r22
     e08:	70 93 59 01 	sts	0x0159, r23
     e0c:	80 93 5a 01 	sts	0x015A, r24
     e10:	90 93 5b 01 	sts	0x015B, r25
	return 0; //no error
	//set output or error
}
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	c8 5a       	subi	r28, 0xA8	; 168
     e18:	df 4f       	sbci	r29, 0xFF	; 255
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	bf 90       	pop	r11
     e36:	af 90       	pop	r10
     e38:	9f 90       	pop	r9
     e3a:	8f 90       	pop	r8
     e3c:	7f 90       	pop	r7
     e3e:	6f 90       	pop	r6
     e40:	5f 90       	pop	r5
     e42:	4f 90       	pop	r4
     e44:	2f 90       	pop	r2
     e46:	08 95       	ret

00000e48 <u8ProcessingFloatToString>:
	}
	return 0;
}
//---------------------------------------------------------------
u8 u8ProcessingFloatToString(char * dump_array,u8 result_format)
{
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
	//float to string
	//check format to make configuration state
	//if float format exceed change to E format 
	if(result_format==RESULT_FLOAT_FORMAT)
     e5a:	61 11       	cpse	r22, r1
     e5c:	2c c0       	rjmp	.+88     	; 0xeb6 <u8ProcessingFloatToString+0x6e>
	{
		if(final_answer > MAX_FLOAT_FORMAT || final_answer < (MAX_FLOAT_FORMAT*(-1)) )
     e5e:	c0 90 58 01 	lds	r12, 0x0158
     e62:	d0 90 59 01 	lds	r13, 0x0159
     e66:	e0 90 5a 01 	lds	r14, 0x015A
     e6a:	f0 90 5b 01 	lds	r15, 0x015B
     e6e:	20 e8       	ldi	r18, 0x80	; 128
     e70:	36 e9       	ldi	r19, 0x96	; 150
     e72:	48 e1       	ldi	r20, 0x18	; 24
     e74:	5b e4       	ldi	r21, 0x4B	; 75
     e76:	c7 01       	movw	r24, r14
     e78:	b6 01       	movw	r22, r12
     e7a:	0e 94 82 09 	call	0x1304	; 0x1304 <__gesf2>
     e7e:	18 16       	cp	r1, r24
     e80:	54 f0       	brlt	.+20     	; 0xe96 <u8ProcessingFloatToString+0x4e>
     e82:	20 e8       	ldi	r18, 0x80	; 128
     e84:	36 e9       	ldi	r19, 0x96	; 150
     e86:	48 e1       	ldi	r20, 0x18	; 24
     e88:	5b ec       	ldi	r21, 0xCB	; 203
     e8a:	c7 01       	movw	r24, r14
     e8c:	b6 01       	movw	r22, r12
     e8e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__cmpsf2>
     e92:	88 23       	and	r24, r24
     e94:	44 f4       	brge	.+16     	; 0xea6 <u8ProcessingFloatToString+0x5e>
		{
			//convert flaot to string with E notation
			dtostre(final_answer,dump_array,5,DTOSTR_ALWAYS_SIGN | DTOSTR_UPPERCASE);
     e96:	05 e0       	ldi	r16, 0x05	; 5
     e98:	25 e0       	ldi	r18, 0x05	; 5
     e9a:	ae 01       	movw	r20, r28
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <dtostre>
     ea4:	28 c0       	rjmp	.+80     	; 0xef6 <u8ProcessingFloatToString+0xae>
			*/
		}
		else
		{
			//convert flaot to string
			dtostrf((double)final_answer,1,3,dump_array);
     ea6:	8e 01       	movw	r16, r28
     ea8:	23 e0       	ldi	r18, 0x03	; 3
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <dtostrf>
     eb4:	20 c0       	rjmp	.+64     	; 0xef6 <u8ProcessingFloatToString+0xae>
		}
			
	}
	else if(result_format==RESULT_E_FORMAT)
     eb6:	61 30       	cpi	r22, 0x01	; 1
     eb8:	f1 f4       	brne	.+60     	; 0xef6 <u8ProcessingFloatToString+0xae>
	{
		//convert flaot to string with E notation
		dtostre(final_answer,dump_array,5,DTOSTR_ALWAYS_SIGN | DTOSTR_UPPERCASE);
     eba:	60 91 58 01 	lds	r22, 0x0158
     ebe:	70 91 59 01 	lds	r23, 0x0159
     ec2:	80 91 5a 01 	lds	r24, 0x015A
     ec6:	90 91 5b 01 	lds	r25, 0x015B
     eca:	05 e0       	ldi	r16, 0x05	; 5
     ecc:	25 e0       	ldi	r18, 0x05	; 5
     ece:	ae 01       	movw	r20, r28
     ed0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <dtostre>
     ed4:	10 c0       	rjmp	.+32     	; 0xef6 <u8ProcessingFloatToString+0xae>
{
	//clean up all global variables 
	u8 index;
	for(index=0;index<MAX_INPUT_CHAR;index++)
	{
		g_ascii_to_int_temp_stck.arr[index]=0;
     ed6:	11 92       	st	Z+, r1
     ed8:	11 92       	st	Z+, r1
     eda:	11 92       	st	Z+, r1
     edc:	11 92       	st	Z+, r1
		g_ascii_to_int_stck.arr[index]=0;
     ede:	19 92       	st	Y+, r1
     ee0:	19 92       	st	Y+, r1
     ee2:	19 92       	st	Y+, r1
     ee4:	19 92       	st	Y+, r1
		g_post_fix_array[index]=0;
     ee6:	1d 92       	st	X+, r1
     ee8:	1d 92       	st	X+, r1
     eea:	1d 92       	st	X+, r1
     eec:	1d 92       	st	X+, r1
//--------------------------------------------------------------------
void vclean_up(void)
{
	//clean up all global variables 
	u8 index;
	for(index=0;index<MAX_INPUT_CHAR;index++)
     eee:	e8 17       	cp	r30, r24
     ef0:	f9 07       	cpc	r31, r25
     ef2:	89 f7       	brne	.-30     	; 0xed6 <u8ProcessingFloatToString+0x8e>
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <u8ProcessingFloatToString+0xc0>
     ef6:	e8 ea       	ldi	r30, 0xA8	; 168
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	c2 e6       	ldi	r28, 0x62	; 98
     efc:	d0 e0       	ldi	r29, 0x00	; 0
     efe:	ac e5       	ldi	r26, 0x5C	; 92
     f00:	b1 e0       	ldi	r27, 0x01	; 1
		default:break;
	}
	return 0;
}
//---------------------------------------------------------------
u8 u8ProcessingFloatToString(char * dump_array,u8 result_format)
     f02:	8c ee       	ldi	r24, 0xEC	; 236
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	e7 cf       	rjmp	.-50     	; 0xed6 <u8ProcessingFloatToString+0x8e>
	{
		g_ascii_to_int_temp_stck.arr[index]=0;
		g_ascii_to_int_stck.arr[index]=0;
		g_post_fix_array[index]=0;
	}	
	g_ascii_to_int_temp_stck.items=0;
     f08:	10 92 a7 00 	sts	0x00A7, r1
	g_ascii_to_int_stck.items=0;
     f0c:	10 92 61 00 	sts	0x0061, r1
	g_ascii_to_int_temp_stck.top=0;
     f10:	10 92 a6 00 	sts	0x00A6, r1
	g_ascii_to_int_stck.top=0;
     f14:	10 92 60 00 	sts	0x0060, r1
	g_post_fix_index=0;
     f18:	10 92 a0 01 	sts	0x01A0, r1
	final_answer=0;
     f1c:	10 92 58 01 	sts	0x0158, r1
     f20:	10 92 59 01 	sts	0x0159, r1
     f24:	10 92 5a 01 	sts	0x015A, r1
     f28:	10 92 5b 01 	sts	0x015B, r1
	}
	
	vclean_up();
	return NO_PROCESSING_ERROR;

}
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	08 95       	ret

00000f40 <u8StackIsEmpty>:
//----------------------------------------------------------
#include "stack.h"
//---------------------------------------------------------
u8 u8StackIsEmpty(ARR_STACK* stk)
{
    if(stk->items==0)
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	fc 01       	movw	r30, r24
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	81 11       	cpse	r24, r1
     f48:	20 e0       	ldi	r18, 0x00	; 0
        return 1;
    else
        return 0;
}
     f4a:	82 2f       	mov	r24, r18
     f4c:	08 95       	ret

00000f4e <vStackPush>:
	else
	return 0;
}
//--------------------------------------------------------
void vStackPush(ARR_STACK* stk,STACK_DATA_TYPE data)
{
     f4e:	fc 01       	movw	r30, r24
    stk->top +=1;
     f50:	90 81       	ld	r25, Z
     f52:	89 2f       	mov	r24, r25
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 83       	st	Z, r24
    if(stk->top==STACK_SIZE)
     f58:	81 31       	cpi	r24, 0x11	; 17
     f5a:	11 f4       	brne	.+4      	; 0xf60 <vStackPush+0x12>
    {
        stk->top -=1;
     f5c:	90 83       	st	Z, r25
        return;
     f5e:	08 95       	ret
    }
    stk->arr[stk->top]=data;
     f60:	df 01       	movw	r26, r30
     f62:	94 e0       	ldi	r25, 0x04	; 4
     f64:	89 9f       	mul	r24, r25
     f66:	a0 0d       	add	r26, r0
     f68:	b1 1d       	adc	r27, r1
     f6a:	11 24       	eor	r1, r1
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	4d 93       	st	X+, r20
     f70:	5d 93       	st	X+, r21
     f72:	6d 93       	st	X+, r22
     f74:	7c 93       	st	X, r23
     f76:	15 97       	sbiw	r26, 0x05	; 5
    stk->items +=1;
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	81 83       	std	Z+1, r24	; 0x01
     f7e:	08 95       	ret

00000f80 <SDTStackPop>:
}
//------------------------------------------------------------
STACK_DATA_TYPE SDTStackPop(ARR_STACK* stk)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	fc 01       	movw	r30, r24
    if(stk->items)
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	88 23       	and	r24, r24
     f8a:	d9 f0       	breq	.+54     	; 0xfc2 <SDTStackPop+0x42>
    {
            STACK_DATA_TYPE temp=stk->arr[stk->top];
     f8c:	20 81       	ld	r18, Z
     f8e:	ef 01       	movw	r28, r30
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	29 9f       	mul	r18, r25
     f94:	c0 0d       	add	r28, r0
     f96:	d1 1d       	adc	r29, r1
     f98:	11 24       	eor	r1, r1
     f9a:	de 01       	movw	r26, r28
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	ca 81       	ldd	r28, Y+2	; 0x02
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	7c 91       	ld	r23, X
     fa4:	11 97       	sbiw	r26, 0x01	; 1
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	6c 91       	ld	r22, X
     faa:	12 97       	sbiw	r26, 0x02	; 2
     fac:	13 96       	adiw	r26, 0x03	; 3
     fae:	9c 91       	ld	r25, X
            stk->top -=1;
     fb0:	21 50       	subi	r18, 0x01	; 1
     fb2:	20 83       	st	Z, r18
            stk->items -=1;
              if(stk->top==255)
     fb4:	2f 3f       	cpi	r18, 0xFF	; 255
     fb6:	19 f0       	breq	.+6      	; 0xfbe <SDTStackPop+0x3e>
{
    if(stk->items)
    {
            STACK_DATA_TYPE temp=stk->arr[stk->top];
            stk->top -=1;
            stk->items -=1;
     fb8:	81 50       	subi	r24, 0x01	; 1
     fba:	81 83       	std	Z+1, r24	; 0x01
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <SDTStackPop+0x4a>
              if(stk->top==255)
            {
                stk->items=0;
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <SDTStackPop+0x4a>
            }
            return temp;
    }
    else
    {
        return 0;   /*garbage value*/
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
    }

}
     fca:	36 2f       	mov	r19, r22
     fcc:	6c 2f       	mov	r22, r28
     fce:	83 2f       	mov	r24, r19
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <SDTStackTop>:
//--------------------------------------------------------------------
STACK_DATA_TYPE SDTStackTop(ARR_STACK* stk)
{
    return stk->arr[stk->top];
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 81       	ld	r18, Z
     fda:	dc 01       	movw	r26, r24
     fdc:	f4 e0       	ldi	r31, 0x04	; 4
     fde:	2f 9f       	mul	r18, r31
     fe0:	a0 0d       	add	r26, r0
     fe2:	b1 1d       	adc	r27, r1
     fe4:	11 24       	eor	r1, r1
     fe6:	fd 01       	movw	r30, r26
     fe8:	32 96       	adiw	r30, 0x02	; 2
}
     fea:	12 96       	adiw	r26, 0x02	; 2
     fec:	5c 91       	ld	r21, X
     fee:	41 81       	ldd	r20, Z+1	; 0x01
     ff0:	32 81       	ldd	r19, Z+2	; 0x02
     ff2:	23 81       	ldd	r18, Z+3	; 0x03
     ff4:	65 2f       	mov	r22, r21
     ff6:	74 2f       	mov	r23, r20
     ff8:	83 2f       	mov	r24, r19
     ffa:	92 2f       	mov	r25, r18
     ffc:	08 95       	ret

00000ffe <__subsf3>:
     ffe:	50 58       	subi	r21, 0x80	; 128

00001000 <__addsf3>:
    1000:	bb 27       	eor	r27, r27
    1002:	aa 27       	eor	r26, r26
    1004:	0e d0       	rcall	.+28     	; 0x1022 <__addsf3x>
    1006:	44 c1       	rjmp	.+648    	; 0x1290 <__fp_round>
    1008:	35 d1       	rcall	.+618    	; 0x1274 <__fp_pscA>
    100a:	30 f0       	brcs	.+12     	; 0x1018 <__addsf3+0x18>
    100c:	3a d1       	rcall	.+628    	; 0x1282 <__fp_pscB>
    100e:	20 f0       	brcs	.+8      	; 0x1018 <__addsf3+0x18>
    1010:	31 f4       	brne	.+12     	; 0x101e <__addsf3+0x1e>
    1012:	9f 3f       	cpi	r25, 0xFF	; 255
    1014:	11 f4       	brne	.+4      	; 0x101a <__addsf3+0x1a>
    1016:	1e f4       	brtc	.+6      	; 0x101e <__addsf3+0x1e>
    1018:	2a c1       	rjmp	.+596    	; 0x126e <__fp_nan>
    101a:	0e f4       	brtc	.+2      	; 0x101e <__addsf3+0x1e>
    101c:	e0 95       	com	r30
    101e:	e7 fb       	bst	r30, 7
    1020:	20 c1       	rjmp	.+576    	; 0x1262 <__fp_inf>

00001022 <__addsf3x>:
    1022:	e9 2f       	mov	r30, r25
    1024:	46 d1       	rcall	.+652    	; 0x12b2 <__fp_split3>
    1026:	80 f3       	brcs	.-32     	; 0x1008 <__addsf3+0x8>
    1028:	ba 17       	cp	r27, r26
    102a:	62 07       	cpc	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	95 07       	cpc	r25, r21
    1032:	18 f0       	brcs	.+6      	; 0x103a <__addsf3x+0x18>
    1034:	71 f4       	brne	.+28     	; 0x1052 <__addsf3x+0x30>
    1036:	9e f5       	brtc	.+102    	; 0x109e <__addsf3x+0x7c>
    1038:	5e c1       	rjmp	.+700    	; 0x12f6 <__fp_zero>
    103a:	0e f4       	brtc	.+2      	; 0x103e <__addsf3x+0x1c>
    103c:	e0 95       	com	r30
    103e:	0b 2e       	mov	r0, r27
    1040:	ba 2f       	mov	r27, r26
    1042:	a0 2d       	mov	r26, r0
    1044:	0b 01       	movw	r0, r22
    1046:	b9 01       	movw	r22, r18
    1048:	90 01       	movw	r18, r0
    104a:	0c 01       	movw	r0, r24
    104c:	ca 01       	movw	r24, r20
    104e:	a0 01       	movw	r20, r0
    1050:	11 24       	eor	r1, r1
    1052:	ff 27       	eor	r31, r31
    1054:	59 1b       	sub	r21, r25
    1056:	99 f0       	breq	.+38     	; 0x107e <__addsf3x+0x5c>
    1058:	59 3f       	cpi	r21, 0xF9	; 249
    105a:	50 f4       	brcc	.+20     	; 0x1070 <__addsf3x+0x4e>
    105c:	50 3e       	cpi	r21, 0xE0	; 224
    105e:	68 f1       	brcs	.+90     	; 0x10ba <__addsf3x+0x98>
    1060:	1a 16       	cp	r1, r26
    1062:	f0 40       	sbci	r31, 0x00	; 0
    1064:	a2 2f       	mov	r26, r18
    1066:	23 2f       	mov	r18, r19
    1068:	34 2f       	mov	r19, r20
    106a:	44 27       	eor	r20, r20
    106c:	58 5f       	subi	r21, 0xF8	; 248
    106e:	f3 cf       	rjmp	.-26     	; 0x1056 <__addsf3x+0x34>
    1070:	46 95       	lsr	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	a7 95       	ror	r26
    1078:	f0 40       	sbci	r31, 0x00	; 0
    107a:	53 95       	inc	r21
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__addsf3x+0x4e>
    107e:	7e f4       	brtc	.+30     	; 0x109e <__addsf3x+0x7c>
    1080:	1f 16       	cp	r1, r31
    1082:	ba 0b       	sbc	r27, r26
    1084:	62 0b       	sbc	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	ba f0       	brmi	.+46     	; 0x10ba <__addsf3x+0x98>
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <__addsf3x+0x96>
    1090:	ff 0f       	add	r31, r31
    1092:	bb 1f       	adc	r27, r27
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	c2 f7       	brpl	.-16     	; 0x108c <__addsf3x+0x6a>
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <__addsf3x+0x98>
    109e:	ba 0f       	add	r27, r26
    10a0:	62 1f       	adc	r22, r18
    10a2:	73 1f       	adc	r23, r19
    10a4:	84 1f       	adc	r24, r20
    10a6:	48 f4       	brcc	.+18     	; 0x10ba <__addsf3x+0x98>
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f7 95       	ror	r31
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <__addsf3x+0x96>
    10b6:	b3 cf       	rjmp	.-154    	; 0x101e <__addsf3+0x1e>
    10b8:	93 95       	inc	r25
    10ba:	88 0f       	add	r24, r24
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__addsf3x+0x9e>
    10be:	99 27       	eor	r25, r25
    10c0:	ee 0f       	add	r30, r30
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	08 95       	ret

000010c8 <__cmpsf2>:
    10c8:	a8 d0       	rcall	.+336    	; 0x121a <__fp_cmp>
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__cmpsf2+0x6>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	08 95       	ret

000010d0 <__divsf3>:
    10d0:	0c d0       	rcall	.+24     	; 0x10ea <__divsf3x>
    10d2:	de c0       	rjmp	.+444    	; 0x1290 <__fp_round>
    10d4:	d6 d0       	rcall	.+428    	; 0x1282 <__fp_pscB>
    10d6:	40 f0       	brcs	.+16     	; 0x10e8 <__divsf3+0x18>
    10d8:	cd d0       	rcall	.+410    	; 0x1274 <__fp_pscA>
    10da:	30 f0       	brcs	.+12     	; 0x10e8 <__divsf3+0x18>
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <__divsf3+0x16>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <__divsf3+0x18>
    10e2:	bf c0       	rjmp	.+382    	; 0x1262 <__fp_inf>
    10e4:	51 11       	cpse	r21, r1
    10e6:	08 c1       	rjmp	.+528    	; 0x12f8 <__fp_szero>
    10e8:	c2 c0       	rjmp	.+388    	; 0x126e <__fp_nan>

000010ea <__divsf3x>:
    10ea:	e3 d0       	rcall	.+454    	; 0x12b2 <__fp_split3>
    10ec:	98 f3       	brcs	.-26     	; 0x10d4 <__divsf3+0x4>

000010ee <__divsf3_pse>:
    10ee:	99 23       	and	r25, r25
    10f0:	c9 f3       	breq	.-14     	; 0x10e4 <__divsf3+0x14>
    10f2:	55 23       	and	r21, r21
    10f4:	b1 f3       	breq	.-20     	; 0x10e2 <__divsf3+0x12>
    10f6:	95 1b       	sub	r25, r21
    10f8:	55 0b       	sbc	r21, r21
    10fa:	bb 27       	eor	r27, r27
    10fc:	aa 27       	eor	r26, r26
    10fe:	62 17       	cp	r22, r18
    1100:	73 07       	cpc	r23, r19
    1102:	84 07       	cpc	r24, r20
    1104:	38 f0       	brcs	.+14     	; 0x1114 <__divsf3_pse+0x26>
    1106:	9f 5f       	subi	r25, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	44 1f       	adc	r20, r20
    1110:	aa 1f       	adc	r26, r26
    1112:	a9 f3       	breq	.-22     	; 0x10fe <__divsf3_pse+0x10>
    1114:	33 d0       	rcall	.+102    	; 0x117c <__divsf3_pse+0x8e>
    1116:	0e 2e       	mov	r0, r30
    1118:	3a f0       	brmi	.+14     	; 0x1128 <__divsf3_pse+0x3a>
    111a:	e0 e8       	ldi	r30, 0x80	; 128
    111c:	30 d0       	rcall	.+96     	; 0x117e <__divsf3_pse+0x90>
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	e6 95       	lsr	r30
    1124:	00 1c       	adc	r0, r0
    1126:	ca f7       	brpl	.-14     	; 0x111a <__divsf3_pse+0x2c>
    1128:	29 d0       	rcall	.+82     	; 0x117c <__divsf3_pse+0x8e>
    112a:	fe 2f       	mov	r31, r30
    112c:	27 d0       	rcall	.+78     	; 0x117c <__divsf3_pse+0x8e>
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	88 1f       	adc	r24, r24
    1134:	bb 1f       	adc	r27, r27
    1136:	26 17       	cp	r18, r22
    1138:	37 07       	cpc	r19, r23
    113a:	48 07       	cpc	r20, r24
    113c:	ab 07       	cpc	r26, r27
    113e:	b0 e8       	ldi	r27, 0x80	; 128
    1140:	09 f0       	breq	.+2      	; 0x1144 <__divsf3_pse+0x56>
    1142:	bb 0b       	sbc	r27, r27
    1144:	80 2d       	mov	r24, r0
    1146:	bf 01       	movw	r22, r30
    1148:	ff 27       	eor	r31, r31
    114a:	93 58       	subi	r25, 0x83	; 131
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
    114e:	2a f0       	brmi	.+10     	; 0x115a <__divsf3_pse+0x6c>
    1150:	9e 3f       	cpi	r25, 0xFE	; 254
    1152:	51 05       	cpc	r21, r1
    1154:	68 f0       	brcs	.+26     	; 0x1170 <__divsf3_pse+0x82>
    1156:	85 c0       	rjmp	.+266    	; 0x1262 <__fp_inf>
    1158:	cf c0       	rjmp	.+414    	; 0x12f8 <__fp_szero>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	ec f3       	brlt	.-6      	; 0x1158 <__divsf3_pse+0x6a>
    115e:	98 3e       	cpi	r25, 0xE8	; 232
    1160:	dc f3       	brlt	.-10     	; 0x1158 <__divsf3_pse+0x6a>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f7 95       	ror	r31
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__divsf3_pse+0x74>
    1170:	88 0f       	add	r24, r24
    1172:	91 1d       	adc	r25, r1
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret
    117c:	e1 e0       	ldi	r30, 0x01	; 1
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	bb 1f       	adc	r27, r27
    1186:	62 17       	cp	r22, r18
    1188:	73 07       	cpc	r23, r19
    118a:	84 07       	cpc	r24, r20
    118c:	ba 07       	cpc	r27, r26
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__divsf3_pse+0xaa>
    1190:	62 1b       	sub	r22, r18
    1192:	73 0b       	sbc	r23, r19
    1194:	84 0b       	sbc	r24, r20
    1196:	ba 0b       	sbc	r27, r26
    1198:	ee 1f       	adc	r30, r30
    119a:	88 f7       	brcc	.-30     	; 0x117e <__divsf3_pse+0x90>
    119c:	e0 95       	com	r30
    119e:	08 95       	ret

000011a0 <__floatunsisf>:
    11a0:	e8 94       	clt
    11a2:	09 c0       	rjmp	.+18     	; 0x11b6 <__floatsisf+0x12>

000011a4 <__floatsisf>:
    11a4:	97 fb       	bst	r25, 7
    11a6:	3e f4       	brtc	.+14     	; 0x11b6 <__floatsisf+0x12>
    11a8:	90 95       	com	r25
    11aa:	80 95       	com	r24
    11ac:	70 95       	com	r23
    11ae:	61 95       	neg	r22
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	8f 4f       	sbci	r24, 0xFF	; 255
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	99 23       	and	r25, r25
    11b8:	a9 f0       	breq	.+42     	; 0x11e4 <__floatsisf+0x40>
    11ba:	f9 2f       	mov	r31, r25
    11bc:	96 e9       	ldi	r25, 0x96	; 150
    11be:	bb 27       	eor	r27, r27
    11c0:	93 95       	inc	r25
    11c2:	f6 95       	lsr	r31
    11c4:	87 95       	ror	r24
    11c6:	77 95       	ror	r23
    11c8:	67 95       	ror	r22
    11ca:	b7 95       	ror	r27
    11cc:	f1 11       	cpse	r31, r1
    11ce:	f8 cf       	rjmp	.-16     	; 0x11c0 <__floatsisf+0x1c>
    11d0:	fa f4       	brpl	.+62     	; 0x1210 <__floatsisf+0x6c>
    11d2:	bb 0f       	add	r27, r27
    11d4:	11 f4       	brne	.+4      	; 0x11da <__floatsisf+0x36>
    11d6:	60 ff       	sbrs	r22, 0
    11d8:	1b c0       	rjmp	.+54     	; 0x1210 <__floatsisf+0x6c>
    11da:	6f 5f       	subi	r22, 0xFF	; 255
    11dc:	7f 4f       	sbci	r23, 0xFF	; 255
    11de:	8f 4f       	sbci	r24, 0xFF	; 255
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	16 c0       	rjmp	.+44     	; 0x1210 <__floatsisf+0x6c>
    11e4:	88 23       	and	r24, r24
    11e6:	11 f0       	breq	.+4      	; 0x11ec <__floatsisf+0x48>
    11e8:	96 e9       	ldi	r25, 0x96	; 150
    11ea:	11 c0       	rjmp	.+34     	; 0x120e <__floatsisf+0x6a>
    11ec:	77 23       	and	r23, r23
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <__floatsisf+0x54>
    11f0:	9e e8       	ldi	r25, 0x8E	; 142
    11f2:	87 2f       	mov	r24, r23
    11f4:	76 2f       	mov	r23, r22
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <__floatsisf+0x5e>
    11f8:	66 23       	and	r22, r22
    11fa:	71 f0       	breq	.+28     	; 0x1218 <__floatsisf+0x74>
    11fc:	96 e8       	ldi	r25, 0x86	; 134
    11fe:	86 2f       	mov	r24, r22
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	2a f0       	brmi	.+10     	; 0x1210 <__floatsisf+0x6c>
    1206:	9a 95       	dec	r25
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	da f7       	brpl	.-10     	; 0x1206 <__floatsisf+0x62>
    1210:	88 0f       	add	r24, r24
    1212:	96 95       	lsr	r25
    1214:	87 95       	ror	r24
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret

0000121a <__fp_cmp>:
    121a:	99 0f       	add	r25, r25
    121c:	00 08       	sbc	r0, r0
    121e:	55 0f       	add	r21, r21
    1220:	aa 0b       	sbc	r26, r26
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	fe ef       	ldi	r31, 0xFE	; 254
    1226:	16 16       	cp	r1, r22
    1228:	17 06       	cpc	r1, r23
    122a:	e8 07       	cpc	r30, r24
    122c:	f9 07       	cpc	r31, r25
    122e:	c0 f0       	brcs	.+48     	; 0x1260 <__fp_cmp+0x46>
    1230:	12 16       	cp	r1, r18
    1232:	13 06       	cpc	r1, r19
    1234:	e4 07       	cpc	r30, r20
    1236:	f5 07       	cpc	r31, r21
    1238:	98 f0       	brcs	.+38     	; 0x1260 <__fp_cmp+0x46>
    123a:	62 1b       	sub	r22, r18
    123c:	73 0b       	sbc	r23, r19
    123e:	84 0b       	sbc	r24, r20
    1240:	95 0b       	sbc	r25, r21
    1242:	39 f4       	brne	.+14     	; 0x1252 <__fp_cmp+0x38>
    1244:	0a 26       	eor	r0, r26
    1246:	61 f0       	breq	.+24     	; 0x1260 <__fp_cmp+0x46>
    1248:	23 2b       	or	r18, r19
    124a:	24 2b       	or	r18, r20
    124c:	25 2b       	or	r18, r21
    124e:	21 f4       	brne	.+8      	; 0x1258 <__fp_cmp+0x3e>
    1250:	08 95       	ret
    1252:	0a 26       	eor	r0, r26
    1254:	09 f4       	brne	.+2      	; 0x1258 <__fp_cmp+0x3e>
    1256:	a1 40       	sbci	r26, 0x01	; 1
    1258:	a6 95       	lsr	r26
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	81 1d       	adc	r24, r1
    125e:	81 1d       	adc	r24, r1
    1260:	08 95       	ret

00001262 <__fp_inf>:
    1262:	97 f9       	bld	r25, 7
    1264:	9f 67       	ori	r25, 0x7F	; 127
    1266:	80 e8       	ldi	r24, 0x80	; 128
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	08 95       	ret

0000126e <__fp_nan>:
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	80 ec       	ldi	r24, 0xC0	; 192
    1272:	08 95       	ret

00001274 <__fp_pscA>:
    1274:	00 24       	eor	r0, r0
    1276:	0a 94       	dec	r0
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	09 06       	cpc	r0, r25
    1280:	08 95       	ret

00001282 <__fp_pscB>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	14 06       	cpc	r1, r20
    128c:	05 06       	cpc	r0, r21
    128e:	08 95       	ret

00001290 <__fp_round>:
    1290:	09 2e       	mov	r0, r25
    1292:	03 94       	inc	r0
    1294:	00 0c       	add	r0, r0
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_round+0xc>
    1298:	88 23       	and	r24, r24
    129a:	52 f0       	brmi	.+20     	; 0x12b0 <__fp_round+0x20>
    129c:	bb 0f       	add	r27, r27
    129e:	40 f4       	brcc	.+16     	; 0x12b0 <__fp_round+0x20>
    12a0:	bf 2b       	or	r27, r31
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0x18>
    12a4:	60 ff       	sbrs	r22, 0
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__fp_round+0x20>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__fp_split3>:
    12b2:	57 fd       	sbrc	r21, 7
    12b4:	90 58       	subi	r25, 0x80	; 128
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <__fp_splitA+0x10>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	71 f0       	breq	.+28     	; 0x12dc <__fp_splitA+0x1a>
    12c0:	47 95       	ror	r20

000012c2 <__fp_splitA>:
    12c2:	88 0f       	add	r24, r24
    12c4:	97 fb       	bst	r25, 7
    12c6:	99 1f       	adc	r25, r25
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_splitA+0x20>
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	79 f0       	breq	.+30     	; 0x12ec <__fp_splitA+0x2a>
    12ce:	87 95       	ror	r24
    12d0:	08 95       	ret
    12d2:	12 16       	cp	r1, r18
    12d4:	13 06       	cpc	r1, r19
    12d6:	14 06       	cpc	r1, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	f2 cf       	rjmp	.-28     	; 0x12c0 <__fp_split3+0xe>
    12dc:	46 95       	lsr	r20
    12de:	f1 df       	rcall	.-30     	; 0x12c2 <__fp_splitA>
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__fp_splitA+0x30>
    12e2:	16 16       	cp	r1, r22
    12e4:	17 06       	cpc	r1, r23
    12e6:	18 06       	cpc	r1, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	f1 cf       	rjmp	.-30     	; 0x12ce <__fp_splitA+0xc>
    12ec:	86 95       	lsr	r24
    12ee:	71 05       	cpc	r23, r1
    12f0:	61 05       	cpc	r22, r1
    12f2:	08 94       	sec
    12f4:	08 95       	ret

000012f6 <__fp_zero>:
    12f6:	e8 94       	clt

000012f8 <__fp_szero>:
    12f8:	bb 27       	eor	r27, r27
    12fa:	66 27       	eor	r22, r22
    12fc:	77 27       	eor	r23, r23
    12fe:	cb 01       	movw	r24, r22
    1300:	97 f9       	bld	r25, 7
    1302:	08 95       	ret

00001304 <__gesf2>:
    1304:	8a df       	rcall	.-236    	; 0x121a <__fp_cmp>
    1306:	08 f4       	brcc	.+2      	; 0x130a <__gesf2+0x6>
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__mulsf3>:
    130c:	0b d0       	rcall	.+22     	; 0x1324 <__mulsf3x>
    130e:	c0 cf       	rjmp	.-128    	; 0x1290 <__fp_round>
    1310:	b1 df       	rcall	.-158    	; 0x1274 <__fp_pscA>
    1312:	28 f0       	brcs	.+10     	; 0x131e <__mulsf3+0x12>
    1314:	b6 df       	rcall	.-148    	; 0x1282 <__fp_pscB>
    1316:	18 f0       	brcs	.+6      	; 0x131e <__mulsf3+0x12>
    1318:	95 23       	and	r25, r21
    131a:	09 f0       	breq	.+2      	; 0x131e <__mulsf3+0x12>
    131c:	a2 cf       	rjmp	.-188    	; 0x1262 <__fp_inf>
    131e:	a7 cf       	rjmp	.-178    	; 0x126e <__fp_nan>
    1320:	11 24       	eor	r1, r1
    1322:	ea cf       	rjmp	.-44     	; 0x12f8 <__fp_szero>

00001324 <__mulsf3x>:
    1324:	c6 df       	rcall	.-116    	; 0x12b2 <__fp_split3>
    1326:	a0 f3       	brcs	.-24     	; 0x1310 <__mulsf3+0x4>

00001328 <__mulsf3_pse>:
    1328:	95 9f       	mul	r25, r21
    132a:	d1 f3       	breq	.-12     	; 0x1320 <__mulsf3+0x14>
    132c:	95 0f       	add	r25, r21
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	55 1f       	adc	r21, r21
    1332:	62 9f       	mul	r22, r18
    1334:	f0 01       	movw	r30, r0
    1336:	72 9f       	mul	r23, r18
    1338:	bb 27       	eor	r27, r27
    133a:	f0 0d       	add	r31, r0
    133c:	b1 1d       	adc	r27, r1
    133e:	63 9f       	mul	r22, r19
    1340:	aa 27       	eor	r26, r26
    1342:	f0 0d       	add	r31, r0
    1344:	b1 1d       	adc	r27, r1
    1346:	aa 1f       	adc	r26, r26
    1348:	64 9f       	mul	r22, r20
    134a:	66 27       	eor	r22, r22
    134c:	b0 0d       	add	r27, r0
    134e:	a1 1d       	adc	r26, r1
    1350:	66 1f       	adc	r22, r22
    1352:	82 9f       	mul	r24, r18
    1354:	22 27       	eor	r18, r18
    1356:	b0 0d       	add	r27, r0
    1358:	a1 1d       	adc	r26, r1
    135a:	62 1f       	adc	r22, r18
    135c:	73 9f       	mul	r23, r19
    135e:	b0 0d       	add	r27, r0
    1360:	a1 1d       	adc	r26, r1
    1362:	62 1f       	adc	r22, r18
    1364:	83 9f       	mul	r24, r19
    1366:	a0 0d       	add	r26, r0
    1368:	61 1d       	adc	r22, r1
    136a:	22 1f       	adc	r18, r18
    136c:	74 9f       	mul	r23, r20
    136e:	33 27       	eor	r19, r19
    1370:	a0 0d       	add	r26, r0
    1372:	61 1d       	adc	r22, r1
    1374:	23 1f       	adc	r18, r19
    1376:	84 9f       	mul	r24, r20
    1378:	60 0d       	add	r22, r0
    137a:	21 1d       	adc	r18, r1
    137c:	82 2f       	mov	r24, r18
    137e:	76 2f       	mov	r23, r22
    1380:	6a 2f       	mov	r22, r26
    1382:	11 24       	eor	r1, r1
    1384:	9f 57       	subi	r25, 0x7F	; 127
    1386:	50 40       	sbci	r21, 0x00	; 0
    1388:	8a f0       	brmi	.+34     	; 0x13ac <__mulsf3_pse+0x84>
    138a:	e1 f0       	breq	.+56     	; 0x13c4 <__mulsf3_pse+0x9c>
    138c:	88 23       	and	r24, r24
    138e:	4a f0       	brmi	.+18     	; 0x13a2 <__mulsf3_pse+0x7a>
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	bb 1f       	adc	r27, r27
    1396:	66 1f       	adc	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	91 50       	subi	r25, 0x01	; 1
    139e:	50 40       	sbci	r21, 0x00	; 0
    13a0:	a9 f7       	brne	.-22     	; 0x138c <__mulsf3_pse+0x64>
    13a2:	9e 3f       	cpi	r25, 0xFE	; 254
    13a4:	51 05       	cpc	r21, r1
    13a6:	70 f0       	brcs	.+28     	; 0x13c4 <__mulsf3_pse+0x9c>
    13a8:	5c cf       	rjmp	.-328    	; 0x1262 <__fp_inf>
    13aa:	a6 cf       	rjmp	.-180    	; 0x12f8 <__fp_szero>
    13ac:	5f 3f       	cpi	r21, 0xFF	; 255
    13ae:	ec f3       	brlt	.-6      	; 0x13aa <__mulsf3_pse+0x82>
    13b0:	98 3e       	cpi	r25, 0xE8	; 232
    13b2:	dc f3       	brlt	.-10     	; 0x13aa <__mulsf3_pse+0x82>
    13b4:	86 95       	lsr	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f7 95       	ror	r31
    13be:	e7 95       	ror	r30
    13c0:	9f 5f       	subi	r25, 0xFF	; 255
    13c2:	c1 f7       	brne	.-16     	; 0x13b4 <__mulsf3_pse+0x8c>
    13c4:	fe 2b       	or	r31, r30
    13c6:	88 0f       	add	r24, r24
    13c8:	91 1d       	adc	r25, r1
    13ca:	96 95       	lsr	r25
    13cc:	87 95       	ror	r24
    13ce:	97 f9       	bld	r25, 7
    13d0:	08 95       	ret

000013d2 <__adddi3_s8>:
    13d2:	00 24       	eor	r0, r0
    13d4:	a7 fd       	sbrc	r26, 7
    13d6:	00 94       	com	r0
    13d8:	2a 0f       	add	r18, r26
    13da:	30 1d       	adc	r19, r0
    13dc:	40 1d       	adc	r20, r0
    13de:	50 1d       	adc	r21, r0
    13e0:	60 1d       	adc	r22, r0
    13e2:	70 1d       	adc	r23, r0
    13e4:	80 1d       	adc	r24, r0
    13e6:	90 1d       	adc	r25, r0
    13e8:	08 95       	ret

000013ea <dtostre>:
    13ea:	a1 e0       	ldi	r26, 0x01	; 1
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	eb ef       	ldi	r30, 0xFB	; 251
    13f0:	f9 e0       	ldi	r31, 0x09	; 9
    13f2:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x14>
    13f6:	7a 01       	movw	r14, r20
    13f8:	10 2f       	mov	r17, r16
    13fa:	32 2f       	mov	r19, r18
    13fc:	28 30       	cpi	r18, 0x08	; 8
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <dtostre+0x18>
    1400:	37 e0       	ldi	r19, 0x07	; 7
    1402:	00 e0       	ldi	r16, 0x00	; 0
    1404:	23 2f       	mov	r18, r19
    1406:	a7 01       	movw	r20, r14
    1408:	39 83       	std	Y+1, r19	; 0x01
    140a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__ftoa_engine>
    140e:	d7 01       	movw	r26, r14
    1410:	9c 91       	ld	r25, X
    1412:	39 81       	ldd	r19, Y+1	; 0x01
    1414:	f7 01       	movw	r30, r14
    1416:	90 ff       	sbrs	r25, 0
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <dtostre+0x38>
    141a:	93 fd       	sbrc	r25, 3
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <dtostre+0x38>
    141e:	2d e2       	ldi	r18, 0x2D	; 45
    1420:	07 c0       	rjmp	.+14     	; 0x1430 <dtostre+0x46>
    1422:	11 ff       	sbrs	r17, 1
    1424:	02 c0       	rjmp	.+4      	; 0x142a <dtostre+0x40>
    1426:	2b e2       	ldi	r18, 0x2B	; 43
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <dtostre+0x46>
    142a:	10 ff       	sbrs	r17, 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <dtostre+0x48>
    142e:	20 e2       	ldi	r18, 0x20	; 32
    1430:	21 93       	st	Z+, r18
    1432:	93 fd       	sbrc	r25, 3
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <dtostre+0x56>
    1436:	92 ff       	sbrs	r25, 2
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <dtostre+0x6a>
    143a:	6c e5       	ldi	r22, 0x5C	; 92
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <dtostre+0x5a>
    1440:	64 e5       	ldi	r22, 0x54	; 84
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	12 ff       	sbrs	r17, 2
    1446:	02 c0       	rjmp	.+4      	; 0x144c <dtostre+0x62>
    1448:	6c 5f       	subi	r22, 0xFC	; 252
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	cf 01       	movw	r24, r30
    144e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <strcpy_P>
    1452:	42 c0       	rjmp	.+132    	; 0x14d8 <dtostre+0xee>
    1454:	d7 01       	movw	r26, r14
    1456:	11 96       	adiw	r26, 0x01	; 1
    1458:	2c 91       	ld	r18, X
    145a:	21 93       	st	Z+, r18
    145c:	21 33       	cpi	r18, 0x31	; 49
    145e:	09 f0       	breq	.+2      	; 0x1462 <dtostre+0x78>
    1460:	9f 7e       	andi	r25, 0xEF	; 239
    1462:	33 23       	and	r19, r19
    1464:	c9 f0       	breq	.+50     	; 0x1498 <dtostre+0xae>
    1466:	67 01       	movw	r12, r14
    1468:	b2 e0       	ldi	r27, 0x02	; 2
    146a:	cb 0e       	add	r12, r27
    146c:	d1 1c       	adc	r13, r1
    146e:	af 01       	movw	r20, r30
    1470:	6e e2       	ldi	r22, 0x2E	; 46
    1472:	23 2f       	mov	r18, r19
    1474:	2c 0d       	add	r18, r12
    1476:	d6 01       	movw	r26, r12
    1478:	7d 91       	ld	r23, X+
    147a:	6d 01       	movw	r12, r26
    147c:	da 01       	movw	r26, r20
    147e:	6d 93       	st	X+, r22
    1480:	ad 01       	movw	r20, r26
    1482:	67 2f       	mov	r22, r23
    1484:	2c 11       	cpse	r18, r12
    1486:	f7 cf       	rjmp	.-18     	; 0x1476 <dtostre+0x8c>
    1488:	31 50       	subi	r19, 0x01	; 1
    148a:	23 2f       	mov	r18, r19
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	e2 0f       	add	r30, r18
    1494:	f3 1f       	adc	r31, r19
    1496:	71 93       	st	Z+, r23
    1498:	12 ff       	sbrs	r17, 2
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <dtostre+0xb6>
    149c:	25 e4       	ldi	r18, 0x45	; 69
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <dtostre+0xb8>
    14a0:	25 e6       	ldi	r18, 0x65	; 101
    14a2:	20 83       	st	Z, r18
    14a4:	87 ff       	sbrs	r24, 7
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <dtostre+0xc8>
    14a8:	9d e2       	ldi	r25, 0x2D	; 45
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	32 96       	adiw	r30, 0x02	; 2
    14ae:	81 95       	neg	r24
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <dtostre+0xda>
    14b2:	81 11       	cpse	r24, r1
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <dtostre+0xd4>
    14b6:	94 ff       	sbrs	r25, 4
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <dtostre+0xd4>
    14ba:	9d e2       	ldi	r25, 0x2D	; 45
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <dtostre+0xd6>
    14be:	9b e2       	ldi	r25, 0x2B	; 43
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	32 96       	adiw	r30, 0x02	; 2
    14c4:	90 e3       	ldi	r25, 0x30	; 48
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <dtostre+0xe2>
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	8a 50       	subi	r24, 0x0A	; 10
    14cc:	8a 30       	cpi	r24, 0x0A	; 10
    14ce:	e4 f7       	brge	.-8      	; 0x14c8 <dtostre+0xde>
    14d0:	90 83       	st	Z, r25
    14d2:	80 5d       	subi	r24, 0xD0	; 208
    14d4:	81 83       	std	Z+1, r24	; 0x01
    14d6:	12 82       	std	Z+2, r1	; 0x02
    14d8:	c7 01       	movw	r24, r14
    14da:	21 96       	adiw	r28, 0x01	; 1
    14dc:	e8 e0       	ldi	r30, 0x08	; 8
    14de:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x14>

000014e2 <dtostrf>:
    14e2:	ef 92       	push	r14
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	c0 2f       	mov	r28, r16
    14ec:	47 ff       	sbrs	r20, 7
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <dtostrf+0x12>
    14f0:	34 e1       	ldi	r19, 0x14	; 20
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <dtostrf+0x14>
    14f4:	34 e0       	ldi	r19, 0x04	; 4
    14f6:	e4 2f       	mov	r30, r20
    14f8:	ff 27       	eor	r31, r31
    14fa:	e7 fd       	sbrc	r30, 7
    14fc:	f0 95       	com	r31
    14fe:	f7 ff       	sbrs	r31, 7
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <dtostrf+0x26>
    1502:	f1 95       	neg	r31
    1504:	e1 95       	neg	r30
    1506:	f1 09       	sbc	r31, r1
    1508:	e3 2e       	mov	r14, r19
    150a:	02 2f       	mov	r16, r18
    150c:	2e 2f       	mov	r18, r30
    150e:	4c 2f       	mov	r20, r28
    1510:	51 2f       	mov	r21, r17
    1512:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <dtoa_prf>
    1516:	8c 2f       	mov	r24, r28
    1518:	91 2f       	mov	r25, r17
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ef 90       	pop	r14
    1522:	08 95       	ret

00001524 <__ftoa_engine>:
    1524:	28 30       	cpi	r18, 0x08	; 8
    1526:	08 f0       	brcs	.+2      	; 0x152a <__ftoa_engine+0x6>
    1528:	27 e0       	ldi	r18, 0x07	; 7
    152a:	33 27       	eor	r19, r19
    152c:	da 01       	movw	r26, r20
    152e:	99 0f       	add	r25, r25
    1530:	31 1d       	adc	r19, r1
    1532:	87 fd       	sbrc	r24, 7
    1534:	91 60       	ori	r25, 0x01	; 1
    1536:	00 96       	adiw	r24, 0x00	; 0
    1538:	61 05       	cpc	r22, r1
    153a:	71 05       	cpc	r23, r1
    153c:	39 f4       	brne	.+14     	; 0x154c <__ftoa_engine+0x28>
    153e:	32 60       	ori	r19, 0x02	; 2
    1540:	2e 5f       	subi	r18, 0xFE	; 254
    1542:	3d 93       	st	X+, r19
    1544:	30 e3       	ldi	r19, 0x30	; 48
    1546:	2a 95       	dec	r18
    1548:	e1 f7       	brne	.-8      	; 0x1542 <__ftoa_engine+0x1e>
    154a:	08 95       	ret
    154c:	9f 3f       	cpi	r25, 0xFF	; 255
    154e:	30 f0       	brcs	.+12     	; 0x155c <__ftoa_engine+0x38>
    1550:	80 38       	cpi	r24, 0x80	; 128
    1552:	71 05       	cpc	r23, r1
    1554:	61 05       	cpc	r22, r1
    1556:	09 f0       	breq	.+2      	; 0x155a <__ftoa_engine+0x36>
    1558:	3c 5f       	subi	r19, 0xFC	; 252
    155a:	3c 5f       	subi	r19, 0xFC	; 252
    155c:	3d 93       	st	X+, r19
    155e:	91 30       	cpi	r25, 0x01	; 1
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__ftoa_engine+0x40>
    1562:	80 68       	ori	r24, 0x80	; 128
    1564:	91 1d       	adc	r25, r1
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	1f 93       	push	r17
    156c:	0f 93       	push	r16
    156e:	ff 92       	push	r15
    1570:	ef 92       	push	r14
    1572:	19 2f       	mov	r17, r25
    1574:	98 7f       	andi	r25, 0xF8	; 248
    1576:	96 95       	lsr	r25
    1578:	e9 2f       	mov	r30, r25
    157a:	96 95       	lsr	r25
    157c:	96 95       	lsr	r25
    157e:	e9 0f       	add	r30, r25
    1580:	ff 27       	eor	r31, r31
    1582:	e2 54       	subi	r30, 0x42	; 66
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	99 27       	eor	r25, r25
    1588:	33 27       	eor	r19, r19
    158a:	ee 24       	eor	r14, r14
    158c:	ff 24       	eor	r15, r15
    158e:	a7 01       	movw	r20, r14
    1590:	e7 01       	movw	r28, r14
    1592:	05 90       	lpm	r0, Z+
    1594:	08 94       	sec
    1596:	07 94       	ror	r0
    1598:	28 f4       	brcc	.+10     	; 0x15a4 <__ftoa_engine+0x80>
    159a:	36 0f       	add	r19, r22
    159c:	e7 1e       	adc	r14, r23
    159e:	f8 1e       	adc	r15, r24
    15a0:	49 1f       	adc	r20, r25
    15a2:	51 1d       	adc	r21, r1
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	06 94       	lsr	r0
    15ae:	a1 f7       	brne	.-24     	; 0x1598 <__ftoa_engine+0x74>
    15b0:	05 90       	lpm	r0, Z+
    15b2:	07 94       	ror	r0
    15b4:	28 f4       	brcc	.+10     	; 0x15c0 <__ftoa_engine+0x9c>
    15b6:	e7 0e       	add	r14, r23
    15b8:	f8 1e       	adc	r15, r24
    15ba:	49 1f       	adc	r20, r25
    15bc:	56 1f       	adc	r21, r22
    15be:	c1 1d       	adc	r28, r1
    15c0:	77 0f       	add	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	66 1f       	adc	r22, r22
    15c8:	06 94       	lsr	r0
    15ca:	a1 f7       	brne	.-24     	; 0x15b4 <__ftoa_engine+0x90>
    15cc:	05 90       	lpm	r0, Z+
    15ce:	07 94       	ror	r0
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <__ftoa_engine+0xb8>
    15d2:	f8 0e       	add	r15, r24
    15d4:	49 1f       	adc	r20, r25
    15d6:	56 1f       	adc	r21, r22
    15d8:	c7 1f       	adc	r28, r23
    15da:	d1 1d       	adc	r29, r1
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	66 1f       	adc	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	06 94       	lsr	r0
    15e6:	a1 f7       	brne	.-24     	; 0x15d0 <__ftoa_engine+0xac>
    15e8:	05 90       	lpm	r0, Z+
    15ea:	07 94       	ror	r0
    15ec:	20 f4       	brcc	.+8      	; 0x15f6 <__ftoa_engine+0xd2>
    15ee:	49 0f       	add	r20, r25
    15f0:	56 1f       	adc	r21, r22
    15f2:	c7 1f       	adc	r28, r23
    15f4:	d8 1f       	adc	r29, r24
    15f6:	99 0f       	add	r25, r25
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	06 94       	lsr	r0
    1600:	a9 f7       	brne	.-22     	; 0x15ec <__ftoa_engine+0xc8>
    1602:	84 91       	lpm	r24, Z
    1604:	10 95       	com	r17
    1606:	17 70       	andi	r17, 0x07	; 7
    1608:	41 f0       	breq	.+16     	; 0x161a <__ftoa_engine+0xf6>
    160a:	d6 95       	lsr	r29
    160c:	c7 95       	ror	r28
    160e:	57 95       	ror	r21
    1610:	47 95       	ror	r20
    1612:	f7 94       	ror	r15
    1614:	e7 94       	ror	r14
    1616:	1a 95       	dec	r17
    1618:	c1 f7       	brne	.-16     	; 0x160a <__ftoa_engine+0xe6>
    161a:	e4 e6       	ldi	r30, 0x64	; 100
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	68 94       	set
    1620:	15 90       	lpm	r1, Z+
    1622:	15 91       	lpm	r17, Z+
    1624:	35 91       	lpm	r19, Z+
    1626:	65 91       	lpm	r22, Z+
    1628:	95 91       	lpm	r25, Z+
    162a:	05 90       	lpm	r0, Z+
    162c:	7f e2       	ldi	r23, 0x2F	; 47
    162e:	73 95       	inc	r23
    1630:	e1 18       	sub	r14, r1
    1632:	f1 0a       	sbc	r15, r17
    1634:	43 0b       	sbc	r20, r19
    1636:	56 0b       	sbc	r21, r22
    1638:	c9 0b       	sbc	r28, r25
    163a:	d0 09       	sbc	r29, r0
    163c:	c0 f7       	brcc	.-16     	; 0x162e <__ftoa_engine+0x10a>
    163e:	e1 0c       	add	r14, r1
    1640:	f1 1e       	adc	r15, r17
    1642:	43 1f       	adc	r20, r19
    1644:	56 1f       	adc	r21, r22
    1646:	c9 1f       	adc	r28, r25
    1648:	d0 1d       	adc	r29, r0
    164a:	7e f4       	brtc	.+30     	; 0x166a <__ftoa_engine+0x146>
    164c:	70 33       	cpi	r23, 0x30	; 48
    164e:	11 f4       	brne	.+4      	; 0x1654 <__ftoa_engine+0x130>
    1650:	8a 95       	dec	r24
    1652:	e6 cf       	rjmp	.-52     	; 0x1620 <__ftoa_engine+0xfc>
    1654:	e8 94       	clt
    1656:	01 50       	subi	r16, 0x01	; 1
    1658:	30 f0       	brcs	.+12     	; 0x1666 <__ftoa_engine+0x142>
    165a:	08 0f       	add	r16, r24
    165c:	0a f4       	brpl	.+2      	; 0x1660 <__ftoa_engine+0x13c>
    165e:	00 27       	eor	r16, r16
    1660:	02 17       	cp	r16, r18
    1662:	08 f4       	brcc	.+2      	; 0x1666 <__ftoa_engine+0x142>
    1664:	20 2f       	mov	r18, r16
    1666:	23 95       	inc	r18
    1668:	02 2f       	mov	r16, r18
    166a:	7a 33       	cpi	r23, 0x3A	; 58
    166c:	28 f0       	brcs	.+10     	; 0x1678 <__ftoa_engine+0x154>
    166e:	79 e3       	ldi	r23, 0x39	; 57
    1670:	7d 93       	st	X+, r23
    1672:	2a 95       	dec	r18
    1674:	e9 f7       	brne	.-6      	; 0x1670 <__ftoa_engine+0x14c>
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <__ftoa_engine+0x174>
    1678:	7d 93       	st	X+, r23
    167a:	2a 95       	dec	r18
    167c:	89 f6       	brne	.-94     	; 0x1620 <__ftoa_engine+0xfc>
    167e:	06 94       	lsr	r0
    1680:	97 95       	ror	r25
    1682:	67 95       	ror	r22
    1684:	37 95       	ror	r19
    1686:	17 95       	ror	r17
    1688:	17 94       	ror	r1
    168a:	e1 18       	sub	r14, r1
    168c:	f1 0a       	sbc	r15, r17
    168e:	43 0b       	sbc	r20, r19
    1690:	56 0b       	sbc	r21, r22
    1692:	c9 0b       	sbc	r28, r25
    1694:	d0 09       	sbc	r29, r0
    1696:	98 f0       	brcs	.+38     	; 0x16be <__ftoa_engine+0x19a>
    1698:	23 95       	inc	r18
    169a:	7e 91       	ld	r23, -X
    169c:	73 95       	inc	r23
    169e:	7a 33       	cpi	r23, 0x3A	; 58
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__ftoa_engine+0x180>
    16a2:	70 e3       	ldi	r23, 0x30	; 48
    16a4:	7c 93       	st	X, r23
    16a6:	20 13       	cpse	r18, r16
    16a8:	b8 f7       	brcc	.-18     	; 0x1698 <__ftoa_engine+0x174>
    16aa:	7e 91       	ld	r23, -X
    16ac:	70 61       	ori	r23, 0x10	; 16
    16ae:	7d 93       	st	X+, r23
    16b0:	30 f0       	brcs	.+12     	; 0x16be <__ftoa_engine+0x19a>
    16b2:	83 95       	inc	r24
    16b4:	71 e3       	ldi	r23, 0x31	; 49
    16b6:	7d 93       	st	X+, r23
    16b8:	70 e3       	ldi	r23, 0x30	; 48
    16ba:	2a 95       	dec	r18
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <__ftoa_engine+0x192>
    16be:	11 24       	eor	r1, r1
    16c0:	ef 90       	pop	r14
    16c2:	ff 90       	pop	r15
    16c4:	0f 91       	pop	r16
    16c6:	1f 91       	pop	r17
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	99 27       	eor	r25, r25
    16ce:	87 fd       	sbrc	r24, 7
    16d0:	90 95       	com	r25
    16d2:	08 95       	ret

000016d4 <strcpy_P>:
    16d4:	fb 01       	movw	r30, r22
    16d6:	dc 01       	movw	r26, r24
    16d8:	05 90       	lpm	r0, Z+
    16da:	0d 92       	st	X+, r0
    16dc:	00 20       	and	r0, r0
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <strcpy_P+0x4>
    16e0:	08 95       	ret

000016e2 <dtoa_prf>:
    16e2:	6f 92       	push	r6
    16e4:	7f 92       	push	r7
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	29 97       	sbiw	r28, 0x09	; 9
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	6a 01       	movw	r12, r20
    170e:	b2 2e       	mov	r11, r18
    1710:	10 2f       	mov	r17, r16
    1712:	0c 33       	cpi	r16, 0x3C	; 60
    1714:	18 f4       	brcc	.+6      	; 0x171c <dtoa_prf+0x3a>
    1716:	f0 2e       	mov	r15, r16
    1718:	f3 94       	inc	r15
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <dtoa_prf+0x3e>
    171c:	5c e3       	ldi	r21, 0x3C	; 60
    171e:	f5 2e       	mov	r15, r21
    1720:	0f 2d       	mov	r16, r15
    1722:	27 e0       	ldi	r18, 0x07	; 7
    1724:	ae 01       	movw	r20, r28
    1726:	4f 5f       	subi	r20, 0xFF	; 255
    1728:	5f 4f       	sbci	r21, 0xFF	; 255
    172a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__ftoa_engine>
    172e:	79 81       	ldd	r23, Y+1	; 0x01
    1730:	27 2f       	mov	r18, r23
    1732:	29 70       	andi	r18, 0x09	; 9
    1734:	21 30       	cpi	r18, 0x01	; 1
    1736:	31 f0       	breq	.+12     	; 0x1744 <dtoa_prf+0x62>
    1738:	e1 fc       	sbrc	r14, 1
    173a:	06 c0       	rjmp	.+12     	; 0x1748 <dtoa_prf+0x66>
    173c:	e0 fe       	sbrs	r14, 0
    173e:	06 c0       	rjmp	.+12     	; 0x174c <dtoa_prf+0x6a>
    1740:	60 e2       	ldi	r22, 0x20	; 32
    1742:	05 c0       	rjmp	.+10     	; 0x174e <dtoa_prf+0x6c>
    1744:	6d e2       	ldi	r22, 0x2D	; 45
    1746:	03 c0       	rjmp	.+6      	; 0x174e <dtoa_prf+0x6c>
    1748:	6b e2       	ldi	r22, 0x2B	; 43
    174a:	01 c0       	rjmp	.+2      	; 0x174e <dtoa_prf+0x6c>
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	73 ff       	sbrs	r23, 3
    1750:	3d c0       	rjmp	.+122    	; 0x17cc <dtoa_prf+0xea>
    1752:	66 23       	and	r22, r22
    1754:	11 f0       	breq	.+4      	; 0x175a <dtoa_prf+0x78>
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	01 c0       	rjmp	.+2      	; 0x175c <dtoa_prf+0x7a>
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	8b 15       	cp	r24, r11
    175e:	10 f4       	brcc	.+4      	; 0x1764 <dtoa_prf+0x82>
    1760:	b8 1a       	sub	r11, r24
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <dtoa_prf+0x84>
    1764:	b1 2c       	mov	r11, r1
    1766:	e4 fc       	sbrc	r14, 4
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <dtoa_prf+0x9e>
    176a:	8b 2d       	mov	r24, r11
    176c:	f6 01       	movw	r30, r12
    176e:	90 e2       	ldi	r25, 0x20	; 32
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <dtoa_prf+0x94>
    1772:	91 93       	st	Z+, r25
    1774:	81 50       	subi	r24, 0x01	; 1
    1776:	81 11       	cpse	r24, r1
    1778:	fc cf       	rjmp	.-8      	; 0x1772 <dtoa_prf+0x90>
    177a:	cb 0c       	add	r12, r11
    177c:	d1 1c       	adc	r13, r1
    177e:	b1 2c       	mov	r11, r1
    1780:	66 23       	and	r22, r22
    1782:	19 f0       	breq	.+6      	; 0x178a <dtoa_prf+0xa8>
    1784:	d6 01       	movw	r26, r12
    1786:	6d 93       	st	X+, r22
    1788:	6d 01       	movw	r12, r26
    178a:	e2 fe       	sbrs	r14, 2
    178c:	0a c0       	rjmp	.+20     	; 0x17a2 <dtoa_prf+0xc0>
    178e:	8e e4       	ldi	r24, 0x4E	; 78
    1790:	f6 01       	movw	r30, r12
    1792:	80 83       	st	Z, r24
    1794:	91 e4       	ldi	r25, 0x41	; 65
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	f3 e0       	ldi	r31, 0x03	; 3
    179c:	cf 0e       	add	r12, r31
    179e:	d1 1c       	adc	r13, r1
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <dtoa_prf+0xd8>
    17a2:	8e e6       	ldi	r24, 0x6E	; 110
    17a4:	d6 01       	movw	r26, r12
    17a6:	8c 93       	st	X, r24
    17a8:	91 e6       	ldi	r25, 0x61	; 97
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	9c 93       	st	X, r25
    17ae:	11 97       	sbiw	r26, 0x01	; 1
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	8c 93       	st	X, r24
    17b4:	b3 e0       	ldi	r27, 0x03	; 3
    17b6:	cb 0e       	add	r12, r27
    17b8:	d1 1c       	adc	r13, r1
    17ba:	8b 2d       	mov	r24, r11
    17bc:	f6 01       	movw	r30, r12
    17be:	90 e2       	ldi	r25, 0x20	; 32
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <dtoa_prf+0xe4>
    17c2:	91 93       	st	Z+, r25
    17c4:	81 50       	subi	r24, 0x01	; 1
    17c6:	81 11       	cpse	r24, r1
    17c8:	fc cf       	rjmp	.-8      	; 0x17c2 <dtoa_prf+0xe0>
    17ca:	40 c0       	rjmp	.+128    	; 0x184c <dtoa_prf+0x16a>
    17cc:	72 ff       	sbrs	r23, 2
    17ce:	45 c0       	rjmp	.+138    	; 0x185a <dtoa_prf+0x178>
    17d0:	66 23       	and	r22, r22
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <dtoa_prf+0xf6>
    17d4:	84 e0       	ldi	r24, 0x04	; 4
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <dtoa_prf+0xf8>
    17d8:	83 e0       	ldi	r24, 0x03	; 3
    17da:	8b 15       	cp	r24, r11
    17dc:	10 f4       	brcc	.+4      	; 0x17e2 <dtoa_prf+0x100>
    17de:	b8 1a       	sub	r11, r24
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <dtoa_prf+0x102>
    17e2:	b1 2c       	mov	r11, r1
    17e4:	e4 fc       	sbrc	r14, 4
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <dtoa_prf+0x11c>
    17e8:	8b 2d       	mov	r24, r11
    17ea:	f6 01       	movw	r30, r12
    17ec:	90 e2       	ldi	r25, 0x20	; 32
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <dtoa_prf+0x112>
    17f0:	91 93       	st	Z+, r25
    17f2:	81 50       	subi	r24, 0x01	; 1
    17f4:	81 11       	cpse	r24, r1
    17f6:	fc cf       	rjmp	.-8      	; 0x17f0 <dtoa_prf+0x10e>
    17f8:	cb 0c       	add	r12, r11
    17fa:	d1 1c       	adc	r13, r1
    17fc:	b1 2c       	mov	r11, r1
    17fe:	66 23       	and	r22, r22
    1800:	19 f0       	breq	.+6      	; 0x1808 <dtoa_prf+0x126>
    1802:	f6 01       	movw	r30, r12
    1804:	61 93       	st	Z+, r22
    1806:	6f 01       	movw	r12, r30
    1808:	e2 fe       	sbrs	r14, 2
    180a:	0e c0       	rjmp	.+28     	; 0x1828 <dtoa_prf+0x146>
    180c:	89 e4       	ldi	r24, 0x49	; 73
    180e:	d6 01       	movw	r26, r12
    1810:	8c 93       	st	X, r24
    1812:	8e e4       	ldi	r24, 0x4E	; 78
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	8c 93       	st	X, r24
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	86 e4       	ldi	r24, 0x46	; 70
    181c:	12 96       	adiw	r26, 0x02	; 2
    181e:	8c 93       	st	X, r24
    1820:	b3 e0       	ldi	r27, 0x03	; 3
    1822:	cb 0e       	add	r12, r27
    1824:	d1 1c       	adc	r13, r1
    1826:	0a c0       	rjmp	.+20     	; 0x183c <dtoa_prf+0x15a>
    1828:	89 e6       	ldi	r24, 0x69	; 105
    182a:	f6 01       	movw	r30, r12
    182c:	80 83       	st	Z, r24
    182e:	8e e6       	ldi	r24, 0x6E	; 110
    1830:	81 83       	std	Z+1, r24	; 0x01
    1832:	86 e6       	ldi	r24, 0x66	; 102
    1834:	82 83       	std	Z+2, r24	; 0x02
    1836:	f3 e0       	ldi	r31, 0x03	; 3
    1838:	cf 0e       	add	r12, r31
    183a:	d1 1c       	adc	r13, r1
    183c:	8b 2d       	mov	r24, r11
    183e:	f6 01       	movw	r30, r12
    1840:	90 e2       	ldi	r25, 0x20	; 32
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <dtoa_prf+0x166>
    1844:	91 93       	st	Z+, r25
    1846:	81 50       	subi	r24, 0x01	; 1
    1848:	81 11       	cpse	r24, r1
    184a:	fc cf       	rjmp	.-8      	; 0x1844 <dtoa_prf+0x162>
    184c:	f6 01       	movw	r30, r12
    184e:	eb 0d       	add	r30, r11
    1850:	f1 1d       	adc	r31, r1
    1852:	10 82       	st	Z, r1
    1854:	2e ef       	ldi	r18, 0xFE	; 254
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	ac c0       	rjmp	.+344    	; 0x19b2 <dtoa_prf+0x2d0>
    185a:	a1 e0       	ldi	r26, 0x01	; 1
    185c:	61 11       	cpse	r22, r1
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <dtoa_prf+0x180>
    1860:	a0 e0       	ldi	r26, 0x00	; 0
    1862:	4a 2f       	mov	r20, r26
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	18 16       	cp	r1, r24
    1868:	19 06       	cpc	r1, r25
    186a:	24 f4       	brge	.+8      	; 0x1874 <dtoa_prf+0x192>
    186c:	9c 01       	movw	r18, r24
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <dtoa_prf+0x196>
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	24 0f       	add	r18, r20
    187a:	35 1f       	adc	r19, r21
    187c:	11 23       	and	r17, r17
    187e:	29 f0       	breq	.+10     	; 0x188a <dtoa_prf+0x1a8>
    1880:	41 2f       	mov	r20, r17
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	4f 5f       	subi	r20, 0xFF	; 255
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	02 c0       	rjmp	.+4      	; 0x188e <dtoa_prf+0x1ac>
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	42 0f       	add	r20, r18
    1890:	53 1f       	adc	r21, r19
    1892:	2b 2d       	mov	r18, r11
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	42 17       	cp	r20, r18
    1898:	53 07       	cpc	r21, r19
    189a:	14 f4       	brge	.+4      	; 0x18a0 <dtoa_prf+0x1be>
    189c:	b4 1a       	sub	r11, r20
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <dtoa_prf+0x1c0>
    18a0:	b1 2c       	mov	r11, r1
    18a2:	3e 2d       	mov	r19, r14
    18a4:	30 71       	andi	r19, 0x10	; 16
    18a6:	e4 fc       	sbrc	r14, 4
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <dtoa_prf+0x1e2>
    18aa:	e3 fc       	sbrc	r14, 3
    18ac:	0b c0       	rjmp	.+22     	; 0x18c4 <dtoa_prf+0x1e2>
    18ae:	2b 2d       	mov	r18, r11
    18b0:	f6 01       	movw	r30, r12
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <dtoa_prf+0x1d8>
    18b6:	41 93       	st	Z+, r20
    18b8:	21 50       	subi	r18, 0x01	; 1
    18ba:	21 11       	cpse	r18, r1
    18bc:	fc cf       	rjmp	.-8      	; 0x18b6 <dtoa_prf+0x1d4>
    18be:	cb 0c       	add	r12, r11
    18c0:	d1 1c       	adc	r13, r1
    18c2:	b1 2c       	mov	r11, r1
    18c4:	aa 23       	and	r26, r26
    18c6:	19 f0       	breq	.+6      	; 0x18ce <dtoa_prf+0x1ec>
    18c8:	d6 01       	movw	r26, r12
    18ca:	6d 93       	st	X+, r22
    18cc:	6d 01       	movw	r12, r26
    18ce:	31 11       	cpse	r19, r1
    18d0:	0b c0       	rjmp	.+22     	; 0x18e8 <dtoa_prf+0x206>
    18d2:	2b 2d       	mov	r18, r11
    18d4:	f6 01       	movw	r30, r12
    18d6:	30 e3       	ldi	r19, 0x30	; 48
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <dtoa_prf+0x1fc>
    18da:	31 93       	st	Z+, r19
    18dc:	21 50       	subi	r18, 0x01	; 1
    18de:	21 11       	cpse	r18, r1
    18e0:	fc cf       	rjmp	.-8      	; 0x18da <dtoa_prf+0x1f8>
    18e2:	cb 0c       	add	r12, r11
    18e4:	d1 1c       	adc	r13, r1
    18e6:	b1 2c       	mov	r11, r1
    18e8:	f8 0e       	add	r15, r24
    18ea:	0a 81       	ldd	r16, Y+2	; 0x02
    18ec:	40 e1       	ldi	r20, 0x10	; 16
    18ee:	a4 2e       	mov	r10, r20
    18f0:	a7 22       	and	r10, r23
    18f2:	74 ff       	sbrs	r23, 4
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <dtoa_prf+0x21a>
    18f6:	01 33       	cpi	r16, 0x31	; 49
    18f8:	09 f4       	brne	.+2      	; 0x18fc <dtoa_prf+0x21a>
    18fa:	fa 94       	dec	r15
    18fc:	1f 14       	cp	r1, r15
    18fe:	2c f4       	brge	.+10     	; 0x190a <dtoa_prf+0x228>
    1900:	2f 2d       	mov	r18, r15
    1902:	29 30       	cpi	r18, 0x09	; 9
    1904:	18 f0       	brcs	.+6      	; 0x190c <dtoa_prf+0x22a>
    1906:	28 e0       	ldi	r18, 0x08	; 8
    1908:	01 c0       	rjmp	.+2      	; 0x190c <dtoa_prf+0x22a>
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	ac 01       	movw	r20, r24
    190e:	97 ff       	sbrs	r25, 7
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <dtoa_prf+0x234>
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	3e e2       	ldi	r19, 0x2E	; 46
    191c:	93 2e       	mov	r9, r19
    191e:	fc 01       	movw	r30, r24
    1920:	e2 1b       	sub	r30, r18
    1922:	f1 09       	sbc	r31, r1
    1924:	9f 01       	movw	r18, r30
    1926:	dc 01       	movw	r26, r24
    1928:	a4 1b       	sub	r26, r20
    192a:	b5 0b       	sbc	r27, r21
    192c:	fe 01       	movw	r30, r28
    192e:	31 96       	adiw	r30, 0x01	; 1
    1930:	ea 0f       	add	r30, r26
    1932:	fb 1f       	adc	r31, r27
    1934:	a1 2f       	mov	r26, r17
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	66 24       	eor	r6, r6
    193a:	77 24       	eor	r7, r7
    193c:	6a 1a       	sub	r6, r26
    193e:	7b 0a       	sbc	r7, r27
    1940:	4f 3f       	cpi	r20, 0xFF	; 255
    1942:	1f ef       	ldi	r17, 0xFF	; 255
    1944:	51 07       	cpc	r21, r17
    1946:	19 f4       	brne	.+6      	; 0x194e <dtoa_prf+0x26c>
    1948:	d6 01       	movw	r26, r12
    194a:	9d 92       	st	X+, r9
    194c:	6d 01       	movw	r12, r26
    194e:	84 17       	cp	r24, r20
    1950:	95 07       	cpc	r25, r21
    1952:	54 f0       	brlt	.+20     	; 0x1968 <dtoa_prf+0x286>
    1954:	24 17       	cp	r18, r20
    1956:	35 07       	cpc	r19, r21
    1958:	3c f4       	brge	.+14     	; 0x1968 <dtoa_prf+0x286>
    195a:	7f 01       	movw	r14, r30
    195c:	e6 0e       	add	r14, r22
    195e:	f7 1e       	adc	r15, r23
    1960:	d7 01       	movw	r26, r14
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	1c 91       	ld	r17, X
    1966:	01 c0       	rjmp	.+2      	; 0x196a <dtoa_prf+0x288>
    1968:	10 e3       	ldi	r17, 0x30	; 48
    196a:	41 50       	subi	r20, 0x01	; 1
    196c:	51 09       	sbc	r21, r1
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	46 15       	cp	r20, r6
    1974:	57 05       	cpc	r21, r7
    1976:	24 f0       	brlt	.+8      	; 0x1980 <dtoa_prf+0x29e>
    1978:	d6 01       	movw	r26, r12
    197a:	1d 93       	st	X+, r17
    197c:	6d 01       	movw	r12, r26
    197e:	e0 cf       	rjmp	.-64     	; 0x1940 <dtoa_prf+0x25e>
    1980:	48 17       	cp	r20, r24
    1982:	59 07       	cpc	r21, r25
    1984:	39 f4       	brne	.+14     	; 0x1994 <dtoa_prf+0x2b2>
    1986:	06 33       	cpi	r16, 0x36	; 54
    1988:	20 f4       	brcc	.+8      	; 0x1992 <dtoa_prf+0x2b0>
    198a:	05 33       	cpi	r16, 0x35	; 53
    198c:	19 f4       	brne	.+6      	; 0x1994 <dtoa_prf+0x2b2>
    198e:	a1 10       	cpse	r10, r1
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <dtoa_prf+0x2b2>
    1992:	11 e3       	ldi	r17, 0x31	; 49
    1994:	f6 01       	movw	r30, r12
    1996:	11 93       	st	Z+, r17
    1998:	8b 2d       	mov	r24, r11
    199a:	df 01       	movw	r26, r30
    199c:	90 e2       	ldi	r25, 0x20	; 32
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <dtoa_prf+0x2c2>
    19a0:	9d 93       	st	X+, r25
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	81 11       	cpse	r24, r1
    19a6:	fc cf       	rjmp	.-8      	; 0x19a0 <dtoa_prf+0x2be>
    19a8:	eb 0d       	add	r30, r11
    19aa:	f1 1d       	adc	r31, r1
    19ac:	10 82       	st	Z, r1
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	c9 01       	movw	r24, r18
    19b4:	29 96       	adiw	r28, 0x09	; 9
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	bf 90       	pop	r11
    19d2:	af 90       	pop	r10
    19d4:	9f 90       	pop	r9
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	08 95       	ret

000019dc <__prologue_saves__>:
    19dc:	2f 92       	push	r2
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	ca 1b       	sub	r28, r26
    1a06:	db 0b       	sbc	r29, r27
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	09 94       	ijmp

00001a14 <__epilogue_restores__>:
    1a14:	2a 88       	ldd	r2, Y+18	; 0x12
    1a16:	39 88       	ldd	r3, Y+17	; 0x11
    1a18:	48 88       	ldd	r4, Y+16	; 0x10
    1a1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a20:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a22:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a24:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a26:	b9 84       	ldd	r11, Y+9	; 0x09
    1a28:	c8 84       	ldd	r12, Y+8	; 0x08
    1a2a:	df 80       	ldd	r13, Y+7	; 0x07
    1a2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a2e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a30:	0c 81       	ldd	r16, Y+4	; 0x04
    1a32:	1b 81       	ldd	r17, Y+3	; 0x03
    1a34:	aa 81       	ldd	r26, Y+2	; 0x02
    1a36:	b9 81       	ldd	r27, Y+1	; 0x01
    1a38:	ce 0f       	add	r28, r30
    1a3a:	d1 1d       	adc	r29, r1
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	ed 01       	movw	r28, r26
    1a48:	08 95       	ret

00001a4a <_exit>:
    1a4a:	f8 94       	cli

00001a4c <__stop_program>:
    1a4c:	ff cf       	rjmp	.-2      	; 0x1a4c <__stop_program>
